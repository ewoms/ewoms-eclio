#include <ewoms/eclio/parser/deck/udavalue.hh>
#include <ewoms/eclio/parser/parserkeyword.hh>
#include <ewoms/eclio/parser/parseritem.hh>
#include <ewoms/eclio/parser/parserrecord.hh>
#include <ewoms/eclio/parser/parser.hh>
#include <ewoms/eclio/parser/parserkeywords.hh>


namespace Ewoms {
namespace ParserKeywords {


void addDefaultKeywords(Parser& p);
void addDefaultKeywords(Parser& p) {
p.addKeyword< ParserKeywords::ACTDIMS >();
p.addKeyword< ParserKeywords::ACTION >();
p.addKeyword< ParserKeywords::ACTIONG >();
p.addKeyword< ParserKeywords::ACTIONR >();
p.addKeyword< ParserKeywords::ACTIONW >();
p.addKeyword< ParserKeywords::ACTIONX >();
p.addKeyword< ParserKeywords::ACTNUM >();
p.addKeyword< ParserKeywords::ACTPARAM >();
p.addKeyword< ParserKeywords::ADD >();
p.addKeyword< ParserKeywords::ADDREG >();
p.addKeyword< ParserKeywords::ADDZCORN >();
p.addKeyword< ParserKeywords::ADSALNOD >();
p.addKeyword< ParserKeywords::AITS >();
p.addKeyword< ParserKeywords::AITSOFF >();
p.addKeyword< ParserKeywords::ALKADS >();
p.addKeyword< ParserKeywords::ALKALINE >();
p.addKeyword< ParserKeywords::ALKROCK >();
p.addKeyword< ParserKeywords::ALL >();
p.addKeyword< ParserKeywords::ALPOLADS >();
p.addKeyword< ParserKeywords::ALSURFAD >();
p.addKeyword< ParserKeywords::ALSURFST >();
p.addKeyword< ParserKeywords::API >();
p.addKeyword< ParserKeywords::APIGROUP >();
p.addKeyword< ParserKeywords::AQANCONL >();
p.addKeyword< ParserKeywords::AQANNC >();
p.addKeyword< ParserKeywords::AQANTRC >();
p.addKeyword< ParserKeywords::AQUANCON >();
p.addKeyword< ParserKeywords::AQUCON >();
p.addKeyword< ParserKeywords::AQUCT >();
p.addKeyword< ParserKeywords::AQUCWFAC >();
p.addKeyword< ParserKeywords::AQUDIMS >();
p.addKeyword< ParserKeywords::AQUFET >();
p.addKeyword< ParserKeywords::AQUFETP >();
p.addKeyword< ParserKeywords::AQUFLUX >();
p.addKeyword< ParserKeywords::AQUIFER_PROBE_ANALYTIC >();
p.addKeyword< ParserKeywords::AQUIFER_PROBE_NUMERIC >();
p.addKeyword< ParserKeywords::AQUNNC >();
p.addKeyword< ParserKeywords::AQUNUM >();
p.addKeyword< ParserKeywords::AQUTAB >();
p.addKeyword< ParserKeywords::AUTOCOAR >();
p.addKeyword< ParserKeywords::AUTOREF >();
p.addKeyword< ParserKeywords::BC >();
p.addKeyword< ParserKeywords::BIGMODEL >();
p.addKeyword< ParserKeywords::BLACKOIL >();
p.addKeyword< ParserKeywords::BLOCK_PROBE >();
p.addKeyword< ParserKeywords::BLOCK_PROBE300 >();
p.addKeyword< ParserKeywords::BOUNDARY >();
p.addKeyword< ParserKeywords::BOX >();
p.addKeyword< ParserKeywords::BPARA >();
p.addKeyword< ParserKeywords::BPIDIMS >();
p.addKeyword< ParserKeywords::BRANPROP >();
p.addKeyword< ParserKeywords::BRINE >();
p.addKeyword< ParserKeywords::BTOBALFA >();
p.addKeyword< ParserKeywords::BTOBALFV >();
p.addKeyword< ParserKeywords::CALTRAC >();
p.addKeyword< ParserKeywords::CARFIN >();
p.addKeyword< ParserKeywords::CART >();
p.addKeyword< ParserKeywords::CBMOPTS >();
p.addKeyword< ParserKeywords::CECON >();
p.addKeyword< ParserKeywords::CIRCLE >();
p.addKeyword< ParserKeywords::COAL >();
p.addKeyword< ParserKeywords::COALADS >();
p.addKeyword< ParserKeywords::COALNUM >();
p.addKeyword< ParserKeywords::COALPP >();
p.addKeyword< ParserKeywords::COARSEN >();
p.addKeyword< ParserKeywords::COLLAPSE >();
p.addKeyword< ParserKeywords::COLUMNS >();
p.addKeyword< ParserKeywords::COMPDAT >();
p.addKeyword< ParserKeywords::COMPDATX >();
p.addKeyword< ParserKeywords::COMPFLSH >();
p.addKeyword< ParserKeywords::COMPIMB >();
p.addKeyword< ParserKeywords::COMPINJK >();
p.addKeyword< ParserKeywords::COMPLMPL >();
p.addKeyword< ParserKeywords::COMPLUMP >();
p.addKeyword< ParserKeywords::COMPOFF >();
p.addKeyword< ParserKeywords::COMPORD >();
p.addKeyword< ParserKeywords::COMPRIV >();
p.addKeyword< ParserKeywords::COMPRP >();
p.addKeyword< ParserKeywords::COMPRPL >();
p.addKeyword< ParserKeywords::COMPS >();
p.addKeyword< ParserKeywords::COMPSEGL >();
p.addKeyword< ParserKeywords::COMPSEGS >();
p.addKeyword< ParserKeywords::COMPVE >();
p.addKeyword< ParserKeywords::COMPVEL >();
p.addKeyword< ParserKeywords::CONNECTION_PROBE >();
p.addKeyword< ParserKeywords::COORD >();
p.addKeyword< ParserKeywords::COORDSYS >();
p.addKeyword< ParserKeywords::COPY >();
p.addKeyword< ParserKeywords::COPYBOX >();
p.addKeyword< ParserKeywords::COPYREG >();
p.addKeyword< ParserKeywords::CPR >();
p.addKeyword< ParserKeywords::CREF >();
p.addKeyword< ParserKeywords::CREFS >();
p.addKeyword< ParserKeywords::CRITPERM >();
p.addKeyword< ParserKeywords::CSKIN >();
p.addKeyword< ParserKeywords::DATE >();
p.addKeyword< ParserKeywords::DATES >();
p.addKeyword< ParserKeywords::DATUM >();
p.addKeyword< ParserKeywords::DATUMR >();
p.addKeyword< ParserKeywords::DATUMRX >();
p.addKeyword< ParserKeywords::DCQDEFN >();
p.addKeyword< ParserKeywords::DEADOIL >();
p.addKeyword< ParserKeywords::DEBUG_ >();
p.addKeyword< ParserKeywords::DELAYACT >();
p.addKeyword< ParserKeywords::DENSITY >();
p.addKeyword< ParserKeywords::DEPTH >();
p.addKeyword< ParserKeywords::DEPTHTAB >();
p.addKeyword< ParserKeywords::DEPTHZ >();
p.addKeyword< ParserKeywords::DIAGDISP >();
p.addKeyword< ParserKeywords::DIFF >();
p.addKeyword< ParserKeywords::DIFFC >();
p.addKeyword< ParserKeywords::DIFFCOAL >();
p.addKeyword< ParserKeywords::DIFFDP >();
p.addKeyword< ParserKeywords::DIFFMMF >();
p.addKeyword< ParserKeywords::DIFFMR >();
p.addKeyword< ParserKeywords::DIFFMTHT >();
p.addKeyword< ParserKeywords::DIFFMX >();
p.addKeyword< ParserKeywords::DIFFMY >();
p.addKeyword< ParserKeywords::DIFFMZ >();
p.addKeyword< ParserKeywords::DIFFR >();
p.addKeyword< ParserKeywords::DIFFTHT >();
p.addKeyword< ParserKeywords::DIFFUSE >();
p.addKeyword< ParserKeywords::DIFFX >();
p.addKeyword< ParserKeywords::DIFFY >();
p.addKeyword< ParserKeywords::DIFFZ >();
p.addKeyword< ParserKeywords::DIMENS >();
p.addKeyword< ParserKeywords::DIMPES >();
p.addKeyword< ParserKeywords::DIMPLICT >();
p.addKeyword< ParserKeywords::DISGAS >();
p.addKeyword< ParserKeywords::DISPDIMS >();
p.addKeyword< ParserKeywords::DISPERSE >();
p.addKeyword< ParserKeywords::DOMAINS >();
p.addKeyword< ParserKeywords::DPGRID >();
p.addKeyword< ParserKeywords::DPKRMOD >();
p.addKeyword< ParserKeywords::DPNUM >();
p.addKeyword< ParserKeywords::DR >();
p.addKeyword< ParserKeywords::DREF >();
p.addKeyword< ParserKeywords::DREFS >();
p.addKeyword< ParserKeywords::DRILPRI >();
p.addKeyword< ParserKeywords::DRSDT >();
p.addKeyword< ParserKeywords::DRSDTR >();
p.addKeyword< ParserKeywords::DRV >();
p.addKeyword< ParserKeywords::DRVDT >();
p.addKeyword< ParserKeywords::DRVDTR >();
p.addKeyword< ParserKeywords::DSPDEINT >();
p.addKeyword< ParserKeywords::DTHETA >();
p.addKeyword< ParserKeywords::DTHETAV >();
p.addKeyword< ParserKeywords::DUALPERM >();
p.addKeyword< ParserKeywords::DUALPORO >();
p.addKeyword< ParserKeywords::DUMPCUPL >();
p.addKeyword< ParserKeywords::DUMPFLUX >();
p.addKeyword< ParserKeywords::DX >();
p.addKeyword< ParserKeywords::DXV >();
p.addKeyword< ParserKeywords::DY >();
p.addKeyword< ParserKeywords::DYNRDIMS >();
p.addKeyword< ParserKeywords::DYV >();
p.addKeyword< ParserKeywords::DZ >();
p.addKeyword< ParserKeywords::DZMATRIX >();
p.addKeyword< ParserKeywords::DZMTRX >();
p.addKeyword< ParserKeywords::DZMTRXV >();
p.addKeyword< ParserKeywords::DZNET >();
p.addKeyword< ParserKeywords::DZV >();
p.addKeyword< ParserKeywords::ECHO >();
p.addKeyword< ParserKeywords::ECLMC >();
p.addKeyword< ParserKeywords::EDIT >();
p.addKeyword< ParserKeywords::EDITNNC >();
p.addKeyword< ParserKeywords::EDITNNCR >();
p.addKeyword< ParserKeywords::EHYSTR >();
p.addKeyword< ParserKeywords::EHYSTRR >();
p.addKeyword< ParserKeywords::END >();
p.addKeyword< ParserKeywords::ENDACTIO >();
p.addKeyword< ParserKeywords::ENDBOX >();
p.addKeyword< ParserKeywords::ENDDYN >();
p.addKeyword< ParserKeywords::ENDFIN >();
p.addKeyword< ParserKeywords::ENDINC >();
p.addKeyword< ParserKeywords::ENDNUM >();
p.addKeyword< ParserKeywords::ENDPOINT_SPECIFIERS >();
p.addKeyword< ParserKeywords::ENDSCALE >();
p.addKeyword< ParserKeywords::ENDSKIP >();
p.addKeyword< ParserKeywords::ENKRVD >();
p.addKeyword< ParserKeywords::ENPCVD >();
p.addKeyword< ParserKeywords::ENPTVD >();
p.addKeyword< ParserKeywords::ENSPCVD >();
p.addKeyword< ParserKeywords::EPSDBGS >();
p.addKeyword< ParserKeywords::EPSDEBUG >();
p.addKeyword< ParserKeywords::EQLDIMS >();
p.addKeyword< ParserKeywords::EQLNUM >();
p.addKeyword< ParserKeywords::EQLOPTS >();
p.addKeyword< ParserKeywords::EQLZCORN >();
p.addKeyword< ParserKeywords::EQUALREG >();
p.addKeyword< ParserKeywords::EQUALS >();
p.addKeyword< ParserKeywords::EQUIL >();
p.addKeyword< ParserKeywords::ESSNODE >();
p.addKeyword< ParserKeywords::EXCAVATE >();
p.addKeyword< ParserKeywords::EXCEL >();
p.addKeyword< ParserKeywords::EXTFIN >();
p.addKeyword< ParserKeywords::EXTHOST >();
p.addKeyword< ParserKeywords::EXTRAPMS >();
p.addKeyword< ParserKeywords::EXTREPGL >();
p.addKeyword< ParserKeywords::FAULTDIM >();
p.addKeyword< ParserKeywords::FAULTS >();
p.addKeyword< ParserKeywords::FBHPDEF >();
p.addKeyword< ParserKeywords::FHERCHBL >();
p.addKeyword< ParserKeywords::FIELD >();
p.addKeyword< ParserKeywords::FIELD_PROBE >();
p.addKeyword< ParserKeywords::FILEUNIT >();
p.addKeyword< ParserKeywords::FILLEPS >();
p.addKeyword< ParserKeywords::FIPNUM >();
p.addKeyword< ParserKeywords::FIPOWG >();
p.addKeyword< ParserKeywords::FIPSEP >();
p.addKeyword< ParserKeywords::FIP_PROBE >();
p.addKeyword< ParserKeywords::FLUXNUM >();
p.addKeyword< ParserKeywords::FLUXREG >();
p.addKeyword< ParserKeywords::FLUXTYPE >();
p.addKeyword< ParserKeywords::FMTHMD >();
p.addKeyword< ParserKeywords::FMTIN >();
p.addKeyword< ParserKeywords::FMTOUT >();
p.addKeyword< ParserKeywords::FMWSET >();
p.addKeyword< ParserKeywords::FOAM >();
p.addKeyword< ParserKeywords::FOAMADS >();
p.addKeyword< ParserKeywords::FOAMDCYO >();
p.addKeyword< ParserKeywords::FOAMDCYW >();
p.addKeyword< ParserKeywords::FOAMFCN >();
p.addKeyword< ParserKeywords::FOAMFRM >();
p.addKeyword< ParserKeywords::FOAMFSC >();
p.addKeyword< ParserKeywords::FOAMFSO >();
p.addKeyword< ParserKeywords::FOAMFST >();
p.addKeyword< ParserKeywords::FOAMFSW >();
p.addKeyword< ParserKeywords::FOAMMOB >();
p.addKeyword< ParserKeywords::FOAMMOBP >();
p.addKeyword< ParserKeywords::FOAMMOBS >();
p.addKeyword< ParserKeywords::FOAMOPTS >();
p.addKeyword< ParserKeywords::FOAMROCK >();
p.addKeyword< ParserKeywords::FORMFEED >();
p.addKeyword< ParserKeywords::FRICTION >();
p.addKeyword< ParserKeywords::FULLIMP >();
p.addKeyword< ParserKeywords::GAS >();
p.addKeyword< ParserKeywords::GASBEGIN >();
p.addKeyword< ParserKeywords::GASCONC >();
p.addKeyword< ParserKeywords::GASDENT >();
p.addKeyword< ParserKeywords::GASEND >();
p.addKeyword< ParserKeywords::GASFCOMP >();
p.addKeyword< ParserKeywords::GASFDECR >();
p.addKeyword< ParserKeywords::GASFDELC >();
p.addKeyword< ParserKeywords::GASFIELD >();
p.addKeyword< ParserKeywords::GASFTARG >();
p.addKeyword< ParserKeywords::GASMONTH >();
p.addKeyword< ParserKeywords::GASPERIO >();
p.addKeyword< ParserKeywords::GASSATC >();
p.addKeyword< ParserKeywords::GASVISCT >();
p.addKeyword< ParserKeywords::GASYEAR >();
p.addKeyword< ParserKeywords::GCALECON >();
p.addKeyword< ParserKeywords::GCOMPIDX >();
p.addKeyword< ParserKeywords::GCONCAL >();
p.addKeyword< ParserKeywords::GCONENG >();
p.addKeyword< ParserKeywords::GCONINJE >();
p.addKeyword< ParserKeywords::GCONPRI >();
p.addKeyword< ParserKeywords::GCONPROD >();
p.addKeyword< ParserKeywords::GCONSALE >();
p.addKeyword< ParserKeywords::GCONSUMP >();
p.addKeyword< ParserKeywords::GCONTOL >();
p.addKeyword< ParserKeywords::GCUTBACK >();
p.addKeyword< ParserKeywords::GCVD >();
p.addKeyword< ParserKeywords::GDCQ >();
p.addKeyword< ParserKeywords::GDCQECON >();
p.addKeyword< ParserKeywords::GDFILE >();
p.addKeyword< ParserKeywords::GDIMS >();
p.addKeyword< ParserKeywords::GDORIENT >();
p.addKeyword< ParserKeywords::GDRILPOT >();
p.addKeyword< ParserKeywords::GECON >();
p.addKeyword< ParserKeywords::GEFAC >();
p.addKeyword< ParserKeywords::GETGLOB >();
p.addKeyword< ParserKeywords::GI >();
p.addKeyword< ParserKeywords::GIALL >();
p.addKeyword< ParserKeywords::GIMODEL >();
p.addKeyword< ParserKeywords::GINODE >();
p.addKeyword< ParserKeywords::GLIFTLIM >();
p.addKeyword< ParserKeywords::GLIFTOPT >();
p.addKeyword< ParserKeywords::GMWSET >();
p.addKeyword< ParserKeywords::GNETDP >();
p.addKeyword< ParserKeywords::GNETINJE >();
p.addKeyword< ParserKeywords::GNETPUMP >();
p.addKeyword< ParserKeywords::GPMAINT >();
p.addKeyword< ParserKeywords::GRADGRUP >();
p.addKeyword< ParserKeywords::GRADRESV >();
p.addKeyword< ParserKeywords::GRADRFT >();
p.addKeyword< ParserKeywords::GRADWELL >();
p.addKeyword< ParserKeywords::GRAVCONS >();
p.addKeyword< ParserKeywords::GRAVDR >();
p.addKeyword< ParserKeywords::GRAVDRB >();
p.addKeyword< ParserKeywords::GRAVDRM >();
p.addKeyword< ParserKeywords::GRAVITY >();
p.addKeyword< ParserKeywords::GRDREACH >();
p.addKeyword< ParserKeywords::GRID >();
p.addKeyword< ParserKeywords::GRIDFILE >();
p.addKeyword< ParserKeywords::GRIDOPTS >();
p.addKeyword< ParserKeywords::GRIDUNIT >();
p.addKeyword< ParserKeywords::GROUP_PROBE >();
p.addKeyword< ParserKeywords::GRUPMAST >();
p.addKeyword< ParserKeywords::GRUPNET >();
p.addKeyword< ParserKeywords::GRUPRIG >();
p.addKeyword< ParserKeywords::GRUPSLAV >();
p.addKeyword< ParserKeywords::GRUPTARG >();
p.addKeyword< ParserKeywords::GRUPTREE >();
p.addKeyword< ParserKeywords::GSATINJE >();
p.addKeyword< ParserKeywords::GSATPROD >();
p.addKeyword< ParserKeywords::GSEPCOND >();
p.addKeyword< ParserKeywords::GSSCPTST >();
p.addKeyword< ParserKeywords::GSWINGF >();
p.addKeyword< ParserKeywords::GTADD >();
p.addKeyword< ParserKeywords::GTMULT >();
p.addKeyword< ParserKeywords::GUIDECAL >();
p.addKeyword< ParserKeywords::GUIDERAT >();
p.addKeyword< ParserKeywords::GUPFREQ >();
p.addKeyword< ParserKeywords::GWRTWCV >();
p.addKeyword< ParserKeywords::HALFTRAN >();
p.addKeyword< ParserKeywords::HBNUM >();
p.addKeyword< ParserKeywords::HDISP >();
p.addKeyword< ParserKeywords::HEATCR >();
p.addKeyword< ParserKeywords::HEATCRT >();
p.addKeyword< ParserKeywords::HMAQUCT >();
p.addKeyword< ParserKeywords::HMAQUFET >();
p.addKeyword< ParserKeywords::HMAQUNUM >();
p.addKeyword< ParserKeywords::HMDIMS >();
p.addKeyword< ParserKeywords::HMFAULTS >();
p.addKeyword< ParserKeywords::HMMLAQUN >();
p.addKeyword< ParserKeywords::HMMLCTAQ >();
p.addKeyword< ParserKeywords::HMMLFTAQ >();
p.addKeyword< ParserKeywords::HMMLTWCN >();
p.addKeyword< ParserKeywords::HMMULTFT >();
p.addKeyword< ParserKeywords::HMPROPS >();
p.addKeyword< ParserKeywords::HMROCK >();
p.addKeyword< ParserKeywords::HMROCKT >();
p.addKeyword< ParserKeywords::HMRREF >();
p.addKeyword< ParserKeywords::HMWELCON >();
p.addKeyword< ParserKeywords::HMWPIMLT >();
p.addKeyword< ParserKeywords::HRFIN >();
p.addKeyword< ParserKeywords::HWKRO >();
p.addKeyword< ParserKeywords::HWKRORG >();
p.addKeyword< ParserKeywords::HWKRORW >();
p.addKeyword< ParserKeywords::HWKRW >();
p.addKeyword< ParserKeywords::HWKRWR >();
p.addKeyword< ParserKeywords::HWPCW >();
p.addKeyword< ParserKeywords::HWSNUM >();
p.addKeyword< ParserKeywords::HWSOGCR >();
p.addKeyword< ParserKeywords::HWSOWCR >();
p.addKeyword< ParserKeywords::HWSWCR >();
p.addKeyword< ParserKeywords::HWSWL >();
p.addKeyword< ParserKeywords::HWSWLPC >();
p.addKeyword< ParserKeywords::HWSWU >();
p.addKeyword< ParserKeywords::HXFIN >();
p.addKeyword< ParserKeywords::HYDRHEAD >();
p.addKeyword< ParserKeywords::HYFIN >();
p.addKeyword< ParserKeywords::HYMOBGDR >();
p.addKeyword< ParserKeywords::HYST >();
p.addKeyword< ParserKeywords::HYSTCHCK >();
p.addKeyword< ParserKeywords::HZFIN >();
p.addKeyword< ParserKeywords::IHOST >();
p.addKeyword< ParserKeywords::IMBNUM >();
p.addKeyword< ParserKeywords::IMBNUMMF >();
p.addKeyword< ParserKeywords::IMKRVD >();
p.addKeyword< ParserKeywords::IMPCVD >();
p.addKeyword< ParserKeywords::IMPES >();
p.addKeyword< ParserKeywords::IMPLICIT >();
p.addKeyword< ParserKeywords::IMPORT >();
p.addKeyword< ParserKeywords::IMPTVD >();
p.addKeyword< ParserKeywords::IMSPCVD >();
p.addKeyword< ParserKeywords::INCLUDE >();
p.addKeyword< ParserKeywords::INIT >();
p.addKeyword< ParserKeywords::INRAD >();
p.addKeyword< ParserKeywords::INSPEC >();
p.addKeyword< ParserKeywords::INTPC >();
p.addKeyword< ParserKeywords::IONROCK >();
p.addKeyword< ParserKeywords::IONXROCK >();
p.addKeyword< ParserKeywords::IONXSURF >();
p.addKeyword< ParserKeywords::IPCG >();
p.addKeyword< ParserKeywords::IPCW >();
p.addKeyword< ParserKeywords::ISGCR >();
p.addKeyword< ParserKeywords::ISGL >();
p.addKeyword< ParserKeywords::ISGLPC >();
p.addKeyword< ParserKeywords::ISGU >();
p.addKeyword< ParserKeywords::ISOGCR >();
p.addKeyword< ParserKeywords::ISOLNUM >();
p.addKeyword< ParserKeywords::ISOWCR >();
p.addKeyword< ParserKeywords::ISWCR >();
p.addKeyword< ParserKeywords::ISWL >();
p.addKeyword< ParserKeywords::ISWLPC >();
p.addKeyword< ParserKeywords::ISWU >();
p.addKeyword< ParserKeywords::JFUNC >();
p.addKeyword< ParserKeywords::JFUNCR >();
p.addKeyword< ParserKeywords::KRNUM >();
p.addKeyword< ParserKeywords::KRNUMMF >();
p.addKeyword< ParserKeywords::LAB >();
p.addKeyword< ParserKeywords::LANGMPL >();
p.addKeyword< ParserKeywords::LANGMUIR >();
p.addKeyword< ParserKeywords::LANGSOLV >();
p.addKeyword< ParserKeywords::LCUNIT >();
p.addKeyword< ParserKeywords::LGR >();
p.addKeyword< ParserKeywords::LGRCOPY >();
p.addKeyword< ParserKeywords::LGRFREE >();
p.addKeyword< ParserKeywords::LGRLOCK >();
p.addKeyword< ParserKeywords::LGROFF >();
p.addKeyword< ParserKeywords::LGRON >();
p.addKeyword< ParserKeywords::LICENSE >();
p.addKeyword< ParserKeywords::LIFTOPT >();
p.addKeyword< ParserKeywords::LINCOM >();
p.addKeyword< ParserKeywords::LINKPERM >();
p.addKeyword< ParserKeywords::LIVEOIL >();
p.addKeyword< ParserKeywords::LKRO >();
p.addKeyword< ParserKeywords::LKRORG >();
p.addKeyword< ParserKeywords::LKRORW >();
p.addKeyword< ParserKeywords::LKRW >();
p.addKeyword< ParserKeywords::LKRWR >();
p.addKeyword< ParserKeywords::LOAD >();
p.addKeyword< ParserKeywords::LOWSALT >();
p.addKeyword< ParserKeywords::LPCW >();
p.addKeyword< ParserKeywords::LSALTFNC >();
p.addKeyword< ParserKeywords::LSLTWNUM >();
p.addKeyword< ParserKeywords::LSNUM >();
p.addKeyword< ParserKeywords::LSOGCR >();
p.addKeyword< ParserKeywords::LSOWCR >();
p.addKeyword< ParserKeywords::LSWCR >();
p.addKeyword< ParserKeywords::LSWL >();
p.addKeyword< ParserKeywords::LSWLPC >();
p.addKeyword< ParserKeywords::LSWU >();
p.addKeyword< ParserKeywords::LTOSIGMA >();
p.addKeyword< ParserKeywords::LWKRO >();
p.addKeyword< ParserKeywords::LWKRORG >();
p.addKeyword< ParserKeywords::LWKRORW >();
p.addKeyword< ParserKeywords::LWKRW >();
p.addKeyword< ParserKeywords::LWKRWR >();
p.addKeyword< ParserKeywords::LWPCW >();
p.addKeyword< ParserKeywords::LWSLTNUM >();
p.addKeyword< ParserKeywords::LWSNUM >();
p.addKeyword< ParserKeywords::LWSOGCR >();
p.addKeyword< ParserKeywords::LWSOWCR >();
p.addKeyword< ParserKeywords::LWSWCR >();
p.addKeyword< ParserKeywords::LWSWL >();
p.addKeyword< ParserKeywords::LWSWLPC >();
p.addKeyword< ParserKeywords::LWSWU >();
p.addKeyword< ParserKeywords::LX >();
p.addKeyword< ParserKeywords::LY >();
p.addKeyword< ParserKeywords::LZ >();
p.addKeyword< ParserKeywords::MAPAXES >();
p.addKeyword< ParserKeywords::MAPUNITS >();
p.addKeyword< ParserKeywords::MASSFLOW >();
p.addKeyword< ParserKeywords::MATCORR >();
p.addKeyword< ParserKeywords::MAXVALUE >();
p.addKeyword< ParserKeywords::MEMORY >();
p.addKeyword< ParserKeywords::MESSAGE >();
p.addKeyword< ParserKeywords::MESSAGES >();
p.addKeyword< ParserKeywords::MESSOPTS >();
p.addKeyword< ParserKeywords::MESSSRVC >();
p.addKeyword< ParserKeywords::METRIC >();
p.addKeyword< ParserKeywords::MINNNCT >();
p.addKeyword< ParserKeywords::MINPORV >();
p.addKeyword< ParserKeywords::MINPV >();
p.addKeyword< ParserKeywords::MINPVFIL >();
p.addKeyword< ParserKeywords::MINPVV >();
p.addKeyword< ParserKeywords::MINVALUE >();
p.addKeyword< ParserKeywords::MISC >();
p.addKeyword< ParserKeywords::MISCIBLE >();
p.addKeyword< ParserKeywords::MISCNUM >();
p.addKeyword< ParserKeywords::MLANG >();
p.addKeyword< ParserKeywords::MLANGSLV >();
p.addKeyword< ParserKeywords::MONITOR >();
p.addKeyword< ParserKeywords::MPFANUM >();
p.addKeyword< ParserKeywords::MSFN >();
p.addKeyword< ParserKeywords::MSGFILE >();
p.addKeyword< ParserKeywords::MULSGGD >();
p.addKeyword< ParserKeywords::MULSGGDV >();
p.addKeyword< ParserKeywords::MULTFLT >();
p.addKeyword< ParserKeywords::MULTIN >();
p.addKeyword< ParserKeywords::MULTIPLY >();
p.addKeyword< ParserKeywords::MULTIREG >();
p.addKeyword< ParserKeywords::MULTNUM >();
p.addKeyword< ParserKeywords::MULTOUT >();
p.addKeyword< ParserKeywords::MULTOUTS >();
p.addKeyword< ParserKeywords::MULTPV >();
p.addKeyword< ParserKeywords::MULTREAL >();
p.addKeyword< ParserKeywords::MULTREGD >();
p.addKeyword< ParserKeywords::MULTREGH >();
p.addKeyword< ParserKeywords::MULTREGP >();
p.addKeyword< ParserKeywords::MULTREGT >();
p.addKeyword< ParserKeywords::MULTSIG >();
p.addKeyword< ParserKeywords::MULTSIGV >();
p.addKeyword< ParserKeywords::MULT_XYZ >();
p.addKeyword< ParserKeywords::MW >();
p.addKeyword< ParserKeywords::MWS >();
p.addKeyword< ParserKeywords::NARROW >();
p.addKeyword< ParserKeywords::NCONSUMP >();
p.addKeyword< ParserKeywords::NEFAC >();
p.addKeyword< ParserKeywords::NETBALAN >();
p.addKeyword< ParserKeywords::NETCOMPA >();
p.addKeyword< ParserKeywords::NETWORK >();
p.addKeyword< ParserKeywords::NEWTRAN >();
p.addKeyword< ParserKeywords::NEXT >();
p.addKeyword< ParserKeywords::NEXTSTEP >();
p.addKeyword< ParserKeywords::NEXTSTPL >();
p.addKeyword< ParserKeywords::NINENUM >();
p.addKeyword< ParserKeywords::NINEPOIN >();
p.addKeyword< ParserKeywords::NMATOPTS >();
p.addKeyword< ParserKeywords::NMATRIX >();
p.addKeyword< ParserKeywords::NNC >();
p.addKeyword< ParserKeywords::NNEWTF >();
p.addKeyword< ParserKeywords::NOCASC >();
p.addKeyword< ParserKeywords::NODEPROP >();
p.addKeyword< ParserKeywords::NODPPM >();
p.addKeyword< ParserKeywords::NOECHO >();
p.addKeyword< ParserKeywords::NOGGF >();
p.addKeyword< ParserKeywords::NOGRAV >();
p.addKeyword< ParserKeywords::NOHMD >();
p.addKeyword< ParserKeywords::NOHMO >();
p.addKeyword< ParserKeywords::NOHYST >();
p.addKeyword< ParserKeywords::NOINSPEC >();
p.addKeyword< ParserKeywords::NOMONITO >();
p.addKeyword< ParserKeywords::NONNC >();
p.addKeyword< ParserKeywords::NORSSPEC >();
p.addKeyword< ParserKeywords::NOSIM >();
p.addKeyword< ParserKeywords::NOWARN >();
p.addKeyword< ParserKeywords::NOWARNEP >();
p.addKeyword< ParserKeywords::NRSOUT >();
p.addKeyword< ParserKeywords::NSTACK >();
p.addKeyword< ParserKeywords::NTG >();
p.addKeyword< ParserKeywords::NUMRES >();
p.addKeyword< ParserKeywords::NUPCOL >();
p.addKeyword< ParserKeywords::NWATREM >();
p.addKeyword< ParserKeywords::NXFIN >();
p.addKeyword< ParserKeywords::NYFIN >();
p.addKeyword< ParserKeywords::NZFIN >();
p.addKeyword< ParserKeywords::OCOMPIDX >();
p.addKeyword< ParserKeywords::OFM >();
p.addKeyword< ParserKeywords::OIL >();
p.addKeyword< ParserKeywords::OILAPI >();
p.addKeyword< ParserKeywords::OILCOMPR >();
p.addKeyword< ParserKeywords::OILDENT >();
p.addKeyword< ParserKeywords::OILMW >();
p.addKeyword< ParserKeywords::OILVISCT >();
p.addKeyword< ParserKeywords::OILVTIM >();
p.addKeyword< ParserKeywords::OLDTRAN >();
p.addKeyword< ParserKeywords::OLDTRANR >();
p.addKeyword< ParserKeywords::OPERATE >();
p.addKeyword< ParserKeywords::OPERATER >();
p.addKeyword< ParserKeywords::OPERNUM >();
p.addKeyword< ParserKeywords::OPTIONS >();
p.addKeyword< ParserKeywords::OUTRAD >();
p.addKeyword< ParserKeywords::OVERBURD >();
p.addKeyword< ParserKeywords::PARALLEL >();
p.addKeyword< ParserKeywords::PARAOPTS >();
p.addKeyword< ParserKeywords::PARTTRAC >();
p.addKeyword< ParserKeywords::PATHS >();
p.addKeyword< ParserKeywords::PBUB >();
p.addKeyword< ParserKeywords::PBVD >();
p.addKeyword< ParserKeywords::PCG >();
p.addKeyword< ParserKeywords::PCG32D >();
p.addKeyword< ParserKeywords::PCW >();
p.addKeyword< ParserKeywords::PCW32D >();
p.addKeyword< ParserKeywords::PDEW >();
p.addKeyword< ParserKeywords::PDVD >();
p.addKeyword< ParserKeywords::PEBI >();
p.addKeyword< ParserKeywords::PECOEFS >();
p.addKeyword< ParserKeywords::PEDIMS >();
p.addKeyword< ParserKeywords::PEGTABX >();
p.addKeyword< ParserKeywords::PEKTABX >();
p.addKeyword< ParserKeywords::PENUM >();
p.addKeyword< ParserKeywords::PERFORMANCE_PROBE >();
p.addKeyword< ParserKeywords::PERMAVE >();
p.addKeyword< ParserKeywords::PERMR >();
p.addKeyword< ParserKeywords::PERMTHT >();
p.addKeyword< ParserKeywords::PERMX >();
p.addKeyword< ParserKeywords::PERMXY >();
p.addKeyword< ParserKeywords::PERMY >();
p.addKeyword< ParserKeywords::PERMYZ >();
p.addKeyword< ParserKeywords::PERMZ >();
p.addKeyword< ParserKeywords::PERMZX >();
p.addKeyword< ParserKeywords::PETGRID >();
p.addKeyword< ParserKeywords::PETOPTS >();
p.addKeyword< ParserKeywords::PICOND >();
p.addKeyword< ParserKeywords::PIMTDIMS >();
p.addKeyword< ParserKeywords::PIMULTAB >();
p.addKeyword< ParserKeywords::PINCH >();
p.addKeyword< ParserKeywords::PINCHNUM >();
p.addKeyword< ParserKeywords::PINCHOUT >();
p.addKeyword< ParserKeywords::PINCHREG >();
p.addKeyword< ParserKeywords::PINCHXY >();
p.addKeyword< ParserKeywords::PINTDIMS >();
p.addKeyword< ParserKeywords::PLMIXNUM >();
p.addKeyword< ParserKeywords::PLMIXPAR >();
p.addKeyword< ParserKeywords::PLYADS >();
p.addKeyword< ParserKeywords::PLYADSS >();
p.addKeyword< ParserKeywords::PLYATEMP >();
p.addKeyword< ParserKeywords::PLYCAMAX >();
p.addKeyword< ParserKeywords::PLYDHFLF >();
p.addKeyword< ParserKeywords::PLYMAX >();
p.addKeyword< ParserKeywords::PLYMWINJ >();
p.addKeyword< ParserKeywords::PLYOPTS >();
p.addKeyword< ParserKeywords::PLYRMDEN >();
p.addKeyword< ParserKeywords::PLYROCK >();
p.addKeyword< ParserKeywords::PLYROCKM >();
p.addKeyword< ParserKeywords::PLYSHEAR >();
p.addKeyword< ParserKeywords::PLYSHLOG >();
p.addKeyword< ParserKeywords::PLYTRRF >();
p.addKeyword< ParserKeywords::PLYTRRFA >();
p.addKeyword< ParserKeywords::PLYVISC >();
p.addKeyword< ParserKeywords::PLYVISCS >();
p.addKeyword< ParserKeywords::PLYVISCT >();
p.addKeyword< ParserKeywords::PLYVMH >();
p.addKeyword< ParserKeywords::PLYVSCST >();
p.addKeyword< ParserKeywords::PMAX >();
p.addKeyword< ParserKeywords::PMISC >();
p.addKeyword< ParserKeywords::POLYMER >();
p.addKeyword< ParserKeywords::POLYMW >();
p.addKeyword< ParserKeywords::PORO >();
p.addKeyword< ParserKeywords::PORV >();
p.addKeyword< ParserKeywords::PPCWMAX >();
p.addKeyword< ParserKeywords::PREF >();
p.addKeyword< ParserKeywords::PREFS >();
p.addKeyword< ParserKeywords::PRESSURE >();
p.addKeyword< ParserKeywords::PRIORITY >();
p.addKeyword< ParserKeywords::PROPS >();
p.addKeyword< ParserKeywords::PRORDER >();
p.addKeyword< ParserKeywords::PSTEADY >();
p.addKeyword< ParserKeywords::PSWRG >();
p.addKeyword< ParserKeywords::PSWRO >();
p.addKeyword< ParserKeywords::PVCDO >();
p.addKeyword< ParserKeywords::PVCO >();
p.addKeyword< ParserKeywords::PVDG >();
p.addKeyword< ParserKeywords::PVDO >();
p.addKeyword< ParserKeywords::PVDS >();
p.addKeyword< ParserKeywords::PVTG >();
p.addKeyword< ParserKeywords::PVTNUM >();
p.addKeyword< ParserKeywords::PVTO >();
p.addKeyword< ParserKeywords::PVTW >();
p.addKeyword< ParserKeywords::PVT_M >();
p.addKeyword< ParserKeywords::PYACTION >();
p.addKeyword< ParserKeywords::PYINPUT >();
p.addKeyword< ParserKeywords::QDRILL >();
p.addKeyword< ParserKeywords::QHRATING >();
p.addKeyword< ParserKeywords::QMOBIL >();
p.addKeyword< ParserKeywords::RADFIN4 >();
p.addKeyword< ParserKeywords::RADIAL >();
p.addKeyword< ParserKeywords::RAINFALL >();
p.addKeyword< ParserKeywords::RBEDCONT >();
p.addKeyword< ParserKeywords::RCMASTS >();
p.addKeyword< ParserKeywords::REACHES >();
p.addKeyword< ParserKeywords::READDATA >();
p.addKeyword< ParserKeywords::REFINE >();
p.addKeyword< ParserKeywords::REGDIMS >();
p.addKeyword< ParserKeywords::REGION2REGION_PROBE >();
p.addKeyword< ParserKeywords::REGIONS >();
p.addKeyword< ParserKeywords::REGION_PROBE >();
p.addKeyword< ParserKeywords::RESIDNUM >();
p.addKeyword< ParserKeywords::RESTART >();
p.addKeyword< ParserKeywords::RESVNUM >();
p.addKeyword< ParserKeywords::RHO >();
p.addKeyword< ParserKeywords::RIVDEBUG >();
p.addKeyword< ParserKeywords::RIVERSYS >();
p.addKeyword< ParserKeywords::RIVRDIMS >();
p.addKeyword< ParserKeywords::RIVRPROP >();
p.addKeyword< ParserKeywords::RIVRXSEC >();
p.addKeyword< ParserKeywords::RIVSALT >();
p.addKeyword< ParserKeywords::RIVTRACE >();
p.addKeyword< ParserKeywords::RKTRMDIR >();
p.addKeyword< ParserKeywords::ROCK >();
p.addKeyword< ParserKeywords::ROCK2D >();
p.addKeyword< ParserKeywords::ROCK2DTR >();
p.addKeyword< ParserKeywords::ROCKCOMP >();
p.addKeyword< ParserKeywords::ROCKFRAC >();
p.addKeyword< ParserKeywords::ROCKNUM >();
p.addKeyword< ParserKeywords::ROCKOPTS >();
p.addKeyword< ParserKeywords::ROCKPAMA >();
p.addKeyword< ParserKeywords::ROCKTAB >();
p.addKeyword< ParserKeywords::ROCKTABH >();
p.addKeyword< ParserKeywords::ROCKTABW >();
p.addKeyword< ParserKeywords::ROCKTHSG >();
p.addKeyword< ParserKeywords::ROCKTSIG >();
p.addKeyword< ParserKeywords::ROCKV >();
p.addKeyword< ParserKeywords::ROCKWNOD >();
p.addKeyword< ParserKeywords::RPTCPL >();
p.addKeyword< ParserKeywords::RPTGRID >();
p.addKeyword< ParserKeywords::RPTGRIDL >();
p.addKeyword< ParserKeywords::RPTHMD >();
p.addKeyword< ParserKeywords::RPTHMG >();
p.addKeyword< ParserKeywords::RPTHMW >();
p.addKeyword< ParserKeywords::RPTINIT >();
p.addKeyword< ParserKeywords::RPTISOL >();
p.addKeyword< ParserKeywords::RPTONLY >();
p.addKeyword< ParserKeywords::RPTONLYO >();
p.addKeyword< ParserKeywords::RPTPROPS >();
p.addKeyword< ParserKeywords::RPTREGS >();
p.addKeyword< ParserKeywords::RPTRST >();
p.addKeyword< ParserKeywords::RPTRUNSP >();
p.addKeyword< ParserKeywords::RPTSCHED >();
p.addKeyword< ParserKeywords::RPTSMRY >();
p.addKeyword< ParserKeywords::RPTSOL >();
p.addKeyword< ParserKeywords::RS >();
p.addKeyword< ParserKeywords::RSCONST >();
p.addKeyword< ParserKeywords::RSCONSTT >();
p.addKeyword< ParserKeywords::RSGI >();
p.addKeyword< ParserKeywords::RSSPEC >();
p.addKeyword< ParserKeywords::RSVD >();
p.addKeyword< ParserKeywords::RTEMP >();
p.addKeyword< ParserKeywords::RTEMPA >();
p.addKeyword< ParserKeywords::RTEMPVD >();
p.addKeyword< ParserKeywords::RUNSPEC >();
p.addKeyword< ParserKeywords::RUNSUM >();
p.addKeyword< ParserKeywords::RV >();
p.addKeyword< ParserKeywords::RVCONST >();
p.addKeyword< ParserKeywords::RVCONSTT >();
p.addKeyword< ParserKeywords::RVGI >();
p.addKeyword< ParserKeywords::RVVD >();
p.addKeyword< ParserKeywords::SALT >();
p.addKeyword< ParserKeywords::SALTNODE >();
p.addKeyword< ParserKeywords::SALTREST >();
p.addKeyword< ParserKeywords::SALTVD >();
p.addKeyword< ParserKeywords::SATNUM >();
p.addKeyword< ParserKeywords::SATOPTS >();
p.addKeyword< ParserKeywords::SAVE >();
p.addKeyword< ParserKeywords::SCALECRS >();
p.addKeyword< ParserKeywords::SCALELIM >();
p.addKeyword< ParserKeywords::SCDATAB >();
p.addKeyword< ParserKeywords::SCDETAB >();
p.addKeyword< ParserKeywords::SCDPTAB >();
p.addKeyword< ParserKeywords::SCDPTRAC >();
p.addKeyword< ParserKeywords::SCHEDULE >();
p.addKeyword< ParserKeywords::SCPDIMS >();
p.addKeyword< ParserKeywords::SCVD >();
p.addKeyword< ParserKeywords::SDENSITY >();
p.addKeyword< ParserKeywords::SEGMENT_PROBE >();
p.addKeyword< ParserKeywords::SEPARATE >();
p.addKeyword< ParserKeywords::SEPVALS >();
p.addKeyword< ParserKeywords::SFOAM >();
p.addKeyword< ParserKeywords::SGAS >();
p.addKeyword< ParserKeywords::SGCR >();
p.addKeyword< ParserKeywords::SGCWMIS >();
p.addKeyword< ParserKeywords::SGF32D >();
p.addKeyword< ParserKeywords::SGFN >();
p.addKeyword< ParserKeywords::SGL >();
p.addKeyword< ParserKeywords::SGLPC >();
p.addKeyword< ParserKeywords::SGOF >();
p.addKeyword< ParserKeywords::SGU >();
p.addKeyword< ParserKeywords::SGWFN >();
p.addKeyword< ParserKeywords::SHRATE >();
p.addKeyword< ParserKeywords::SIGMA >();
p.addKeyword< ParserKeywords::SIGMAGD >();
p.addKeyword< ParserKeywords::SIGMAGDV >();
p.addKeyword< ParserKeywords::SIGMATH >();
p.addKeyword< ParserKeywords::SIGMAV >();
p.addKeyword< ParserKeywords::SIMULATE >();
p.addKeyword< ParserKeywords::SKIP >();
p.addKeyword< ParserKeywords::SKIP100 >();
p.addKeyword< ParserKeywords::SKIP300 >();
p.addKeyword< ParserKeywords::SKIPREST >();
p.addKeyword< ParserKeywords::SKPRPOLY >();
p.addKeyword< ParserKeywords::SKPRWAT >();
p.addKeyword< ParserKeywords::SKRO >();
p.addKeyword< ParserKeywords::SKRORG >();
p.addKeyword< ParserKeywords::SKRORW >();
p.addKeyword< ParserKeywords::SKRW >();
p.addKeyword< ParserKeywords::SKRWR >();
p.addKeyword< ParserKeywords::SLAVES >();
p.addKeyword< ParserKeywords::SLGOF >();
p.addKeyword< ParserKeywords::SMRYDIMS >();
p.addKeyword< ParserKeywords::SMULTX >();
p.addKeyword< ParserKeywords::SMULTY >();
p.addKeyword< ParserKeywords::SMULTZ >();
p.addKeyword< ParserKeywords::SOCRS >();
p.addKeyword< ParserKeywords::SOF2 >();
p.addKeyword< ParserKeywords::SOF3 >();
p.addKeyword< ParserKeywords::SOF32D >();
p.addKeyword< ParserKeywords::SOGCR >();
p.addKeyword< ParserKeywords::SOIL >();
p.addKeyword< ParserKeywords::SOLUTION >();
p.addKeyword< ParserKeywords::SOLVCONC >();
p.addKeyword< ParserKeywords::SOLVDIMS >();
p.addKeyword< ParserKeywords::SOLVDIRS >();
p.addKeyword< ParserKeywords::SOLVENT >();
p.addKeyword< ParserKeywords::SOLVFRAC >();
p.addKeyword< ParserKeywords::SOLVNUM >();
p.addKeyword< ParserKeywords::SOMGAS >();
p.addKeyword< ParserKeywords::SOMWAT >();
p.addKeyword< ParserKeywords::SORWMIS >();
p.addKeyword< ParserKeywords::SOWCR >();
p.addKeyword< ParserKeywords::SPECGRID >();
p.addKeyword< ParserKeywords::SPECHEAT >();
p.addKeyword< ParserKeywords::SPECROCK >();
p.addKeyword< ParserKeywords::SPOLY >();
p.addKeyword< ParserKeywords::SPOLYMW >();
p.addKeyword< ParserKeywords::SSFN >();
p.addKeyword< ParserKeywords::SSGCR >();
p.addKeyword< ParserKeywords::SSGL >();
p.addKeyword< ParserKeywords::SSOGCR >();
p.addKeyword< ParserKeywords::SSOL >();
p.addKeyword< ParserKeywords::SSOWCR >();
p.addKeyword< ParserKeywords::SSWL >();
p.addKeyword< ParserKeywords::SSWU >();
p.addKeyword< ParserKeywords::START >();
p.addKeyword< ParserKeywords::STCOND >();
p.addKeyword< ParserKeywords::STONE >();
p.addKeyword< ParserKeywords::STONE1 >();
p.addKeyword< ParserKeywords::STONE1EX >();
p.addKeyword< ParserKeywords::STONE2 >();
p.addKeyword< ParserKeywords::SUMMARY >();
p.addKeyword< ParserKeywords::SUMTHIN >();
p.addKeyword< ParserKeywords::SURF >();
p.addKeyword< ParserKeywords::SURFACT >();
p.addKeyword< ParserKeywords::SURFACTW >();
p.addKeyword< ParserKeywords::SURFADDW >();
p.addKeyword< ParserKeywords::SURFADS >();
p.addKeyword< ParserKeywords::SURFESAL >();
p.addKeyword< ParserKeywords::SURFNUM >();
p.addKeyword< ParserKeywords::SURFOPTS >();
p.addKeyword< ParserKeywords::SURFROCK >();
p.addKeyword< ParserKeywords::SURFST >();
p.addKeyword< ParserKeywords::SURFSTES >();
p.addKeyword< ParserKeywords::SURFVISC >();
p.addKeyword< ParserKeywords::SURFWNUM >();
p.addKeyword< ParserKeywords::SWAT >();
p.addKeyword< ParserKeywords::SWATINIT >();
p.addKeyword< ParserKeywords::SWCR >();
p.addKeyword< ParserKeywords::SWFN >();
p.addKeyword< ParserKeywords::SWINGFAC >();
p.addKeyword< ParserKeywords::SWL >();
p.addKeyword< ParserKeywords::SWLPC >();
p.addKeyword< ParserKeywords::SWOF >();
p.addKeyword< ParserKeywords::SWU >();
p.addKeyword< ParserKeywords::TABDIMS >();
p.addKeyword< ParserKeywords::TBLK >();
p.addKeyword< ParserKeywords::TEMP >();
p.addKeyword< ParserKeywords::TEMPI >();
p.addKeyword< ParserKeywords::TEMPNODE >();
p.addKeyword< ParserKeywords::TEMPTVD >();
p.addKeyword< ParserKeywords::TEMPVD >();
p.addKeyword< ParserKeywords::THCGAS >();
p.addKeyword< ParserKeywords::THCOIL >();
p.addKeyword< ParserKeywords::THCONR >();
p.addKeyword< ParserKeywords::THCONSF >();
p.addKeyword< ParserKeywords::THCROCK >();
p.addKeyword< ParserKeywords::THCWATER >();
p.addKeyword< ParserKeywords::THERMAL >();
p.addKeyword< ParserKeywords::THERMEX1 >();
p.addKeyword< ParserKeywords::THPRES >();
p.addKeyword< ParserKeywords::THPRESFT >();
p.addKeyword< ParserKeywords::TIGHTEN >();
p.addKeyword< ParserKeywords::TIME >();
p.addKeyword< ParserKeywords::TITLE >();
p.addKeyword< ParserKeywords::TLMIXPAR >();
p.addKeyword< ParserKeywords::TLPMIXPA >();
p.addKeyword< ParserKeywords::TNUM >();
p.addKeyword< ParserKeywords::TOLCRIT >();
p.addKeyword< ParserKeywords::TOPS >();
p.addKeyword< ParserKeywords::TPAMEPS >();
p.addKeyword< ParserKeywords::TRACER >();
p.addKeyword< ParserKeywords::TRACERKM >();
p.addKeyword< ParserKeywords::TRACERKP >();
p.addKeyword< ParserKeywords::TRACERS >();
p.addKeyword< ParserKeywords::TRACITVD >();
p.addKeyword< ParserKeywords::TRACTVD >();
p.addKeyword< ParserKeywords::TRADS >();
p.addKeyword< ParserKeywords::TRANGL >();
p.addKeyword< ParserKeywords::TRANR >();
p.addKeyword< ParserKeywords::TRANTHT >();
p.addKeyword< ParserKeywords::TRANX >();
p.addKeyword< ParserKeywords::TRANY >();
p.addKeyword< ParserKeywords::TRANZ >();
p.addKeyword< ParserKeywords::TRDCY >();
p.addKeyword< ParserKeywords::TRDIF >();
p.addKeyword< ParserKeywords::TRDIS >();
p.addKeyword< ParserKeywords::TREF >();
p.addKeyword< ParserKeywords::TREFS >();
p.addKeyword< ParserKeywords::TRKPF >();
p.addKeyword< ParserKeywords::TRNHD >();
p.addKeyword< ParserKeywords::TRPLPORO >();
p.addKeyword< ParserKeywords::TRROCK >();
p.addKeyword< ParserKeywords::TSTEP >();
p.addKeyword< ParserKeywords::TUNING >();
p.addKeyword< ParserKeywords::TUNINGDP >();
p.addKeyword< ParserKeywords::TUNINGH >();
p.addKeyword< ParserKeywords::TUNINGL >();
p.addKeyword< ParserKeywords::TUNINGS >();
p.addKeyword< ParserKeywords::TVDP >();
p.addKeyword< ParserKeywords::TZONE >();
p.addKeyword< ParserKeywords::UDADIMS >();
p.addKeyword< ParserKeywords::UDQ >();
p.addKeyword< ParserKeywords::UDQDIMS >();
p.addKeyword< ParserKeywords::UDQPARAM >();
p.addKeyword< ParserKeywords::UNCODHMD >();
p.addKeyword< ParserKeywords::UNIFIN >();
p.addKeyword< ParserKeywords::UNIFOUT >();
p.addKeyword< ParserKeywords::UNIFOUTS >();
p.addKeyword< ParserKeywords::UNIFSAVE >();
p.addKeyword< ParserKeywords::USECUPL >();
p.addKeyword< ParserKeywords::USEFLUX >();
p.addKeyword< ParserKeywords::USENOFLO >();
p.addKeyword< ParserKeywords::VAPOIL >();
p.addKeyword< ParserKeywords::VAPPARS >();
p.addKeyword< ParserKeywords::VDFLOW >();
p.addKeyword< ParserKeywords::VDFLOWR >();
p.addKeyword< ParserKeywords::VE >();
p.addKeyword< ParserKeywords::VEDEBUG >();
p.addKeyword< ParserKeywords::VEFIN >();
p.addKeyword< ParserKeywords::VEFRAC >();
p.addKeyword< ParserKeywords::VEFRACP >();
p.addKeyword< ParserKeywords::VEFRACPV >();
p.addKeyword< ParserKeywords::VEFRACV >();
p.addKeyword< ParserKeywords::VFPCHK >();
p.addKeyword< ParserKeywords::VFPIDIMS >();
p.addKeyword< ParserKeywords::VFPINJ >();
p.addKeyword< ParserKeywords::VFPPDIMS >();
p.addKeyword< ParserKeywords::VFPPROD >();
p.addKeyword< ParserKeywords::VFPTABL >();
p.addKeyword< ParserKeywords::VISAGE >();
p.addKeyword< ParserKeywords::VISCD >();
p.addKeyword< ParserKeywords::VISCREF >();
p.addKeyword< ParserKeywords::VISDATES >();
p.addKeyword< ParserKeywords::VISOPTS >();
p.addKeyword< ParserKeywords::WAGHYSTR >();
p.addKeyword< ParserKeywords::WAITBAL >();
p.addKeyword< ParserKeywords::WALKALIN >();
p.addKeyword< ParserKeywords::WALQCALC >();
p.addKeyword< ParserKeywords::WAPI >();
p.addKeyword< ParserKeywords::WARN >();
p.addKeyword< ParserKeywords::WATDENT >();
p.addKeyword< ParserKeywords::WATER >();
p.addKeyword< ParserKeywords::WATVISCT >();
p.addKeyword< ParserKeywords::WBHGLR >();
p.addKeyword< ParserKeywords::WBOREVOL >();
p.addKeyword< ParserKeywords::WCALCVAL >();
p.addKeyword< ParserKeywords::WCONHIST >();
p.addKeyword< ParserKeywords::WCONINJ >();
p.addKeyword< ParserKeywords::WCONINJE >();
p.addKeyword< ParserKeywords::WCONINJH >();
p.addKeyword< ParserKeywords::WCONINJP >();
p.addKeyword< ParserKeywords::WCONPROD >();
p.addKeyword< ParserKeywords::WCUTBACK >();
p.addKeyword< ParserKeywords::WCUTBACT >();
p.addKeyword< ParserKeywords::WCYCLE >();
p.addKeyword< ParserKeywords::WDFAC >();
p.addKeyword< ParserKeywords::WDFACCOR >();
p.addKeyword< ParserKeywords::WDRILPRI >();
p.addKeyword< ParserKeywords::WDRILRES >();
p.addKeyword< ParserKeywords::WDRILTIM >();
p.addKeyword< ParserKeywords::WECON >();
p.addKeyword< ParserKeywords::WECONINJ >();
p.addKeyword< ParserKeywords::WECONT >();
p.addKeyword< ParserKeywords::WEFAC >();
p.addKeyword< ParserKeywords::WELCNTL >();
p.addKeyword< ParserKeywords::WELDEBUG >();
p.addKeyword< ParserKeywords::WELDRAW >();
p.addKeyword< ParserKeywords::WELEVNT >();
p.addKeyword< ParserKeywords::WELLDIMS >();
p.addKeyword< ParserKeywords::WELL_COMPLETION_PROBE >();
p.addKeyword< ParserKeywords::WELL_PROBE >();
p.addKeyword< ParserKeywords::WELOPEN >();
p.addKeyword< ParserKeywords::WELOPENL >();
p.addKeyword< ParserKeywords::WELPI >();
p.addKeyword< ParserKeywords::WELPRI >();
p.addKeyword< ParserKeywords::WELSEGS >();
p.addKeyword< ParserKeywords::WELSOMIN >();
p.addKeyword< ParserKeywords::WELSPECL >();
p.addKeyword< ParserKeywords::WELSPECS >();
p.addKeyword< ParserKeywords::WELTARG >();
p.addKeyword< ParserKeywords::WFOAM >();
p.addKeyword< ParserKeywords::WFRICSEG >();
p.addKeyword< ParserKeywords::WFRICSGL >();
p.addKeyword< ParserKeywords::WFRICTN >();
p.addKeyword< ParserKeywords::WFRICTNL >();
p.addKeyword< ParserKeywords::WGASPROD >();
p.addKeyword< ParserKeywords::WGORPEN >();
p.addKeyword< ParserKeywords::WGRUPCON >();
p.addKeyword< ParserKeywords::WH2NUM >();
p.addKeyword< ParserKeywords::WH3NUM >();
p.addKeyword< ParserKeywords::WHEDREFD >();
p.addKeyword< ParserKeywords::WHISTCTL >();
p.addKeyword< ParserKeywords::WHTEMP >();
p.addKeyword< ParserKeywords::WINJMULT >();
p.addKeyword< ParserKeywords::WINJTEMP >();
p.addKeyword< ParserKeywords::WLIFT >();
p.addKeyword< ParserKeywords::WLIFTOPT >();
p.addKeyword< ParserKeywords::WLIMTOL >();
p.addKeyword< ParserKeywords::WLIST >();
p.addKeyword< ParserKeywords::WLISTARG >();
p.addKeyword< ParserKeywords::WLISTNAM >();
p.addKeyword< ParserKeywords::WNETCTRL >();
p.addKeyword< ParserKeywords::WNETDP >();
p.addKeyword< ParserKeywords::WORKLIM >();
p.addKeyword< ParserKeywords::WORKTHP >();
p.addKeyword< ParserKeywords::WPAVE >();
p.addKeyword< ParserKeywords::WPAVEDEP >();
p.addKeyword< ParserKeywords::WPIMULT >();
p.addKeyword< ParserKeywords::WPIMULTL >();
p.addKeyword< ParserKeywords::WPITAB >();
p.addKeyword< ParserKeywords::WPLUG >();
p.addKeyword< ParserKeywords::WPMITAB >();
p.addKeyword< ParserKeywords::WPOLYMER >();
p.addKeyword< ParserKeywords::WPOLYRED >();
p.addKeyword< ParserKeywords::WPOTCALC >();
p.addKeyword< ParserKeywords::WREGROUP >();
p.addKeyword< ParserKeywords::WRFT >();
p.addKeyword< ParserKeywords::WRFTPLT >();
p.addKeyword< ParserKeywords::WSALT >();
p.addKeyword< ParserKeywords::WSCCLEAN >();
p.addKeyword< ParserKeywords::WSCCLENL >();
p.addKeyword< ParserKeywords::WSCTAB >();
p.addKeyword< ParserKeywords::WSEGAICD >();
p.addKeyword< ParserKeywords::WSEGDFIN >();
p.addKeyword< ParserKeywords::WSEGDFMD >();
p.addKeyword< ParserKeywords::WSEGDFPA >();
p.addKeyword< ParserKeywords::WSEGDIMS >();
p.addKeyword< ParserKeywords::WSEGEXSS >();
p.addKeyword< ParserKeywords::WSEGFLIM >();
p.addKeyword< ParserKeywords::WSEGFMOD >();
p.addKeyword< ParserKeywords::WSEGINIT >();
p.addKeyword< ParserKeywords::WSEGITER >();
p.addKeyword< ParserKeywords::WSEGLABY >();
p.addKeyword< ParserKeywords::WSEGLINK >();
p.addKeyword< ParserKeywords::WSEGMULT >();
p.addKeyword< ParserKeywords::WSEGPROP >();
p.addKeyword< ParserKeywords::WSEGPULL >();
p.addKeyword< ParserKeywords::WSEGSEP >();
p.addKeyword< ParserKeywords::WSEGSICD >();
p.addKeyword< ParserKeywords::WSEGSOLV >();
p.addKeyword< ParserKeywords::WSEGTABL >();
p.addKeyword< ParserKeywords::WSEGVALV >();
p.addKeyword< ParserKeywords::WSKPTAB >();
p.addKeyword< ParserKeywords::WSOLVENT >();
p.addKeyword< ParserKeywords::WTADD >();
p.addKeyword< ParserKeywords::WTEMP >();
p.addKeyword< ParserKeywords::WTEMPQ >();
p.addKeyword< ParserKeywords::WTEST >();
p.addKeyword< ParserKeywords::WTHPMAX >();
p.addKeyword< ParserKeywords::WTMULT >();
p.addKeyword< ParserKeywords::WTRACER >();
p.addKeyword< ParserKeywords::WVFPDP >();
p.addKeyword< ParserKeywords::WVFPEXP >();
p.addKeyword< ParserKeywords::WWPAVE >();
p.addKeyword< ParserKeywords::ZCORN >();
p.addKeyword< ParserKeywords::ZFACT1 >();
p.addKeyword< ParserKeywords::ZFACT1S >();
p.addKeyword< ParserKeywords::ZFACTOR >();
p.addKeyword< ParserKeywords::ZFACTORS >();
p.addKeyword< ParserKeywords::ZIPP2OFF >();
p.addKeyword< ParserKeywords::ZIPPY2 >();
}
ACTDIMS::ACTDIMS( ) : ParserKeyword("ACTDIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("ACTDIMS");
  {
     ParserRecord record;
     {
        ParserItem item("MAX_ACTION", ParserItem::itype::INT);
        item.setDefault( 2 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_ACTION_LINES", ParserItem::itype::INT);
        item.setDefault( 50 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_ACTION_LINE_CHARACTERS", ParserItem::itype::INT);
        item.setDefault( 80 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_ACTION_COND", ParserItem::itype::INT);
        item.setDefault( 3 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ACTDIMS::keywordName = "ACTDIMS";
const std::string ACTDIMS::MAX_ACTION::itemName = "MAX_ACTION";
const int ACTDIMS::MAX_ACTION::defaultValue = 2;
const std::string ACTDIMS::MAX_ACTION_LINES::itemName = "MAX_ACTION_LINES";
const int ACTDIMS::MAX_ACTION_LINES::defaultValue = 50;
const std::string ACTDIMS::MAX_ACTION_LINE_CHARACTERS::itemName = "MAX_ACTION_LINE_CHARACTERS";
const int ACTDIMS::MAX_ACTION_LINE_CHARACTERS::defaultValue = 80;
const std::string ACTDIMS::MAX_ACTION_COND::itemName = "MAX_ACTION_COND";
const int ACTDIMS::MAX_ACTION_COND::defaultValue = 3;


ACTION::ACTION( ) : ParserKeyword("ACTION")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("ACTION");
  {
     ParserRecord record;
     {
        ParserItem item("ACTION_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("QUANTITY", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("OPERATOR", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TRIGGER_VALUE", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ACTION::keywordName = "ACTION";
const std::string ACTION::ACTION_NAME::itemName = "ACTION_NAME";
const std::string ACTION::QUANTITY::itemName = "QUANTITY";
const std::string ACTION::OPERATOR::itemName = "OPERATOR";
const std::string ACTION::TRIGGER_VALUE::itemName = "TRIGGER_VALUE";


ACTIONG::ACTIONG( ) : ParserKeyword("ACTIONG")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("ACTIONG");
  {
     ParserRecord record;
     {
        ParserItem item("ACTION", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("GROUP_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("QUANTITY", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("OPERATOR", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TRIGGER_VALUE", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("REPETITIONS", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("INCREMENT", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ACTIONG::keywordName = "ACTIONG";
const std::string ACTIONG::ACTION::itemName = "ACTION";
const std::string ACTIONG::GROUP_NAME::itemName = "GROUP_NAME";
const std::string ACTIONG::QUANTITY::itemName = "QUANTITY";
const std::string ACTIONG::OPERATOR::itemName = "OPERATOR";
const std::string ACTIONG::TRIGGER_VALUE::itemName = "TRIGGER_VALUE";
const std::string ACTIONG::REPETITIONS::itemName = "REPETITIONS";
const int ACTIONG::REPETITIONS::defaultValue = 1;
const std::string ACTIONG::INCREMENT::itemName = "INCREMENT";
const double ACTIONG::INCREMENT::defaultValue = 0.000000;


ACTIONR::ACTIONR( ) : ParserKeyword("ACTIONR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("ACTIONR");
  {
     ParserRecord record;
     {
        ParserItem item("ACTION", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("FLUID_IN_PLACE_NR", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("FLUID_IN_PLACE_REG_FAM", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("QUANTITY", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("OPERATOR", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TRIGGER_VALUE", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("REPETITIONS", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("INCREMENT", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ACTIONR::keywordName = "ACTIONR";
const std::string ACTIONR::ACTION::itemName = "ACTION";
const std::string ACTIONR::FLUID_IN_PLACE_NR::itemName = "FLUID_IN_PLACE_NR";
const std::string ACTIONR::FLUID_IN_PLACE_REG_FAM::itemName = "FLUID_IN_PLACE_REG_FAM";
const std::string ACTIONR::QUANTITY::itemName = "QUANTITY";
const std::string ACTIONR::OPERATOR::itemName = "OPERATOR";
const std::string ACTIONR::TRIGGER_VALUE::itemName = "TRIGGER_VALUE";
const std::string ACTIONR::REPETITIONS::itemName = "REPETITIONS";
const int ACTIONR::REPETITIONS::defaultValue = 1;
const std::string ACTIONR::INCREMENT::itemName = "INCREMENT";
const double ACTIONR::INCREMENT::defaultValue = 0.000000;


ACTIONW::ACTIONW( ) : ParserKeyword("ACTIONW")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("ACTIONW");
  {
     ParserRecord record;
     {
        ParserItem item("ACTION", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("WELL_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("QUANTITY", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("OPERATOR", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TRIGGER_VALUE", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("REPETITIONS", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("INCREMENT", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ACTIONW::keywordName = "ACTIONW";
const std::string ACTIONW::ACTION::itemName = "ACTION";
const std::string ACTIONW::WELL_NAME::itemName = "WELL_NAME";
const std::string ACTIONW::QUANTITY::itemName = "QUANTITY";
const std::string ACTIONW::OPERATOR::itemName = "OPERATOR";
const std::string ACTIONW::TRIGGER_VALUE::itemName = "TRIGGER_VALUE";
const std::string ACTIONW::REPETITIONS::itemName = "REPETITIONS";
const int ACTIONW::REPETITIONS::defaultValue = 1;
const std::string ACTIONW::INCREMENT::itemName = "INCREMENT";
const double ACTIONW::INCREMENT::defaultValue = 0.000000;


ACTIONX::ACTIONX( ) : ParserKeyword("ACTIONX")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("ACTIONX");
  {
     ParserRecord record;
     {
        ParserItem item("NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("NUM", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("MIN_WAIT", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("CONDITION", ParserItem::itype::RAW_STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ACTIONX::keywordName = "ACTIONX";
const std::string ACTIONX::NAME::itemName = "NAME";
const std::string ACTIONX::NUM::itemName = "NUM";
const int ACTIONX::NUM::defaultValue = 1;
const std::string ACTIONX::MIN_WAIT::itemName = "MIN_WAIT";
const double ACTIONX::MIN_WAIT::defaultValue = 0.000000;
const std::string ACTIONX::CONDITION::itemName = "CONDITION";


ACTNUM::ACTNUM( ) : ParserKeyword("ACTNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("ACTNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string ACTNUM::keywordName = "ACTNUM";
const std::string ACTNUM::data::itemName = "data";


ACTPARAM::ACTPARAM( ) : ParserKeyword("ACTPARAM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("ACTPARAM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(0.000100) );
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string ACTPARAM::keywordName = "ACTPARAM";
const std::string ACTPARAM::data::itemName = "data";
const double ACTPARAM::data::defaultValue = 0.000100;


ADD::ADD( ) : ParserKeyword("ADD")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("ADD");
  {
     ParserRecord record;
     {
        ParserItem item("field", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("shift", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("I1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("I2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ADD::keywordName = "ADD";
const std::string ADD::field::itemName = "field";
const std::string ADD::shift::itemName = "shift";
const std::string ADD::I1::itemName = "I1";
const std::string ADD::I2::itemName = "I2";
const std::string ADD::J1::itemName = "J1";
const std::string ADD::J2::itemName = "J2";
const std::string ADD::K1::itemName = "K1";
const std::string ADD::K2::itemName = "K2";


ADDREG::ADDREG( ) : ParserKeyword("ADDREG")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("ADDREG");
  {
     ParserRecord record;
     {
        ParserItem item("ARRAY", ParserItem::itype::STRING);
        item.setDescription("The 3D array we will update");
        record.addItem(item);
     }
     {
        ParserItem item("SHIFT", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.setDescription("The value we will multiply with");
        record.addItem(item);
     }
     {
        ParserItem item("REGION_NUMBER", ParserItem::itype::INT);
        item.setDescription("The region number we are interested in");
        record.addItem(item);
     }
     {
        ParserItem item("REGION_NAME", ParserItem::itype::STRING);
        item.setDefault( std::string("M") );
        item.setDescription("The name of the region we are interested in");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ADDREG::keywordName = "ADDREG";
const std::string ADDREG::ARRAY::itemName = "ARRAY";
const std::string ADDREG::SHIFT::itemName = "SHIFT";
const double ADDREG::SHIFT::defaultValue = 0.000000;
const std::string ADDREG::REGION_NUMBER::itemName = "REGION_NUMBER";
const std::string ADDREG::REGION_NAME::itemName = "REGION_NAME";
const std::string ADDREG::REGION_NAME::defaultValue = "M";


ADDZCORN::ADDZCORN( ) : ParserKeyword("ADDZCORN")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("ADDZCORN");
  {
     ParserRecord record;
     {
        ParserItem item("ADDED_VALUE", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("IX1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IX2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JY1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JY2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("KZ1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("KZ2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IX1A", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IX2A", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JY1A", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JY2A", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("ACTION", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ADDZCORN::keywordName = "ADDZCORN";
const std::string ADDZCORN::ADDED_VALUE::itemName = "ADDED_VALUE";
const std::string ADDZCORN::IX1::itemName = "IX1";
const std::string ADDZCORN::IX2::itemName = "IX2";
const std::string ADDZCORN::JY1::itemName = "JY1";
const std::string ADDZCORN::JY2::itemName = "JY2";
const std::string ADDZCORN::KZ1::itemName = "KZ1";
const std::string ADDZCORN::KZ2::itemName = "KZ2";
const std::string ADDZCORN::IX1A::itemName = "IX1A";
const std::string ADDZCORN::IX2A::itemName = "IX2A";
const std::string ADDZCORN::JY1A::itemName = "JY1A";
const std::string ADDZCORN::JY2A::itemName = "JY2A";
const std::string ADDZCORN::ACTION::itemName = "ACTION";


ADSALNOD::ADSALNOD( ) : ParserKeyword("ADSALNOD")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ADSALNOD");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Density");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ADSALNOD::keywordName = "ADSALNOD";
const std::string ADSALNOD::DATA::itemName = "DATA";


AITS::AITS( ) : ParserKeyword("AITS")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("AITS");
}
const std::string AITS::keywordName = "AITS";


AITSOFF::AITSOFF( ) : ParserKeyword("AITSOFF")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("AITSOFF");
}
const std::string AITSOFF::keywordName = "AITSOFF";


ALKADS::ALKADS( ) : ParserKeyword("ALKADS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ALKADS");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Density");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ALKADS::keywordName = "ALKADS";
const std::string ALKADS::DATA::itemName = "DATA";


ALKALINE::ALKALINE( ) : ParserKeyword("ALKALINE")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("ALKALINE");
}
const std::string ALKALINE::keywordName = "ALKALINE";


ALKROCK::ALKROCK( ) : ParserKeyword("ALKROCK")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ALKROCK");
  {
     ParserRecord record;
     {
        ParserItem item("ROCK_ADS_INDEX", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ALKROCK::keywordName = "ALKROCK";
const std::string ALKROCK::ROCK_ADS_INDEX::itemName = "ROCK_ADS_INDEX";


ALL::ALL( ) : ParserKeyword("ALL")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("ALL");
}
const std::string ALL::keywordName = "ALL";


ALPOLADS::ALPOLADS( ) : ParserKeyword("ALPOLADS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ALPOLADS");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Density");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ALPOLADS::keywordName = "ALPOLADS";
const std::string ALPOLADS::DATA::itemName = "DATA";


ALSURFAD::ALSURFAD( ) : ParserKeyword("ALSURFAD")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ALSURFAD");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Density");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ALSURFAD::keywordName = "ALSURFAD";
const std::string ALSURFAD::DATA::itemName = "DATA";


ALSURFST::ALSURFST( ) : ParserKeyword("ALSURFST")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ALSURFST");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Density");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ALSURFST::keywordName = "ALSURFST";
const std::string ALSURFST::DATA::itemName = "DATA";


API::API( ) : ParserKeyword("API")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("API");
}
const std::string API::keywordName = "API";


APIGROUP::APIGROUP( ) : ParserKeyword("APIGROUP")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("APIGROUP");
  {
     ParserRecord record;
     {
        ParserItem item("MAX_OIL_PVT_GROUP_COUNT", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string APIGROUP::keywordName = "APIGROUP";
const std::string APIGROUP::MAX_OIL_PVT_GROUP_COUNT::itemName = "MAX_OIL_PVT_GROUP_COUNT";
const int APIGROUP::MAX_OIL_PVT_GROUP_COUNT::defaultValue = 1;


AQANCONL::AQANCONL( ) : ParserKeyword("AQANCONL")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("AQANCONL");
  {
     ParserRecord record;
     {
        ParserItem item("AQUIFER_ID", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("LOWER_I", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("UPPER_I", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("LOWER_J", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("UPPER_J", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("LOWER_K", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("UPPER_K", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("FACE_INDX", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("AQUIFER_INFLUX_COEFF", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("AQUIFER_INFLUX_MULT", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("ALLOW", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string AQANCONL::keywordName = "AQANCONL";
const std::string AQANCONL::AQUIFER_ID::itemName = "AQUIFER_ID";
const std::string AQANCONL::NAME::itemName = "NAME";
const std::string AQANCONL::LOWER_I::itemName = "LOWER_I";
const std::string AQANCONL::UPPER_I::itemName = "UPPER_I";
const std::string AQANCONL::LOWER_J::itemName = "LOWER_J";
const std::string AQANCONL::UPPER_J::itemName = "UPPER_J";
const std::string AQANCONL::LOWER_K::itemName = "LOWER_K";
const std::string AQANCONL::UPPER_K::itemName = "UPPER_K";
const std::string AQANCONL::FACE_INDX::itemName = "FACE_INDX";
const std::string AQANCONL::AQUIFER_INFLUX_COEFF::itemName = "AQUIFER_INFLUX_COEFF";
const std::string AQANCONL::AQUIFER_INFLUX_MULT::itemName = "AQUIFER_INFLUX_MULT";
const double AQANCONL::AQUIFER_INFLUX_MULT::defaultValue = 1.000000;
const std::string AQANCONL::ALLOW::itemName = "ALLOW";


AQANNC::AQANNC( ) : ParserKeyword("AQANNC")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("AQANNC");
  {
     ParserRecord record;
     {
        ParserItem item("AQUIFER_NUMBER", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IX", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IY", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IZ", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("AREA", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Length*Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string AQANNC::keywordName = "AQANNC";
const std::string AQANNC::AQUIFER_NUMBER::itemName = "AQUIFER_NUMBER";
const std::string AQANNC::IX::itemName = "IX";
const std::string AQANNC::IY::itemName = "IY";
const std::string AQANNC::IZ::itemName = "IZ";
const std::string AQANNC::AREA::itemName = "AREA";
const double AQANNC::AREA::defaultValue = 0.000000;


AQANTRC::AQANTRC( ) : ParserKeyword("AQANTRC")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("AQANTRC");
  {
     ParserRecord record;
     {
        ParserItem item("AQUIFER_ID", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("TRACER", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("VALUE", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string AQANTRC::keywordName = "AQANTRC";
const std::string AQANTRC::AQUIFER_ID::itemName = "AQUIFER_ID";
const std::string AQANTRC::TRACER::itemName = "TRACER";
const std::string AQANTRC::VALUE::itemName = "VALUE";


AQUANCON::AQUANCON( ) : ParserKeyword("AQUANCON")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("AQUANCON");
  {
     ParserRecord record;
     {
        ParserItem item("AQUIFER_ID", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("I1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("I2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("FACE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("INFLUX_COEFF", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("INFLUX_MULT", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("CONNECT_ADJOINING_ACTIVE_CELL", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string AQUANCON::keywordName = "AQUANCON";
const std::string AQUANCON::AQUIFER_ID::itemName = "AQUIFER_ID";
const std::string AQUANCON::I1::itemName = "I1";
const std::string AQUANCON::I2::itemName = "I2";
const std::string AQUANCON::J1::itemName = "J1";
const std::string AQUANCON::J2::itemName = "J2";
const std::string AQUANCON::K1::itemName = "K1";
const std::string AQUANCON::K2::itemName = "K2";
const std::string AQUANCON::FACE::itemName = "FACE";
const std::string AQUANCON::INFLUX_COEFF::itemName = "INFLUX_COEFF";
const std::string AQUANCON::INFLUX_MULT::itemName = "INFLUX_MULT";
const double AQUANCON::INFLUX_MULT::defaultValue = 1.000000;
const std::string AQUANCON::CONNECT_ADJOINING_ACTIVE_CELL::itemName = "CONNECT_ADJOINING_ACTIVE_CELL";
const std::string AQUANCON::CONNECT_ADJOINING_ACTIVE_CELL::defaultValue = "NO";


AQUCON::AQUCON( ) : ParserKeyword("AQUCON")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("AQUCON");
  {
     ParserRecord record;
     {
        ParserItem item("ID", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("I1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("I2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("CONNECT_FACE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TRANS_MULT", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("TRANS_OPTION", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("ALLOW_INTERNAL_CELLS", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("VEFRAC", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("VEFRACP", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string AQUCON::keywordName = "AQUCON";
const std::string AQUCON::ID::itemName = "ID";
const std::string AQUCON::I1::itemName = "I1";
const std::string AQUCON::I2::itemName = "I2";
const std::string AQUCON::J1::itemName = "J1";
const std::string AQUCON::J2::itemName = "J2";
const std::string AQUCON::K1::itemName = "K1";
const std::string AQUCON::K2::itemName = "K2";
const std::string AQUCON::CONNECT_FACE::itemName = "CONNECT_FACE";
const std::string AQUCON::TRANS_MULT::itemName = "TRANS_MULT";
const std::string AQUCON::TRANS_OPTION::itemName = "TRANS_OPTION";
const std::string AQUCON::ALLOW_INTERNAL_CELLS::itemName = "ALLOW_INTERNAL_CELLS";
const std::string AQUCON::VEFRAC::itemName = "VEFRAC";
const std::string AQUCON::VEFRACP::itemName = "VEFRACP";


AQUCT::AQUCT( ) : ParserKeyword("AQUCT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("AQUCT");
  {
     ParserRecord record;
     {
        ParserItem item("AQUIFER_ID", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("DAT_DEPTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("P_INI", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("PERM_AQ", ParserItem::itype::DOUBLE);
        item.push_backDimension("Permeability");
        record.addItem(item);
     }
     {
        ParserItem item("PORO_AQ", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("C_T", ParserItem::itype::DOUBLE);
        item.push_backDimension("1/Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("RAD", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("THICKNESS_AQ", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("INFLUENCE_ANGLE", ParserItem::itype::DOUBLE);
        item.setDefault( double(360.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("TABLE_NUM_WATER_PRESS", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("TABLE_NUM_INFLUENCE_FN", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("INI_SALT", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("TEMP_AQUIFER", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string AQUCT::keywordName = "AQUCT";
const std::string AQUCT::AQUIFER_ID::itemName = "AQUIFER_ID";
const std::string AQUCT::DAT_DEPTH::itemName = "DAT_DEPTH";
const std::string AQUCT::P_INI::itemName = "P_INI";
const std::string AQUCT::PERM_AQ::itemName = "PERM_AQ";
const std::string AQUCT::PORO_AQ::itemName = "PORO_AQ";
const double AQUCT::PORO_AQ::defaultValue = 1.000000;
const std::string AQUCT::C_T::itemName = "C_T";
const std::string AQUCT::RAD::itemName = "RAD";
const std::string AQUCT::THICKNESS_AQ::itemName = "THICKNESS_AQ";
const std::string AQUCT::INFLUENCE_ANGLE::itemName = "INFLUENCE_ANGLE";
const double AQUCT::INFLUENCE_ANGLE::defaultValue = 360.000000;
const std::string AQUCT::TABLE_NUM_WATER_PRESS::itemName = "TABLE_NUM_WATER_PRESS";
const int AQUCT::TABLE_NUM_WATER_PRESS::defaultValue = 1;
const std::string AQUCT::TABLE_NUM_INFLUENCE_FN::itemName = "TABLE_NUM_INFLUENCE_FN";
const int AQUCT::TABLE_NUM_INFLUENCE_FN::defaultValue = 1;
const std::string AQUCT::INI_SALT::itemName = "INI_SALT";
const double AQUCT::INI_SALT::defaultValue = 0.000000;
const std::string AQUCT::TEMP_AQUIFER::itemName = "TEMP_AQUIFER";


AQUCWFAC::AQUCWFAC( ) : ParserKeyword("AQUCWFAC")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("AQUCWFAC");
  {
     ParserRecord record;
     {
        ParserItem item("ADD_TO_DEPTH", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("MULTIPLY", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string AQUCWFAC::keywordName = "AQUCWFAC";
const std::string AQUCWFAC::ADD_TO_DEPTH::itemName = "ADD_TO_DEPTH";
const double AQUCWFAC::ADD_TO_DEPTH::defaultValue = 0.000000;
const std::string AQUCWFAC::MULTIPLY::itemName = "MULTIPLY";
const double AQUCWFAC::MULTIPLY::defaultValue = 1.000000;


AQUDIMS::AQUDIMS( ) : ParserKeyword("AQUDIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("AQUDIMS");
  {
     ParserRecord record;
     {
        ParserItem item("MXNAQN", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("MXNAQC", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NIFTBL", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NRIFTB", ParserItem::itype::INT);
        item.setDefault( 36 );
        record.addItem(item);
     }
     {
        ParserItem item("NANAQU", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NCAMAX", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("MXNALI", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MXAAQL", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string AQUDIMS::keywordName = "AQUDIMS";
const std::string AQUDIMS::MXNAQN::itemName = "MXNAQN";
const int AQUDIMS::MXNAQN::defaultValue = 1;
const std::string AQUDIMS::MXNAQC::itemName = "MXNAQC";
const int AQUDIMS::MXNAQC::defaultValue = 1;
const std::string AQUDIMS::NIFTBL::itemName = "NIFTBL";
const int AQUDIMS::NIFTBL::defaultValue = 1;
const std::string AQUDIMS::NRIFTB::itemName = "NRIFTB";
const int AQUDIMS::NRIFTB::defaultValue = 36;
const std::string AQUDIMS::NANAQU::itemName = "NANAQU";
const int AQUDIMS::NANAQU::defaultValue = 1;
const std::string AQUDIMS::NCAMAX::itemName = "NCAMAX";
const int AQUDIMS::NCAMAX::defaultValue = 1;
const std::string AQUDIMS::MXNALI::itemName = "MXNALI";
const int AQUDIMS::MXNALI::defaultValue = 0;
const std::string AQUDIMS::MXAAQL::itemName = "MXAAQL";
const int AQUDIMS::MXAAQL::defaultValue = 0;


AQUFET::AQUFET( ) : ParserKeyword("AQUFET")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("AQUDIMS","NANAQU",0);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("AQUFET");
  {
     ParserRecord record;
     {
        ParserItem item("DAT_DEPTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("P0", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("V0", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("C_T", ParserItem::itype::DOUBLE);
        item.push_backDimension("1/Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("PI", ParserItem::itype::DOUBLE);
        item.push_backDimension("ReservoirVolume/Pressure*Time");
        record.addItem(item);
     }
     {
        ParserItem item("TABLE_NUM_WATER_PRESS", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("LOWER_I", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("UPPER_I", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("LOWER_J", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("UPPER_J", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("LOWER_K", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("UPPER_K", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("FACE_INDX", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SC_0", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Density");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string AQUFET::keywordName = "AQUFET";
const std::string AQUFET::DAT_DEPTH::itemName = "DAT_DEPTH";
const std::string AQUFET::P0::itemName = "P0";
const std::string AQUFET::V0::itemName = "V0";
const std::string AQUFET::C_T::itemName = "C_T";
const std::string AQUFET::PI::itemName = "PI";
const std::string AQUFET::TABLE_NUM_WATER_PRESS::itemName = "TABLE_NUM_WATER_PRESS";
const std::string AQUFET::LOWER_I::itemName = "LOWER_I";
const std::string AQUFET::UPPER_I::itemName = "UPPER_I";
const std::string AQUFET::LOWER_J::itemName = "LOWER_J";
const std::string AQUFET::UPPER_J::itemName = "UPPER_J";
const std::string AQUFET::LOWER_K::itemName = "LOWER_K";
const std::string AQUFET::UPPER_K::itemName = "UPPER_K";
const std::string AQUFET::FACE_INDX::itemName = "FACE_INDX";
const std::string AQUFET::SC_0::itemName = "SC_0";
const double AQUFET::SC_0::defaultValue = 0.000000;


AQUFETP::AQUFETP( ) : ParserKeyword("AQUFETP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("AQUFETP");
  {
     ParserRecord record;
     {
        ParserItem item("AQUIFER_ID", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("DAT_DEPTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("P0", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("V0", ParserItem::itype::DOUBLE);
        item.push_backDimension("LiquidSurfaceVolume");
        record.addItem(item);
     }
     {
        ParserItem item("C_T", ParserItem::itype::DOUBLE);
        item.push_backDimension("1/Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("PI", ParserItem::itype::DOUBLE);
        item.push_backDimension("LiquidSurfaceVolume/Pressure*Time");
        record.addItem(item);
     }
     {
        ParserItem item("TABLE_NUM_WATER_PRESS", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("SALINITY", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Salinity");
        record.addItem(item);
     }
     {
        ParserItem item("TEMP", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string AQUFETP::keywordName = "AQUFETP";
const std::string AQUFETP::AQUIFER_ID::itemName = "AQUIFER_ID";
const std::string AQUFETP::DAT_DEPTH::itemName = "DAT_DEPTH";
const std::string AQUFETP::P0::itemName = "P0";
const std::string AQUFETP::V0::itemName = "V0";
const std::string AQUFETP::C_T::itemName = "C_T";
const std::string AQUFETP::PI::itemName = "PI";
const std::string AQUFETP::TABLE_NUM_WATER_PRESS::itemName = "TABLE_NUM_WATER_PRESS";
const int AQUFETP::TABLE_NUM_WATER_PRESS::defaultValue = 1;
const std::string AQUFETP::SALINITY::itemName = "SALINITY";
const double AQUFETP::SALINITY::defaultValue = 0.000000;
const std::string AQUFETP::TEMP::itemName = "TEMP";


AQUFLUX::AQUFLUX( ) : ParserKeyword("AQUFLUX")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("AQUDIMS","NANAQU",0);
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("AQUFLUX");
  {
     ParserRecord record;
     {
        ParserItem item("AQUIFER_ID", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("DAT_DEPTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("SC_0", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Density");
        record.addItem(item);
     }
     {
        ParserItem item("TEMP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Temperature");
        record.addItem(item);
     }
     {
        ParserItem item("PRESSURE", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string AQUFLUX::keywordName = "AQUFLUX";
const std::string AQUFLUX::AQUIFER_ID::itemName = "AQUIFER_ID";
const std::string AQUFLUX::DAT_DEPTH::itemName = "DAT_DEPTH";
const std::string AQUFLUX::SC_0::itemName = "SC_0";
const double AQUFLUX::SC_0::defaultValue = 0.000000;
const std::string AQUFLUX::TEMP::itemName = "TEMP";
const std::string AQUFLUX::PRESSURE::itemName = "PRESSURE";


AQUIFER_PROBE_ANALYTIC::AQUIFER_PROBE_ANALYTIC( ) : ParserKeyword("AQUIFER_PROBE_ANALYTIC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("AAQP");
  addDeckName("AAQPD");
  addDeckName("AAQR");
  addDeckName("AAQRG");
  addDeckName("AAQT");
  addDeckName("AAQTD");
  addDeckName("AAQTG");
  setMatchRegex("AA.+");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string AQUIFER_PROBE_ANALYTIC::keywordName = "AQUIFER_PROBE_ANALYTIC";
const std::string AQUIFER_PROBE_ANALYTIC::data::itemName = "data";


AQUIFER_PROBE_NUMERIC::AQUIFER_PROBE_NUMERIC( ) : ParserKeyword("AQUIFER_PROBE_NUMERIC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("ANQP");
  addDeckName("ANQR");
  addDeckName("ANQT");
  setMatchRegex("ANQ.");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string AQUIFER_PROBE_NUMERIC::keywordName = "AQUIFER_PROBE_NUMERIC";
const std::string AQUIFER_PROBE_NUMERIC::data::itemName = "data";


AQUNNC::AQUNNC( ) : ParserKeyword("AQUNNC")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("AQUNNC");
  {
     ParserRecord record;
     {
        ParserItem item("AQUIFER_ID", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IX", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IY", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IZ", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JX", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JY", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JZ", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("TRAN", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Transmissibility");
        record.addItem(item);
     }
     {
        ParserItem item("IST1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IST2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IPT1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IPT2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("ZF1", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("ZF2", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("DIFF", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string AQUNNC::keywordName = "AQUNNC";
const std::string AQUNNC::AQUIFER_ID::itemName = "AQUIFER_ID";
const std::string AQUNNC::IX::itemName = "IX";
const std::string AQUNNC::IY::itemName = "IY";
const std::string AQUNNC::IZ::itemName = "IZ";
const std::string AQUNNC::JX::itemName = "JX";
const std::string AQUNNC::JY::itemName = "JY";
const std::string AQUNNC::JZ::itemName = "JZ";
const std::string AQUNNC::TRAN::itemName = "TRAN";
const double AQUNNC::TRAN::defaultValue = 0.000000;
const std::string AQUNNC::IST1::itemName = "IST1";
const std::string AQUNNC::IST2::itemName = "IST2";
const std::string AQUNNC::IPT1::itemName = "IPT1";
const std::string AQUNNC::IPT2::itemName = "IPT2";
const std::string AQUNNC::ZF1::itemName = "ZF1";
const std::string AQUNNC::ZF2::itemName = "ZF2";
const std::string AQUNNC::DIFF::itemName = "DIFF";


AQUNUM::AQUNUM( ) : ParserKeyword("AQUNUM")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("AQUNUM");
  {
     ParserRecord record;
     {
        ParserItem item("AQUIFER_ID", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("CROSS_SECTION", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("LENGTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("PORO", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("PERM", ParserItem::itype::DOUBLE);
        item.push_backDimension("Permeability");
        record.addItem(item);
     }
     {
        ParserItem item("DEPTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("INITIAL_PRESSURE", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("PVT_TABLE_NUM", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("SAT_TABLE_NUM", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string AQUNUM::keywordName = "AQUNUM";
const std::string AQUNUM::AQUIFER_ID::itemName = "AQUIFER_ID";
const std::string AQUNUM::I::itemName = "I";
const std::string AQUNUM::J::itemName = "J";
const std::string AQUNUM::K::itemName = "K";
const std::string AQUNUM::CROSS_SECTION::itemName = "CROSS_SECTION";
const std::string AQUNUM::LENGTH::itemName = "LENGTH";
const std::string AQUNUM::PORO::itemName = "PORO";
const std::string AQUNUM::PERM::itemName = "PERM";
const std::string AQUNUM::DEPTH::itemName = "DEPTH";
const std::string AQUNUM::INITIAL_PRESSURE::itemName = "INITIAL_PRESSURE";
const std::string AQUNUM::PVT_TABLE_NUM::itemName = "PVT_TABLE_NUM";
const std::string AQUNUM::SAT_TABLE_NUM::itemName = "SAT_TABLE_NUM";


AQUTAB::AQUTAB( ) : ParserKeyword("AQUTAB")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("AQUDIMS","NIFTBL",-1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("AQUTAB");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string AQUTAB::keywordName = "AQUTAB";
const std::string AQUTAB::DATA::itemName = "DATA";


AUTOCOAR::AUTOCOAR( ) : ParserKeyword("AUTOCOAR")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("AUTOCOAR");
  {
     ParserRecord record;
     {
        ParserItem item("I1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("I2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NX", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NY", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NZ", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string AUTOCOAR::keywordName = "AUTOCOAR";
const std::string AUTOCOAR::I1::itemName = "I1";
const std::string AUTOCOAR::I2::itemName = "I2";
const std::string AUTOCOAR::J1::itemName = "J1";
const std::string AUTOCOAR::J2::itemName = "J2";
const std::string AUTOCOAR::K1::itemName = "K1";
const std::string AUTOCOAR::K2::itemName = "K2";
const std::string AUTOCOAR::NX::itemName = "NX";
const std::string AUTOCOAR::NY::itemName = "NY";
const std::string AUTOCOAR::NZ::itemName = "NZ";


AUTOREF::AUTOREF( ) : ParserKeyword("AUTOREF")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("AUTOREF");
  {
     ParserRecord record;
     {
        ParserItem item("NX", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NY", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NZ", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("OPTION_TRANS_MULT", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string AUTOREF::keywordName = "AUTOREF";
const std::string AUTOREF::NX::itemName = "NX";
const int AUTOREF::NX::defaultValue = 1;
const std::string AUTOREF::NY::itemName = "NY";
const int AUTOREF::NY::defaultValue = 1;
const std::string AUTOREF::NZ::itemName = "NZ";
const int AUTOREF::NZ::defaultValue = 1;
const std::string AUTOREF::OPTION_TRANS_MULT::itemName = "OPTION_TRANS_MULT";
const double AUTOREF::OPTION_TRANS_MULT::defaultValue = 0.000000;


BC::BC( ) : ParserKeyword("BC")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("BC");
  {
     ParserRecord record;
     {
        ParserItem item("I1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("I2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("TYPE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("DIRECTION", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("COMPONENT", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     {
        ParserItem item("RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Mass/Time*Length*Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string BC::keywordName = "BC";
const std::string BC::I1::itemName = "I1";
const std::string BC::I2::itemName = "I2";
const std::string BC::J1::itemName = "J1";
const std::string BC::J2::itemName = "J2";
const std::string BC::K1::itemName = "K1";
const std::string BC::K2::itemName = "K2";
const std::string BC::TYPE::itemName = "TYPE";
const std::string BC::DIRECTION::itemName = "DIRECTION";
const std::string BC::COMPONENT::itemName = "COMPONENT";
const std::string BC::COMPONENT::defaultValue = "NONE";
const std::string BC::RATE::itemName = "RATE";
const double BC::RATE::defaultValue = 0.000000;


BIGMODEL::BIGMODEL( ) : ParserKeyword("BIGMODEL")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("BIGMODEL");
}
const std::string BIGMODEL::keywordName = "BIGMODEL";


BLACKOIL::BLACKOIL( ) : ParserKeyword("BLACKOIL")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("BLACKOIL");
}
const std::string BLACKOIL::keywordName = "BLACKOIL";


BLOCK_PROBE::BLOCK_PROBE( ) : ParserKeyword("BLOCK_PROBE")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("BAPI");
  addDeckName("BCGC");
  addDeckName("BCSC");
  addDeckName("BCTRA_X");
  addDeckName("BDENG");
  addDeckName("BDENO");
  addDeckName("BDENW");
  addDeckName("BESALPLY");
  addDeckName("BESALSUR");
  addDeckName("BEWV_SAL");
  addDeckName("BEWV_SUR");
  addDeckName("BFLOGI");
  addDeckName("BFLOGJ");
  addDeckName("BFLOGK");
  addDeckName("BFLOOI");
  addDeckName("BFLOOJ");
  addDeckName("BFLOOK");
  addDeckName("BFLOWI");
  addDeckName("BGDEN");
  addDeckName("BGI");
  addDeckName("BGIP");
  addDeckName("BGIPG");
  addDeckName("BGIPL");
  addDeckName("BGKR");
  addDeckName("BGPC");
  addDeckName("BGPR");
  addDeckName("BGPV");
  addDeckName("BGSAT");
  addDeckName("BGSHY");
  addDeckName("BGSTRP");
  addDeckName("BGTPD");
  addDeckName("BGTRP");
  addDeckName("BGVIS");
  addDeckName("BHD");
  addDeckName("BHDF");
  addDeckName("BHDF_X");
  addDeckName("BHD_X");
  addDeckName("BHPV");
  addDeckName("BKRG");
  addDeckName("BKRO");
  addDeckName("BKRW");
  addDeckName("BNIP");
  addDeckName("BNKR");
  addDeckName("BNSAT");
  addDeckName("BODEN");
  addDeckName("BOIP");
  addDeckName("BOIPG");
  addDeckName("BOIPL");
  addDeckName("BOKR");
  addDeckName("BOPV");
  addDeckName("BOSAT");
  addDeckName("BOVIS");
  addDeckName("BPBUB");
  addDeckName("BPDEW");
  addDeckName("BPERMMOD");
  addDeckName("BPORVMOD");
  addDeckName("BPPC");
  addDeckName("BPPG");
  addDeckName("BPPO");
  addDeckName("BPPW");
  addDeckName("BPR");
  addDeckName("BPR_X");
  addDeckName("BRPV");
  addDeckName("BRS");
  addDeckName("BRSSAT");
  addDeckName("BRTM");
  addDeckName("BRV");
  addDeckName("BRVSAT");
  addDeckName("BSCN");
  addDeckName("BSCN_X");
  addDeckName("BSGAS");
  addDeckName("BSIP");
  addDeckName("BSOIL");
  addDeckName("BSTATE");
  addDeckName("BSWAT");
  addDeckName("BTADSALK");
  addDeckName("BTADSFOA");
  addDeckName("BTADSUR");
  addDeckName("BTCASUR");
  addDeckName("BTCNFALK");
  addDeckName("BTCNFANI");
  addDeckName("BTCNFCAT");
  addDeckName("BTCNFFOA");
  addDeckName("BTCNFHEA");
  addDeckName("BTCNFSUR");
  addDeckName("BTCNMFOA");
  addDeckName("BTDCYFOA");
  addDeckName("BTHLFFOA");
  addDeckName("BTIPTFOA");
  addDeckName("BTIPTHEA");
  addDeckName("BTIPTSUR");
  addDeckName("BTMOBFOA");
  addDeckName("BTPADALK");
  addDeckName("BTRADCAT");
  addDeckName("BTSADALK");
  addDeckName("BTSADCAT");
  addDeckName("BTSTMALK");
  addDeckName("BTSTSUR");
  addDeckName("BVELGI");
  addDeckName("BVELGJ");
  addDeckName("BVELGK");
  addDeckName("BVELOI");
  addDeckName("BVELOJ");
  addDeckName("BVELOK");
  addDeckName("BVELWI");
  addDeckName("BVELWJ");
  addDeckName("BVELWK");
  addDeckName("BVGAS");
  addDeckName("BVOIL");
  addDeckName("BVWAT");
  addDeckName("BWDEN");
  addDeckName("BWIP");
  addDeckName("BWKR");
  addDeckName("BWPC");
  addDeckName("BWPR");
  addDeckName("BWPV");
  addDeckName("BWSAT");
  addDeckName("BWSHY");
  addDeckName("BWSMA");
  addDeckName("BWVIS");
  addDeckName("LBCTRA_X");
  addDeckName("LBHDF_X");
  addDeckName("LBHD_X");
  addDeckName("LBPR_X");
  addDeckName("LBSCN_X");
  setMatchRegex("BU.+|BTIPF.+|BTIPS.+|BTCNF.+|BTCNS.+|BTCN[1-9][0-9]*.+|BTIPT.+|BTIPF.+|BTIPS.+|BTIP[1-9][0-9]*.+|BTADS.+|BTDCY");
  {
     ParserRecord record;
     {
        ParserItem item("I", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string BLOCK_PROBE::keywordName = "BLOCK_PROBE";
const std::string BLOCK_PROBE::I::itemName = "I";
const std::string BLOCK_PROBE::J::itemName = "J";
const std::string BLOCK_PROBE::K::itemName = "K";


BLOCK_PROBE300::BLOCK_PROBE300( ) : ParserKeyword("BLOCK_PROBE300")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("BTEMP");
  {
     ParserRecord record;
     {
        ParserItem item("I", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string BLOCK_PROBE300::keywordName = "BLOCK_PROBE300";
const std::string BLOCK_PROBE300::I::itemName = "I";
const std::string BLOCK_PROBE300::J::itemName = "J";
const std::string BLOCK_PROBE300::K::itemName = "K";


BOUNDARY::BOUNDARY( ) : ParserKeyword("BOUNDARY")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("REGIONS");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("BOUNDARY");
  {
     ParserRecord record;
     {
        ParserItem item("IX1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IX2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JY1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JY2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("KZ1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("KZ2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("ORIENTATION_INDEX", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("DUAL_PORO_FLAG", ParserItem::itype::STRING);
        item.setDefault( std::string("BOTH") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string BOUNDARY::keywordName = "BOUNDARY";
const std::string BOUNDARY::IX1::itemName = "IX1";
const std::string BOUNDARY::IX2::itemName = "IX2";
const std::string BOUNDARY::JY1::itemName = "JY1";
const std::string BOUNDARY::JY2::itemName = "JY2";
const std::string BOUNDARY::KZ1::itemName = "KZ1";
const std::string BOUNDARY::KZ2::itemName = "KZ2";
const std::string BOUNDARY::ORIENTATION_INDEX::itemName = "ORIENTATION_INDEX";
const int BOUNDARY::ORIENTATION_INDEX::defaultValue = 1;
const std::string BOUNDARY::DUAL_PORO_FLAG::itemName = "DUAL_PORO_FLAG";
const std::string BOUNDARY::DUAL_PORO_FLAG::defaultValue = "BOTH";


BOX::BOX( ) : ParserKeyword("BOX")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("BOX");
  {
     ParserRecord record;
     {
        ParserItem item("I1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("I2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string BOX::keywordName = "BOX";
const std::string BOX::I1::itemName = "I1";
const std::string BOX::I2::itemName = "I2";
const std::string BOX::J1::itemName = "J1";
const std::string BOX::J2::itemName = "J2";
const std::string BOX::K1::itemName = "K1";
const std::string BOX::K2::itemName = "K2";


BPARA::BPARA( ) : ParserKeyword("BPARA")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("BPARA");
}
const std::string BPARA::keywordName = "BPARA";


BPIDIMS::BPIDIMS( ) : ParserKeyword("BPIDIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("BPIDIMS");
  {
     ParserRecord record;
     {
        ParserItem item("MXNBIP", ParserItem::itype::INT);
        item.setDefault( 10 );
        record.addItem(item);
     }
     {
        ParserItem item("MXNLBI", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string BPIDIMS::keywordName = "BPIDIMS";
const std::string BPIDIMS::MXNBIP::itemName = "MXNBIP";
const int BPIDIMS::MXNBIP::defaultValue = 10;
const std::string BPIDIMS::MXNLBI::itemName = "MXNLBI";
const int BPIDIMS::MXNLBI::defaultValue = 1;


BRANPROP::BRANPROP( ) : ParserKeyword("BRANPROP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("BRANPROP");
  {
     ParserRecord record;
     {
        ParserItem item("DOWNTREE_NODE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("UPTREE_NODE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("VFP_TABLE", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("ALQ", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("ALQ_SURFACE_DENSITY", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string BRANPROP::keywordName = "BRANPROP";
const std::string BRANPROP::DOWNTREE_NODE::itemName = "DOWNTREE_NODE";
const std::string BRANPROP::UPTREE_NODE::itemName = "UPTREE_NODE";
const std::string BRANPROP::VFP_TABLE::itemName = "VFP_TABLE";
const std::string BRANPROP::ALQ::itemName = "ALQ";
const double BRANPROP::ALQ::defaultValue = 0.000000;
const std::string BRANPROP::ALQ_SURFACE_DENSITY::itemName = "ALQ_SURFACE_DENSITY";
const std::string BRANPROP::ALQ_SURFACE_DENSITY::defaultValue = "NONE";


BRINE::BRINE( ) : ParserKeyword("BRINE")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("BRINE");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string BRINE::keywordName = "BRINE";
const std::string BRINE::data::itemName = "data";


BTOBALFA::BTOBALFA( ) : ParserKeyword("BTOBALFA")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("BTOBALFA");
  {
     ParserRecord record;
     {
        ParserItem item("VALUE", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string BTOBALFA::keywordName = "BTOBALFA";
const std::string BTOBALFA::VALUE::itemName = "VALUE";


BTOBALFV::BTOBALFV( ) : ParserKeyword("BTOBALFV")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("BTOBALFV");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string BTOBALFV::keywordName = "BTOBALFV";
const std::string BTOBALFV::data::itemName = "data";


CALTRAC::CALTRAC( ) : ParserKeyword("CALTRAC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("CALTRAC");
  {
     ParserRecord record;
     {
        ParserItem item("IX1", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string CALTRAC::keywordName = "CALTRAC";
const std::string CALTRAC::IX1::itemName = "IX1";


CARFIN::CARFIN( ) : ParserKeyword("CARFIN")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("CARFIN");
  {
     ParserRecord record;
     {
        ParserItem item("NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("I1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("I2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NX", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NY", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NZ", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NWMAX", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("PARENT", ParserItem::itype::STRING);
        item.setDefault( std::string("GLOBAL") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string CARFIN::keywordName = "CARFIN";
const std::string CARFIN::NAME::itemName = "NAME";
const std::string CARFIN::I1::itemName = "I1";
const std::string CARFIN::I2::itemName = "I2";
const std::string CARFIN::J1::itemName = "J1";
const std::string CARFIN::J2::itemName = "J2";
const std::string CARFIN::K1::itemName = "K1";
const std::string CARFIN::K2::itemName = "K2";
const std::string CARFIN::NX::itemName = "NX";
const std::string CARFIN::NY::itemName = "NY";
const std::string CARFIN::NZ::itemName = "NZ";
const std::string CARFIN::NWMAX::itemName = "NWMAX";
const std::string CARFIN::PARENT::itemName = "PARENT";
const std::string CARFIN::PARENT::defaultValue = "GLOBAL";


CART::CART( ) : ParserKeyword("CART")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("CART");
}
const std::string CART::keywordName = "CART";


CBMOPTS::CBMOPTS( ) : ParserKeyword("CBMOPTS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SRUNSPEC");
  clearDeckNames();
  addDeckName("CBMOPTS");
  {
     ParserRecord record;
     {
        ParserItem item("ADSORPTION_MODEL", ParserItem::itype::STRING);
        item.setDefault( std::string("TIMEDEP") );
        record.addItem(item);
     }
     {
        ParserItem item("ALLOW_WATER_FLOW", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     {
        ParserItem item("ALLOW_PERMEAB", ParserItem::itype::STRING);
        item.setDefault( std::string("NOKRMIX") );
        record.addItem(item);
     }
     {
        ParserItem item("COUNT_PASSES", ParserItem::itype::STRING);
        item.setDefault( std::string("NOPMREB") );
        record.addItem(item);
     }
     {
        ParserItem item("METHOD", ParserItem::itype::STRING);
        item.setDefault( std::string("PMSTD") );
        record.addItem(item);
     }
     {
        ParserItem item("SCALING_VALUE", ParserItem::itype::STRING);
        item.setDefault( std::string("PMSCAL") );
        record.addItem(item);
     }
     {
        ParserItem item("APPLICATION", ParserItem::itype::STRING);
        item.setDefault( std::string("PMPVK") );
        record.addItem(item);
     }
     {
        ParserItem item("PRESSURE_CHOP", ParserItem::itype::STRING);
        item.setDefault( std::string("NOPMPCHP") );
        record.addItem(item);
     }
     {
        ParserItem item("MIN_PORE_VOLUME", ParserItem::itype::DOUBLE);
        item.setDefault( double(5e-06) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string CBMOPTS::keywordName = "CBMOPTS";
const std::string CBMOPTS::ADSORPTION_MODEL::itemName = "ADSORPTION_MODEL";
const std::string CBMOPTS::ADSORPTION_MODEL::defaultValue = "TIMEDEP";
const std::string CBMOPTS::ALLOW_WATER_FLOW::itemName = "ALLOW_WATER_FLOW";
const std::string CBMOPTS::ALLOW_WATER_FLOW::defaultValue = "YES";
const std::string CBMOPTS::ALLOW_PERMEAB::itemName = "ALLOW_PERMEAB";
const std::string CBMOPTS::ALLOW_PERMEAB::defaultValue = "NOKRMIX";
const std::string CBMOPTS::COUNT_PASSES::itemName = "COUNT_PASSES";
const std::string CBMOPTS::COUNT_PASSES::defaultValue = "NOPMREB";
const std::string CBMOPTS::METHOD::itemName = "METHOD";
const std::string CBMOPTS::METHOD::defaultValue = "PMSTD";
const std::string CBMOPTS::SCALING_VALUE::itemName = "SCALING_VALUE";
const std::string CBMOPTS::SCALING_VALUE::defaultValue = "PMSCAL";
const std::string CBMOPTS::APPLICATION::itemName = "APPLICATION";
const std::string CBMOPTS::APPLICATION::defaultValue = "PMPVK";
const std::string CBMOPTS::PRESSURE_CHOP::itemName = "PRESSURE_CHOP";
const std::string CBMOPTS::PRESSURE_CHOP::defaultValue = "NOPMPCHP";
const std::string CBMOPTS::MIN_PORE_VOLUME::itemName = "MIN_PORE_VOLUME";
const double CBMOPTS::MIN_PORE_VOLUME::defaultValue = 0.000005;


CECON::CECON( ) : ParserKeyword("CECON")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("CECON");
  {
     ParserRecord record;
     {
        ParserItem item("WELLNAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_WCUT", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_GOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_WGR", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("WORKOVER_PROCEDURE", ParserItem::itype::STRING);
        item.setDefault( std::string("CON") );
        record.addItem(item);
     }
     {
        ParserItem item("CHECK_STOPPED", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("MIN_OIL", ParserItem::itype::DOUBLE);
        item.setDefault( double(-100000000000000000000.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("MIN_GAS", ParserItem::itype::DOUBLE);
        item.setDefault( double(-100000000000000000000.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("FOLLOW_ON_WELL", ParserItem::itype::STRING);
        item.setDefault( std::string("") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string CECON::keywordName = "CECON";
const std::string CECON::WELLNAME::itemName = "WELLNAME";
const std::string CECON::I::itemName = "I";
const int CECON::I::defaultValue = 0;
const std::string CECON::J::itemName = "J";
const int CECON::J::defaultValue = 0;
const std::string CECON::K1::itemName = "K1";
const int CECON::K1::defaultValue = 0;
const std::string CECON::K2::itemName = "K2";
const int CECON::K2::defaultValue = 0;
const std::string CECON::MAX_WCUT::itemName = "MAX_WCUT";
const double CECON::MAX_WCUT::defaultValue = 0.000000;
const std::string CECON::MAX_GOR::itemName = "MAX_GOR";
const double CECON::MAX_GOR::defaultValue = 0.000000;
const std::string CECON::MAX_WGR::itemName = "MAX_WGR";
const double CECON::MAX_WGR::defaultValue = 0.000000;
const std::string CECON::WORKOVER_PROCEDURE::itemName = "WORKOVER_PROCEDURE";
const std::string CECON::WORKOVER_PROCEDURE::defaultValue = "CON";
const std::string CECON::CHECK_STOPPED::itemName = "CHECK_STOPPED";
const std::string CECON::CHECK_STOPPED::defaultValue = "NO";
const std::string CECON::MIN_OIL::itemName = "MIN_OIL";
const double CECON::MIN_OIL::defaultValue = -100000000000000000000.000000;
const std::string CECON::MIN_GAS::itemName = "MIN_GAS";
const double CECON::MIN_GAS::defaultValue = -100000000000000000000.000000;
const std::string CECON::FOLLOW_ON_WELL::itemName = "FOLLOW_ON_WELL";
const std::string CECON::FOLLOW_ON_WELL::defaultValue = "";


CIRCLE::CIRCLE( ) : ParserKeyword("CIRCLE")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("CIRCLE");
}
const std::string CIRCLE::keywordName = "CIRCLE";


COAL::COAL( ) : ParserKeyword("COAL")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("COAL");
}
const std::string COAL::keywordName = "COAL";


COALADS::COALADS( ) : ParserKeyword("COALADS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("REGDIMS","NTCREG",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("COALADS");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COALADS::keywordName = "COALADS";
const std::string COALADS::DATA::itemName = "DATA";


COALNUM::COALNUM( ) : ParserKeyword("COALNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("COALNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string COALNUM::keywordName = "COALNUM";
const std::string COALNUM::data::itemName = "data";


COALPP::COALPP( ) : ParserKeyword("COALPP")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("REGDIMS","NTCREG",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("COALPP");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COALPP::keywordName = "COALPP";
const std::string COALPP::DATA::itemName = "DATA";


COARSEN::COARSEN( ) : ParserKeyword("COARSEN")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("COARSEN");
  {
     ParserRecord record;
     {
        ParserItem item("I1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("I2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NX", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NY", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NZ", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COARSEN::keywordName = "COARSEN";
const std::string COARSEN::I1::itemName = "I1";
const std::string COARSEN::I2::itemName = "I2";
const std::string COARSEN::J1::itemName = "J1";
const std::string COARSEN::J2::itemName = "J2";
const std::string COARSEN::K1::itemName = "K1";
const std::string COARSEN::K2::itemName = "K2";
const std::string COARSEN::NX::itemName = "NX";
const std::string COARSEN::NY::itemName = "NY";
const std::string COARSEN::NZ::itemName = "NZ";


COLLAPSE::COLLAPSE( ) : ParserKeyword("COLLAPSE")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("COLLAPSE");
  {
     ParserRecord record;
     {
        ParserItem item("VALUE", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COLLAPSE::keywordName = "COLLAPSE";
const std::string COLLAPSE::VALUE::itemName = "VALUE";
const int COLLAPSE::VALUE::defaultValue = 1;


COLUMNS::COLUMNS( ) : ParserKeyword("COLUMNS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("COLUMNS");
  {
     ParserRecord record;
     {
        ParserItem item("LEFT_MARGIN", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("RIGHT_MARGIN", ParserItem::itype::INT);
        item.setDefault( 132 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COLUMNS::keywordName = "COLUMNS";
const std::string COLUMNS::LEFT_MARGIN::itemName = "LEFT_MARGIN";
const int COLUMNS::LEFT_MARGIN::defaultValue = 1;
const std::string COLUMNS::RIGHT_MARGIN::itemName = "RIGHT_MARGIN";
const int COLUMNS::RIGHT_MARGIN::defaultValue = 132;


COMPDAT::COMPDAT( ) : ParserKeyword("COMPDAT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("COMPDAT");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("STATE", ParserItem::itype::STRING);
        item.setDefault( std::string("OPEN") );
        record.addItem(item);
     }
     {
        ParserItem item("SAT_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("CONNECTION_TRANSMISSIBILITY_FACTOR", ParserItem::itype::DOUBLE);
        item.push_backDimension("Viscosity*ReservoirVolume/Time*Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("DIAMETER", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("Kh", ParserItem::itype::DOUBLE);
        item.setDefault( double(-1.000000) );
        item.push_backDimension("Permeability*Length");
        record.addItem(item);
     }
     {
        ParserItem item("SKIN", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("D_FACTOR", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("DIR", ParserItem::itype::STRING);
        item.setDefault( std::string("Z") );
        record.addItem(item);
     }
     {
        ParserItem item("PR", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COMPDAT::keywordName = "COMPDAT";
const std::string COMPDAT::WELL::itemName = "WELL";
const std::string COMPDAT::I::itemName = "I";
const int COMPDAT::I::defaultValue = 0;
const std::string COMPDAT::J::itemName = "J";
const int COMPDAT::J::defaultValue = 0;
const std::string COMPDAT::K1::itemName = "K1";
const std::string COMPDAT::K2::itemName = "K2";
const std::string COMPDAT::STATE::itemName = "STATE";
const std::string COMPDAT::STATE::defaultValue = "OPEN";
const std::string COMPDAT::SAT_TABLE::itemName = "SAT_TABLE";
const int COMPDAT::SAT_TABLE::defaultValue = 0;
const std::string COMPDAT::CONNECTION_TRANSMISSIBILITY_FACTOR::itemName = "CONNECTION_TRANSMISSIBILITY_FACTOR";
const std::string COMPDAT::DIAMETER::itemName = "DIAMETER";
const std::string COMPDAT::Kh::itemName = "Kh";
const double COMPDAT::Kh::defaultValue = -1.000000;
const std::string COMPDAT::SKIN::itemName = "SKIN";
const double COMPDAT::SKIN::defaultValue = 0.000000;
const std::string COMPDAT::D_FACTOR::itemName = "D_FACTOR";
const std::string COMPDAT::DIR::itemName = "DIR";
const std::string COMPDAT::DIR::defaultValue = "Z";
const std::string COMPDAT::PR::itemName = "PR";


COMPDATX::COMPDATX( ) : ParserKeyword("COMPDATX")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("COMPDATL");
  addDeckName("COMPDATM");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("LGR", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("STATE", ParserItem::itype::STRING);
        item.setDefault( std::string("OPEN") );
        record.addItem(item);
     }
     {
        ParserItem item("SAT_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("CONNECTION_TRANSMISSIBILITY_FACTOR", ParserItem::itype::DOUBLE);
        item.push_backDimension("Viscosity*ReservoirVolume/Time*Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("DIAMETER", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("Kh", ParserItem::itype::DOUBLE);
        item.setDefault( double(-1.000000) );
        item.push_backDimension("Permeability*Length");
        record.addItem(item);
     }
     {
        ParserItem item("SKIN", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("D_FACTOR", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("DIR", ParserItem::itype::STRING);
        item.setDefault( std::string("Z") );
        record.addItem(item);
     }
     {
        ParserItem item("PR", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COMPDATX::keywordName = "COMPDATX";
const std::string COMPDATX::WELL::itemName = "WELL";
const std::string COMPDATX::LGR::itemName = "LGR";
const std::string COMPDATX::I::itemName = "I";
const int COMPDATX::I::defaultValue = 0;
const std::string COMPDATX::J::itemName = "J";
const int COMPDATX::J::defaultValue = 0;
const std::string COMPDATX::K1::itemName = "K1";
const std::string COMPDATX::K2::itemName = "K2";
const std::string COMPDATX::STATE::itemName = "STATE";
const std::string COMPDATX::STATE::defaultValue = "OPEN";
const std::string COMPDATX::SAT_TABLE::itemName = "SAT_TABLE";
const int COMPDATX::SAT_TABLE::defaultValue = 0;
const std::string COMPDATX::CONNECTION_TRANSMISSIBILITY_FACTOR::itemName = "CONNECTION_TRANSMISSIBILITY_FACTOR";
const std::string COMPDATX::DIAMETER::itemName = "DIAMETER";
const std::string COMPDATX::Kh::itemName = "Kh";
const double COMPDATX::Kh::defaultValue = -1.000000;
const std::string COMPDATX::SKIN::itemName = "SKIN";
const double COMPDATX::SKIN::defaultValue = 0.000000;
const std::string COMPDATX::D_FACTOR::itemName = "D_FACTOR";
const std::string COMPDATX::DIR::itemName = "DIR";
const std::string COMPDATX::DIR::defaultValue = "Z";
const std::string COMPDATX::PR::itemName = "PR";


COMPFLSH::COMPFLSH( ) : ParserKeyword("COMPFLSH")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("COMPFLSH");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("UPPER_K", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("LOWER_K", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("F1", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("F2", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("FLASH_PVTNUM", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COMPFLSH::keywordName = "COMPFLSH";
const std::string COMPFLSH::WELL::itemName = "WELL";
const std::string COMPFLSH::I::itemName = "I";
const int COMPFLSH::I::defaultValue = 0;
const std::string COMPFLSH::J::itemName = "J";
const int COMPFLSH::J::defaultValue = 0;
const std::string COMPFLSH::UPPER_K::itemName = "UPPER_K";
const int COMPFLSH::UPPER_K::defaultValue = 0;
const std::string COMPFLSH::LOWER_K::itemName = "LOWER_K";
const int COMPFLSH::LOWER_K::defaultValue = 0;
const std::string COMPFLSH::F1::itemName = "F1";
const double COMPFLSH::F1::defaultValue = 1.000000;
const std::string COMPFLSH::F2::itemName = "F2";
const double COMPFLSH::F2::defaultValue = 1.000000;
const std::string COMPFLSH::FLASH_PVTNUM::itemName = "FLASH_PVTNUM";
const int COMPFLSH::FLASH_PVTNUM::defaultValue = 0;


COMPIMB::COMPIMB( ) : ParserKeyword("COMPIMB")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("COMPIMB");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("SAT_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COMPIMB::keywordName = "COMPIMB";
const std::string COMPIMB::WELL::itemName = "WELL";
const std::string COMPIMB::I::itemName = "I";
const int COMPIMB::I::defaultValue = 0;
const std::string COMPIMB::J::itemName = "J";
const int COMPIMB::J::defaultValue = 0;
const std::string COMPIMB::K1::itemName = "K1";
const std::string COMPIMB::K2::itemName = "K2";
const std::string COMPIMB::SAT_TABLE::itemName = "SAT_TABLE";
const int COMPIMB::SAT_TABLE::defaultValue = 0;


COMPINJK::COMPINJK( ) : ParserKeyword("COMPINJK")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("COMPINJK");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("K_UPPER", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("K_LOWER", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("REL_PERM", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COMPINJK::keywordName = "COMPINJK";
const std::string COMPINJK::WELL::itemName = "WELL";
const std::string COMPINJK::I::itemName = "I";
const int COMPINJK::I::defaultValue = 0;
const std::string COMPINJK::J::itemName = "J";
const int COMPINJK::J::defaultValue = 0;
const std::string COMPINJK::K_UPPER::itemName = "K_UPPER";
const int COMPINJK::K_UPPER::defaultValue = 0;
const std::string COMPINJK::K_LOWER::itemName = "K_LOWER";
const int COMPINJK::K_LOWER::defaultValue = 0;
const std::string COMPINJK::REL_PERM::itemName = "REL_PERM";
const double COMPINJK::REL_PERM::defaultValue = 0.000000;


COMPLMPL::COMPLMPL( ) : ParserKeyword("COMPLMPL")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("COMPLMPL");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("GRID", ParserItem::itype::STRING);
        item.setDefault( std::string("") );
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("UPPER_K", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("LOWER_K", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("COMPLETION_NUMBER", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COMPLMPL::keywordName = "COMPLMPL";
const std::string COMPLMPL::WELL::itemName = "WELL";
const std::string COMPLMPL::GRID::itemName = "GRID";
const std::string COMPLMPL::GRID::defaultValue = "";
const std::string COMPLMPL::I::itemName = "I";
const int COMPLMPL::I::defaultValue = 0;
const std::string COMPLMPL::J::itemName = "J";
const int COMPLMPL::J::defaultValue = 0;
const std::string COMPLMPL::UPPER_K::itemName = "UPPER_K";
const int COMPLMPL::UPPER_K::defaultValue = 0;
const std::string COMPLMPL::LOWER_K::itemName = "LOWER_K";
const int COMPLMPL::LOWER_K::defaultValue = 0;
const std::string COMPLMPL::COMPLETION_NUMBER::itemName = "COMPLETION_NUMBER";


COMPLUMP::COMPLUMP( ) : ParserKeyword("COMPLUMP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("COMPLUMP");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("N", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COMPLUMP::keywordName = "COMPLUMP";
const std::string COMPLUMP::WELL::itemName = "WELL";
const std::string COMPLUMP::I::itemName = "I";
const std::string COMPLUMP::J::itemName = "J";
const std::string COMPLUMP::K1::itemName = "K1";
const std::string COMPLUMP::K2::itemName = "K2";
const std::string COMPLUMP::N::itemName = "N";


COMPOFF::COMPOFF( ) : ParserKeyword("COMPOFF")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("COMPOFF");
}
const std::string COMPOFF::keywordName = "COMPOFF";


COMPORD::COMPORD( ) : ParserKeyword("COMPORD")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("COMPORD");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("ORDER_TYPE", ParserItem::itype::STRING);
        item.setDefault( std::string("TRACK") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COMPORD::keywordName = "COMPORD";
const std::string COMPORD::WELL::itemName = "WELL";
const std::string COMPORD::ORDER_TYPE::itemName = "ORDER_TYPE";
const std::string COMPORD::ORDER_TYPE::defaultValue = "TRACK";


COMPRIV::COMPRIV( ) : ParserKeyword("COMPRIV")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("COMPRIV");
  {
     ParserRecord record;
     {
        ParserItem item("RIVER", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COMPRIV::keywordName = "COMPRIV";
const std::string COMPRIV::RIVER::itemName = "RIVER";
const std::string COMPRIV::I::itemName = "I";
const std::string COMPRIV::J::itemName = "J";
const std::string COMPRIV::K::itemName = "K";


COMPRP::COMPRP( ) : ParserKeyword("COMPRP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("COMPRP");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("K_UPPER", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("K_LOWER", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("SAT_TABLE_NUM", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("SWMIN", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("SWMAX", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("SGMIN", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("SGMAX", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COMPRP::keywordName = "COMPRP";
const std::string COMPRP::WELL::itemName = "WELL";
const std::string COMPRP::I::itemName = "I";
const int COMPRP::I::defaultValue = 0;
const std::string COMPRP::J::itemName = "J";
const int COMPRP::J::defaultValue = 0;
const std::string COMPRP::K_UPPER::itemName = "K_UPPER";
const int COMPRP::K_UPPER::defaultValue = 0;
const std::string COMPRP::K_LOWER::itemName = "K_LOWER";
const int COMPRP::K_LOWER::defaultValue = 0;
const std::string COMPRP::SAT_TABLE_NUM::itemName = "SAT_TABLE_NUM";
const std::string COMPRP::SWMIN::itemName = "SWMIN";
const std::string COMPRP::SWMAX::itemName = "SWMAX";
const std::string COMPRP::SGMIN::itemName = "SGMIN";
const std::string COMPRP::SGMAX::itemName = "SGMAX";


COMPRPL::COMPRPL( ) : ParserKeyword("COMPRPL")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("COMPRPL");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("LOCAL_GRID", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("K_UPPER", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("K_LOWER", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("SAT_TABLE_NUM", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("SWMIN", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("SWMAX", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("SGMIN", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("SGMAX", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COMPRPL::keywordName = "COMPRPL";
const std::string COMPRPL::WELL::itemName = "WELL";
const std::string COMPRPL::LOCAL_GRID::itemName = "LOCAL_GRID";
const std::string COMPRPL::I::itemName = "I";
const int COMPRPL::I::defaultValue = 0;
const std::string COMPRPL::J::itemName = "J";
const int COMPRPL::J::defaultValue = 0;
const std::string COMPRPL::K_UPPER::itemName = "K_UPPER";
const int COMPRPL::K_UPPER::defaultValue = 0;
const std::string COMPRPL::K_LOWER::itemName = "K_LOWER";
const int COMPRPL::K_LOWER::defaultValue = 0;
const std::string COMPRPL::SAT_TABLE_NUM::itemName = "SAT_TABLE_NUM";
const std::string COMPRPL::SWMIN::itemName = "SWMIN";
const std::string COMPRPL::SWMAX::itemName = "SWMAX";
const std::string COMPRPL::SGMIN::itemName = "SGMIN";
const std::string COMPRPL::SGMAX::itemName = "SGMAX";


COMPS::COMPS( ) : ParserKeyword("COMPS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("COMPS");
  {
     ParserRecord record;
     {
        ParserItem item("NUM_COMPS", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COMPS::keywordName = "COMPS";
const std::string COMPS::NUM_COMPS::itemName = "NUM_COMPS";


COMPSEGL::COMPSEGL( ) : ParserKeyword("COMPSEGL")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("COMPSEGL");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("GRID", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("BRANCH", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("DISTANCE_START", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("DISTANCE_END", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("DIRECTION", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("END_IJK", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("CENTER_DEPTH", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("THERMAL_LENGTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT_NUMBER", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COMPSEGL::keywordName = "COMPSEGL";
const std::string COMPSEGL::WELL::itemName = "WELL";
const std::string COMPSEGL::GRID::itemName = "GRID";
const std::string COMPSEGL::I::itemName = "I";
const std::string COMPSEGL::J::itemName = "J";
const std::string COMPSEGL::K::itemName = "K";
const std::string COMPSEGL::BRANCH::itemName = "BRANCH";
const std::string COMPSEGL::DISTANCE_START::itemName = "DISTANCE_START";
const std::string COMPSEGL::DISTANCE_END::itemName = "DISTANCE_END";
const std::string COMPSEGL::DIRECTION::itemName = "DIRECTION";
const std::string COMPSEGL::END_IJK::itemName = "END_IJK";
const std::string COMPSEGL::CENTER_DEPTH::itemName = "CENTER_DEPTH";
const double COMPSEGL::CENTER_DEPTH::defaultValue = 0.000000;
const std::string COMPSEGL::THERMAL_LENGTH::itemName = "THERMAL_LENGTH";
const std::string COMPSEGL::SEGMENT_NUMBER::itemName = "SEGMENT_NUMBER";


COMPSEGS::COMPSEGS( ) : ParserKeyword("COMPSEGS")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("COMPSEGS");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("I", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("BRANCH", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("DISTANCE_START", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("DISTANCE_END", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("DIRECTION", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("END_IJK", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("CENTER_DEPTH", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("THERMAL_LENGTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT_NUMBER", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COMPSEGS::keywordName = "COMPSEGS";
const std::string COMPSEGS::WELL::itemName = "WELL";
const std::string COMPSEGS::I::itemName = "I";
const std::string COMPSEGS::J::itemName = "J";
const std::string COMPSEGS::K::itemName = "K";
const std::string COMPSEGS::BRANCH::itemName = "BRANCH";
const std::string COMPSEGS::DISTANCE_START::itemName = "DISTANCE_START";
const std::string COMPSEGS::DISTANCE_END::itemName = "DISTANCE_END";
const std::string COMPSEGS::DIRECTION::itemName = "DIRECTION";
const std::string COMPSEGS::END_IJK::itemName = "END_IJK";
const std::string COMPSEGS::CENTER_DEPTH::itemName = "CENTER_DEPTH";
const double COMPSEGS::CENTER_DEPTH::defaultValue = 0.000000;
const std::string COMPSEGS::THERMAL_LENGTH::itemName = "THERMAL_LENGTH";
const std::string COMPSEGS::SEGMENT_NUMBER::itemName = "SEGMENT_NUMBER";


COMPVE::COMPVE( ) : ParserKeyword("COMPVE")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("COMPVE");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("K_UPPER", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("K_LOWER", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("SAT_TABLE_NUM", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("CVEFRAC", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("DTOP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("DBOT", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("FLAG", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("S_D", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("GTOP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("GBOT", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COMPVE::keywordName = "COMPVE";
const std::string COMPVE::WELL::itemName = "WELL";
const std::string COMPVE::I::itemName = "I";
const int COMPVE::I::defaultValue = 0;
const std::string COMPVE::J::itemName = "J";
const int COMPVE::J::defaultValue = 0;
const std::string COMPVE::K_UPPER::itemName = "K_UPPER";
const int COMPVE::K_UPPER::defaultValue = 0;
const std::string COMPVE::K_LOWER::itemName = "K_LOWER";
const int COMPVE::K_LOWER::defaultValue = 0;
const std::string COMPVE::SAT_TABLE_NUM::itemName = "SAT_TABLE_NUM";
const std::string COMPVE::CVEFRAC::itemName = "CVEFRAC";
const std::string COMPVE::DTOP::itemName = "DTOP";
const std::string COMPVE::DBOT::itemName = "DBOT";
const std::string COMPVE::FLAG::itemName = "FLAG";
const std::string COMPVE::FLAG::defaultValue = "NO";
const std::string COMPVE::S_D::itemName = "S_D";
const double COMPVE::S_D::defaultValue = 0.000000;
const std::string COMPVE::GTOP::itemName = "GTOP";
const std::string COMPVE::GBOT::itemName = "GBOT";


COMPVEL::COMPVEL( ) : ParserKeyword("COMPVEL")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("COMPVEL");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("LOCAL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("K_UPPER", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("K_LOWER", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("SAT_TABLE_NUM", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("CVEFRAC", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("DTOP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("DBOT", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("FLAG", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("S_D", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("GTOP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("GBOT", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COMPVEL::keywordName = "COMPVEL";
const std::string COMPVEL::WELL::itemName = "WELL";
const std::string COMPVEL::LOCAL::itemName = "LOCAL";
const std::string COMPVEL::I::itemName = "I";
const int COMPVEL::I::defaultValue = 0;
const std::string COMPVEL::J::itemName = "J";
const int COMPVEL::J::defaultValue = 0;
const std::string COMPVEL::K_UPPER::itemName = "K_UPPER";
const int COMPVEL::K_UPPER::defaultValue = 0;
const std::string COMPVEL::K_LOWER::itemName = "K_LOWER";
const int COMPVEL::K_LOWER::defaultValue = 0;
const std::string COMPVEL::SAT_TABLE_NUM::itemName = "SAT_TABLE_NUM";
const std::string COMPVEL::CVEFRAC::itemName = "CVEFRAC";
const std::string COMPVEL::DTOP::itemName = "DTOP";
const std::string COMPVEL::DBOT::itemName = "DBOT";
const std::string COMPVEL::FLAG::itemName = "FLAG";
const std::string COMPVEL::FLAG::defaultValue = "NO";
const std::string COMPVEL::S_D::itemName = "S_D";
const double COMPVEL::S_D::defaultValue = 0.000000;
const std::string COMPVEL::GTOP::itemName = "GTOP";
const std::string COMPVEL::GBOT::itemName = "GBOT";


CONNECTION_PROBE::CONNECTION_PROBE( ) : ParserKeyword("CONNECTION_PROBE")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("CAPI");
  addDeckName("CCFR");
  addDeckName("CCIC");
  addDeckName("CCIR");
  addDeckName("CCIT");
  addDeckName("CCPC");
  addDeckName("CCPT");
  addDeckName("CDBF");
  addDeckName("CDFAC");
  addDeckName("CDSF");
  addDeckName("CDSM");
  addDeckName("CDSML");
  addDeckName("CGFR");
  addDeckName("CGFRF");
  addDeckName("CGFRL");
  addDeckName("CGFRS");
  addDeckName("CGFRU");
  addDeckName("CGIR");
  addDeckName("CGIRL");
  addDeckName("CGIT");
  addDeckName("CGITL");
  addDeckName("CGLR");
  addDeckName("CGLRL");
  addDeckName("CGOR");
  addDeckName("CGORL");
  addDeckName("CGPI");
  addDeckName("CGPP");
  addDeckName("CGPR");
  addDeckName("CGPRL");
  addDeckName("CGPT");
  addDeckName("CGPTF");
  addDeckName("CGPTL");
  addDeckName("CGPTS");
  addDeckName("CGQ");
  addDeckName("CLFR");
  addDeckName("CLFRL");
  addDeckName("CLPT");
  addDeckName("CLPTL");
  addDeckName("CNFR");
  addDeckName("CNIT");
  addDeckName("CNPT");
  addDeckName("COFR");
  addDeckName("COFRF");
  addDeckName("COFRL");
  addDeckName("COFRS");
  addDeckName("COFRU");
  addDeckName("COGR");
  addDeckName("COGRL");
  addDeckName("COIT");
  addDeckName("COITL");
  addDeckName("COPI");
  addDeckName("COPP");
  addDeckName("COPR");
  addDeckName("COPRL");
  addDeckName("COPT");
  addDeckName("COPTF");
  addDeckName("COPTL");
  addDeckName("COPTS");
  addDeckName("CPI");
  addDeckName("CPRL");
  addDeckName("CSFR");
  addDeckName("CSIC");
  addDeckName("CSIR");
  addDeckName("CSIT");
  addDeckName("CSPC");
  addDeckName("CSPR");
  addDeckName("CSPT");
  addDeckName("CTFAC");
  addDeckName("CTFRALK");
  addDeckName("CTFRANI");
  addDeckName("CTFRCAT");
  addDeckName("CTFRFOA");
  addDeckName("CTFRSUR");
  addDeckName("CTITALK");
  addDeckName("CTITANI");
  addDeckName("CTITCAT");
  addDeckName("CTITFOA");
  addDeckName("CTITSUR");
  addDeckName("CTPTALK");
  addDeckName("CTPTANI");
  addDeckName("CTPTCAT");
  addDeckName("CTPTFOA");
  addDeckName("CTPTSUR");
  addDeckName("CVFR");
  addDeckName("CVFRL");
  addDeckName("CVIR");
  addDeckName("CVIRL");
  addDeckName("CVIT");
  addDeckName("CVITL");
  addDeckName("CVPT");
  addDeckName("CVPTL");
  addDeckName("CWCT");
  addDeckName("CWCTL");
  addDeckName("CWFR");
  addDeckName("CWFRL");
  addDeckName("CWFRU");
  addDeckName("CWGR");
  addDeckName("CWGRL");
  addDeckName("CWIR");
  addDeckName("CWIRL");
  addDeckName("CWIT");
  addDeckName("CWITL");
  addDeckName("CWPI");
  addDeckName("CWPP");
  addDeckName("CWPR");
  addDeckName("CWPRL");
  addDeckName("CWPT");
  addDeckName("CWPTL");
  addDeckName("LCGFRU");
  addDeckName("LCOFRU");
  addDeckName("LCWFRU");
  addDeckName("WGIRL");
  addDeckName("WGITL");
  setMatchRegex("CU.+|CTFR.+|CTPR.+|CTPT.+|CTPC.+|CTIR.+|CTIT.+|CTIC.+|CTFR.+|CTPR.+|CTPT.+|CTPC.+|CTIR.+|CTIT.+|CTIC.+|CTIRF.+|CTIRS.+|CTPRF.+|CTPRS.+|CTITF.+|CTITS.+|CTPTF.+|CTPTS.+|CTICF.+|CTICS.+|CTPCF.+|CTPCS");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string CONNECTION_PROBE::keywordName = "CONNECTION_PROBE";
const std::string CONNECTION_PROBE::WELL::itemName = "WELL";
const std::string CONNECTION_PROBE::I::itemName = "I";
const std::string CONNECTION_PROBE::J::itemName = "J";
const std::string CONNECTION_PROBE::K::itemName = "K";


COORD::COORD( ) : ParserKeyword("COORD")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("COORD");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string COORD::keywordName = "COORD";
const std::string COORD::data::itemName = "data";


COORDSYS::COORDSYS( ) : ParserKeyword("COORDSYS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("NUMRES","num",0);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("COORDSYS");
  {
     ParserRecord record;
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("CIRCLE_COMPLETION", ParserItem::itype::STRING);
        item.setDefault( std::string("INCOMP") );
        record.addItem(item);
     }
     {
        ParserItem item("CONNECTION", ParserItem::itype::STRING);
        item.setDefault( std::string("SEPARATE") );
        record.addItem(item);
     }
     {
        ParserItem item("R1", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("R2", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COORDSYS::keywordName = "COORDSYS";
const std::string COORDSYS::K1::itemName = "K1";
const std::string COORDSYS::K2::itemName = "K2";
const std::string COORDSYS::CIRCLE_COMPLETION::itemName = "CIRCLE_COMPLETION";
const std::string COORDSYS::CIRCLE_COMPLETION::defaultValue = "INCOMP";
const std::string COORDSYS::CONNECTION::itemName = "CONNECTION";
const std::string COORDSYS::CONNECTION::defaultValue = "SEPARATE";
const std::string COORDSYS::R1::itemName = "R1";
const int COORDSYS::R1::defaultValue = 0;
const std::string COORDSYS::R2::itemName = "R2";
const int COORDSYS::R2::defaultValue = 0;


COPY::COPY( ) : ParserKeyword("COPY")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("COPY");
  {
     ParserRecord record;
     {
        ParserItem item("src", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("target", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("I1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("I2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COPY::keywordName = "COPY";
const std::string COPY::src::itemName = "src";
const std::string COPY::target::itemName = "target";
const std::string COPY::I1::itemName = "I1";
const std::string COPY::I2::itemName = "I2";
const std::string COPY::J1::itemName = "J1";
const std::string COPY::J2::itemName = "J2";
const std::string COPY::K1::itemName = "K1";
const std::string COPY::K2::itemName = "K2";


COPYBOX::COPYBOX( ) : ParserKeyword("COPYBOX")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("COPYBOX");
  {
     ParserRecord record;
     {
        ParserItem item("ARRAY", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("IX1S", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IX2S", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JY1S", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JY2S", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("KY1S", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("KY2S", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IX1D", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IX2D", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JY1D", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JY2D", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("KY1D", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("KY2D", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COPYBOX::keywordName = "COPYBOX";
const std::string COPYBOX::ARRAY::itemName = "ARRAY";
const std::string COPYBOX::IX1S::itemName = "IX1S";
const std::string COPYBOX::IX2S::itemName = "IX2S";
const std::string COPYBOX::JY1S::itemName = "JY1S";
const std::string COPYBOX::JY2S::itemName = "JY2S";
const std::string COPYBOX::KY1S::itemName = "KY1S";
const std::string COPYBOX::KY2S::itemName = "KY2S";
const std::string COPYBOX::IX1D::itemName = "IX1D";
const std::string COPYBOX::IX2D::itemName = "IX2D";
const std::string COPYBOX::JY1D::itemName = "JY1D";
const std::string COPYBOX::JY2D::itemName = "JY2D";
const std::string COPYBOX::KY1D::itemName = "KY1D";
const std::string COPYBOX::KY2D::itemName = "KY2D";


COPYREG::COPYREG( ) : ParserKeyword("COPYREG")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("COPYREG");
  {
     ParserRecord record;
     {
        ParserItem item("SRC_ARRAY", ParserItem::itype::STRING);
        item.setDescription("The 3D array we will fetch from");
        record.addItem(item);
     }
     {
        ParserItem item("TARGET_ARRAY", ParserItem::itype::STRING);
        item.setDescription("The name of the array which will be set");
        record.addItem(item);
     }
     {
        ParserItem item("REGION_NUMBER", ParserItem::itype::INT);
        item.setDescription("The region number we are interested in");
        record.addItem(item);
     }
     {
        ParserItem item("REGION_NAME", ParserItem::itype::STRING);
        item.setDefault( std::string("M") );
        item.setDescription("The name of the region we are interested in");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string COPYREG::keywordName = "COPYREG";
const std::string COPYREG::SRC_ARRAY::itemName = "SRC_ARRAY";
const std::string COPYREG::TARGET_ARRAY::itemName = "TARGET_ARRAY";
const std::string COPYREG::REGION_NUMBER::itemName = "REGION_NUMBER";
const std::string COPYREG::REGION_NAME::itemName = "REGION_NAME";
const std::string COPYREG::REGION_NAME::defaultValue = "M";


CPR::CPR( ) : ParserKeyword("CPR")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("RUNSPEC");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("CPR");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string CPR::keywordName = "CPR";
const std::string CPR::WELL::itemName = "WELL";
const std::string CPR::I::itemName = "I";
const std::string CPR::J::itemName = "J";
const std::string CPR::K::itemName = "K";


CREF::CREF( ) : ParserKeyword("CREF")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NUM_STATE_EQ",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("CREF");
  {
     ParserRecord record;
     {
        ParserItem item("COMPRESSIBILITY", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1/Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string CREF::keywordName = "CREF";
const std::string CREF::COMPRESSIBILITY::itemName = "COMPRESSIBILITY";


CREFS::CREFS( ) : ParserKeyword("CREFS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NUM_STATE_EQ",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("CREFS");
  {
     ParserRecord record;
     {
        ParserItem item("COMPRESSIBILITY", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1/Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string CREFS::keywordName = "CREFS";
const std::string CREFS::COMPRESSIBILITY::itemName = "COMPRESSIBILITY";


CRITPERM::CRITPERM( ) : ParserKeyword("CRITPERM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("CRITPERM");
  {
     ParserRecord record;
     {
        ParserItem item("VALUE", ParserItem::itype::DOUBLE);
        item.push_backDimension("Permeability");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string CRITPERM::keywordName = "CRITPERM";
const std::string CRITPERM::VALUE::itemName = "VALUE";


CSKIN::CSKIN( ) : ParserKeyword("CSKIN")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("CSKIN");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("K_UPPER", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("K_LOWER", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("CONNECTION_SKIN_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string CSKIN::keywordName = "CSKIN";
const std::string CSKIN::WELL::itemName = "WELL";
const std::string CSKIN::I::itemName = "I";
const int CSKIN::I::defaultValue = 0;
const std::string CSKIN::J::itemName = "J";
const int CSKIN::J::defaultValue = 0;
const std::string CSKIN::K_UPPER::itemName = "K_UPPER";
const int CSKIN::K_UPPER::defaultValue = 0;
const std::string CSKIN::K_LOWER::itemName = "K_LOWER";
const int CSKIN::K_LOWER::defaultValue = 0;
const std::string CSKIN::CONNECTION_SKIN_FACTOR::itemName = "CONNECTION_SKIN_FACTOR";
const double CSKIN::CONNECTION_SKIN_FACTOR::defaultValue = 0.000000;


DATE::DATE( ) : ParserKeyword("DATE")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("DATE");
}
const std::string DATE::keywordName = "DATE";


DATES::DATES( ) : ParserKeyword("DATES")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("DATES");
  {
     ParserRecord record;
     {
        ParserItem item("DAY", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("MONTH", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("YEAR", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("TIME", ParserItem::itype::STRING);
        item.setDefault( std::string("00:00:00.000") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DATES::keywordName = "DATES";
const std::string DATES::DAY::itemName = "DAY";
const std::string DATES::MONTH::itemName = "MONTH";
const std::string DATES::YEAR::itemName = "YEAR";
const std::string DATES::TIME::itemName = "TIME";
const std::string DATES::TIME::defaultValue = "00:00:00.000";


DATUM::DATUM( ) : ParserKeyword("DATUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("DATUM");
  {
     ParserRecord record;
     {
        ParserItem item("DEPTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DATUM::keywordName = "DATUM";
const std::string DATUM::DEPTH::itemName = "DEPTH";


DATUMR::DATUMR( ) : ParserKeyword("DATUMR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("DATUMR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DATUMR::keywordName = "DATUMR";
const std::string DATUMR::data::itemName = "data";


DATUMRX::DATUMRX( ) : ParserKeyword("DATUMRX")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("DATUMRX");
  {
     ParserRecord record;
     {
        ParserItem item("REGION_FAMILY", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("DEPTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DATUMRX::keywordName = "DATUMRX";
const std::string DATUMRX::REGION_FAMILY::itemName = "REGION_FAMILY";
const std::string DATUMRX::DEPTH::itemName = "DEPTH";


DCQDEFN::DCQDEFN( ) : ParserKeyword("DCQDEFN")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("DCQDEFN");
  {
     ParserRecord record;
     {
        ParserItem item("QUANTITY", ParserItem::itype::STRING);
        item.setDefault( std::string("GAS") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DCQDEFN::keywordName = "DCQDEFN";
const std::string DCQDEFN::QUANTITY::itemName = "QUANTITY";
const std::string DCQDEFN::QUANTITY::defaultValue = "GAS";


DEADOIL::DEADOIL( ) : ParserKeyword("DEADOIL")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("DEADOIL");
}
const std::string DEADOIL::keywordName = "DEADOIL";


DEBUG_::DEBUG_( ) : ParserKeyword("DEBUG_")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("DEBUG");
  {
     ParserRecord record;
     {
        ParserItem item("Item1", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item2", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item3", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item4", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item5", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item6", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item7", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item8", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item9", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item10", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item11", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item12", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item13", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item14", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item15", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item16", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item17", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item18", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item19", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item20", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item21", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item22", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item23", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item24", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item25", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item26", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item27", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item28", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item29", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item30", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item31", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item32", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item33", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item34", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item35", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item36", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item37", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item38", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item39", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item40", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item41", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item42", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item43", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item44", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item45", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item46", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item47", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item48", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item49", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item50", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item51", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item52", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item53", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item54", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item55", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item56", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item57", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item58", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item59", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item60", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item61", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item62", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item63", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item64", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item65", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item66", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item67", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item68", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item69", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item70", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item71", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item72", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item73", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item74", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item75", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item76", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item77", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item78", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item79", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item80", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item81", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item82", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item83", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item84", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item85", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item86", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Item87", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DEBUG_::keywordName = "DEBUG_";
const std::string DEBUG_::Item1::itemName = "Item1";
const int DEBUG_::Item1::defaultValue = 0;
const std::string DEBUG_::Item2::itemName = "Item2";
const int DEBUG_::Item2::defaultValue = 0;
const std::string DEBUG_::Item3::itemName = "Item3";
const int DEBUG_::Item3::defaultValue = 0;
const std::string DEBUG_::Item4::itemName = "Item4";
const int DEBUG_::Item4::defaultValue = 0;
const std::string DEBUG_::Item5::itemName = "Item5";
const int DEBUG_::Item5::defaultValue = 0;
const std::string DEBUG_::Item6::itemName = "Item6";
const int DEBUG_::Item6::defaultValue = 0;
const std::string DEBUG_::Item7::itemName = "Item7";
const int DEBUG_::Item7::defaultValue = 0;
const std::string DEBUG_::Item8::itemName = "Item8";
const int DEBUG_::Item8::defaultValue = 0;
const std::string DEBUG_::Item9::itemName = "Item9";
const int DEBUG_::Item9::defaultValue = 0;
const std::string DEBUG_::Item10::itemName = "Item10";
const int DEBUG_::Item10::defaultValue = 0;
const std::string DEBUG_::Item11::itemName = "Item11";
const int DEBUG_::Item11::defaultValue = 0;
const std::string DEBUG_::Item12::itemName = "Item12";
const int DEBUG_::Item12::defaultValue = 0;
const std::string DEBUG_::Item13::itemName = "Item13";
const int DEBUG_::Item13::defaultValue = 0;
const std::string DEBUG_::Item14::itemName = "Item14";
const int DEBUG_::Item14::defaultValue = 0;
const std::string DEBUG_::Item15::itemName = "Item15";
const int DEBUG_::Item15::defaultValue = 0;
const std::string DEBUG_::Item16::itemName = "Item16";
const int DEBUG_::Item16::defaultValue = 0;
const std::string DEBUG_::Item17::itemName = "Item17";
const int DEBUG_::Item17::defaultValue = 0;
const std::string DEBUG_::Item18::itemName = "Item18";
const int DEBUG_::Item18::defaultValue = 0;
const std::string DEBUG_::Item19::itemName = "Item19";
const int DEBUG_::Item19::defaultValue = 0;
const std::string DEBUG_::Item20::itemName = "Item20";
const int DEBUG_::Item20::defaultValue = 0;
const std::string DEBUG_::Item21::itemName = "Item21";
const int DEBUG_::Item21::defaultValue = 0;
const std::string DEBUG_::Item22::itemName = "Item22";
const int DEBUG_::Item22::defaultValue = 0;
const std::string DEBUG_::Item23::itemName = "Item23";
const int DEBUG_::Item23::defaultValue = 0;
const std::string DEBUG_::Item24::itemName = "Item24";
const int DEBUG_::Item24::defaultValue = 0;
const std::string DEBUG_::Item25::itemName = "Item25";
const int DEBUG_::Item25::defaultValue = 0;
const std::string DEBUG_::Item26::itemName = "Item26";
const int DEBUG_::Item26::defaultValue = 0;
const std::string DEBUG_::Item27::itemName = "Item27";
const int DEBUG_::Item27::defaultValue = 0;
const std::string DEBUG_::Item28::itemName = "Item28";
const int DEBUG_::Item28::defaultValue = 0;
const std::string DEBUG_::Item29::itemName = "Item29";
const int DEBUG_::Item29::defaultValue = 0;
const std::string DEBUG_::Item30::itemName = "Item30";
const int DEBUG_::Item30::defaultValue = 0;
const std::string DEBUG_::Item31::itemName = "Item31";
const int DEBUG_::Item31::defaultValue = 0;
const std::string DEBUG_::Item32::itemName = "Item32";
const int DEBUG_::Item32::defaultValue = 0;
const std::string DEBUG_::Item33::itemName = "Item33";
const int DEBUG_::Item33::defaultValue = 0;
const std::string DEBUG_::Item34::itemName = "Item34";
const int DEBUG_::Item34::defaultValue = 0;
const std::string DEBUG_::Item35::itemName = "Item35";
const int DEBUG_::Item35::defaultValue = 0;
const std::string DEBUG_::Item36::itemName = "Item36";
const int DEBUG_::Item36::defaultValue = 0;
const std::string DEBUG_::Item37::itemName = "Item37";
const int DEBUG_::Item37::defaultValue = 0;
const std::string DEBUG_::Item38::itemName = "Item38";
const int DEBUG_::Item38::defaultValue = 0;
const std::string DEBUG_::Item39::itemName = "Item39";
const int DEBUG_::Item39::defaultValue = 0;
const std::string DEBUG_::Item40::itemName = "Item40";
const int DEBUG_::Item40::defaultValue = 0;
const std::string DEBUG_::Item41::itemName = "Item41";
const int DEBUG_::Item41::defaultValue = 0;
const std::string DEBUG_::Item42::itemName = "Item42";
const int DEBUG_::Item42::defaultValue = 0;
const std::string DEBUG_::Item43::itemName = "Item43";
const int DEBUG_::Item43::defaultValue = 0;
const std::string DEBUG_::Item44::itemName = "Item44";
const int DEBUG_::Item44::defaultValue = 0;
const std::string DEBUG_::Item45::itemName = "Item45";
const int DEBUG_::Item45::defaultValue = 0;
const std::string DEBUG_::Item46::itemName = "Item46";
const int DEBUG_::Item46::defaultValue = 0;
const std::string DEBUG_::Item47::itemName = "Item47";
const int DEBUG_::Item47::defaultValue = 0;
const std::string DEBUG_::Item48::itemName = "Item48";
const int DEBUG_::Item48::defaultValue = 0;
const std::string DEBUG_::Item49::itemName = "Item49";
const int DEBUG_::Item49::defaultValue = 0;
const std::string DEBUG_::Item50::itemName = "Item50";
const int DEBUG_::Item50::defaultValue = 0;
const std::string DEBUG_::Item51::itemName = "Item51";
const int DEBUG_::Item51::defaultValue = 0;
const std::string DEBUG_::Item52::itemName = "Item52";
const int DEBUG_::Item52::defaultValue = 0;
const std::string DEBUG_::Item53::itemName = "Item53";
const int DEBUG_::Item53::defaultValue = 0;
const std::string DEBUG_::Item54::itemName = "Item54";
const int DEBUG_::Item54::defaultValue = 0;
const std::string DEBUG_::Item55::itemName = "Item55";
const int DEBUG_::Item55::defaultValue = 0;
const std::string DEBUG_::Item56::itemName = "Item56";
const int DEBUG_::Item56::defaultValue = 0;
const std::string DEBUG_::Item57::itemName = "Item57";
const int DEBUG_::Item57::defaultValue = 0;
const std::string DEBUG_::Item58::itemName = "Item58";
const int DEBUG_::Item58::defaultValue = 0;
const std::string DEBUG_::Item59::itemName = "Item59";
const int DEBUG_::Item59::defaultValue = 0;
const std::string DEBUG_::Item60::itemName = "Item60";
const int DEBUG_::Item60::defaultValue = 0;
const std::string DEBUG_::Item61::itemName = "Item61";
const int DEBUG_::Item61::defaultValue = 0;
const std::string DEBUG_::Item62::itemName = "Item62";
const int DEBUG_::Item62::defaultValue = 0;
const std::string DEBUG_::Item63::itemName = "Item63";
const int DEBUG_::Item63::defaultValue = 0;
const std::string DEBUG_::Item64::itemName = "Item64";
const int DEBUG_::Item64::defaultValue = 0;
const std::string DEBUG_::Item65::itemName = "Item65";
const int DEBUG_::Item65::defaultValue = 0;
const std::string DEBUG_::Item66::itemName = "Item66";
const int DEBUG_::Item66::defaultValue = 0;
const std::string DEBUG_::Item67::itemName = "Item67";
const int DEBUG_::Item67::defaultValue = 0;
const std::string DEBUG_::Item68::itemName = "Item68";
const int DEBUG_::Item68::defaultValue = 0;
const std::string DEBUG_::Item69::itemName = "Item69";
const int DEBUG_::Item69::defaultValue = 0;
const std::string DEBUG_::Item70::itemName = "Item70";
const int DEBUG_::Item70::defaultValue = 0;
const std::string DEBUG_::Item71::itemName = "Item71";
const int DEBUG_::Item71::defaultValue = 0;
const std::string DEBUG_::Item72::itemName = "Item72";
const int DEBUG_::Item72::defaultValue = 0;
const std::string DEBUG_::Item73::itemName = "Item73";
const int DEBUG_::Item73::defaultValue = 0;
const std::string DEBUG_::Item74::itemName = "Item74";
const int DEBUG_::Item74::defaultValue = 0;
const std::string DEBUG_::Item75::itemName = "Item75";
const int DEBUG_::Item75::defaultValue = 0;
const std::string DEBUG_::Item76::itemName = "Item76";
const int DEBUG_::Item76::defaultValue = 0;
const std::string DEBUG_::Item77::itemName = "Item77";
const int DEBUG_::Item77::defaultValue = 0;
const std::string DEBUG_::Item78::itemName = "Item78";
const int DEBUG_::Item78::defaultValue = 0;
const std::string DEBUG_::Item79::itemName = "Item79";
const int DEBUG_::Item79::defaultValue = 0;
const std::string DEBUG_::Item80::itemName = "Item80";
const int DEBUG_::Item80::defaultValue = 0;
const std::string DEBUG_::Item81::itemName = "Item81";
const int DEBUG_::Item81::defaultValue = 0;
const std::string DEBUG_::Item82::itemName = "Item82";
const int DEBUG_::Item82::defaultValue = 0;
const std::string DEBUG_::Item83::itemName = "Item83";
const int DEBUG_::Item83::defaultValue = 0;
const std::string DEBUG_::Item84::itemName = "Item84";
const int DEBUG_::Item84::defaultValue = 0;
const std::string DEBUG_::Item85::itemName = "Item85";
const int DEBUG_::Item85::defaultValue = 0;
const std::string DEBUG_::Item86::itemName = "Item86";
const int DEBUG_::Item86::defaultValue = 0;
const std::string DEBUG_::Item87::itemName = "Item87";
const int DEBUG_::Item87::defaultValue = 0;


DELAYACT::DELAYACT( ) : ParserKeyword("DELAYACT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("DELAYACT");
  {
     ParserRecord record;
     {
        ParserItem item("ACTION_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("ACTION_TRIGGER", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("DELAY", ParserItem::itype::DOUBLE);
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("NUM_TIMES", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("INCREMENT", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DELAYACT::keywordName = "DELAYACT";
const std::string DELAYACT::ACTION_NAME::itemName = "ACTION_NAME";
const std::string DELAYACT::ACTION_TRIGGER::itemName = "ACTION_TRIGGER";
const std::string DELAYACT::DELAY::itemName = "DELAY";
const std::string DELAYACT::NUM_TIMES::itemName = "NUM_TIMES";
const int DELAYACT::NUM_TIMES::defaultValue = 1;
const std::string DELAYACT::INCREMENT::itemName = "INCREMENT";
const double DELAYACT::INCREMENT::defaultValue = 0.000000;


DENSITY::DENSITY( ) : ParserKeyword("DENSITY")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("DENSITY");
  {
     ParserRecord record;
     {
        ParserItem item("OIL", ParserItem::itype::DOUBLE);
        item.setDefault( double(600.000000) );
        item.push_backDimension("Density");
        record.addItem(item);
     }
     {
        ParserItem item("WATER", ParserItem::itype::DOUBLE);
        item.setDefault( double(999.014000) );
        item.push_backDimension("Density");
        record.addItem(item);
     }
     {
        ParserItem item("GAS", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("Density");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DENSITY::keywordName = "DENSITY";
const std::string DENSITY::OIL::itemName = "OIL";
const double DENSITY::OIL::defaultValue = 600.000000;
const std::string DENSITY::WATER::itemName = "WATER";
const double DENSITY::WATER::defaultValue = 999.014000;
const std::string DENSITY::GAS::itemName = "GAS";
const double DENSITY::GAS::defaultValue = 1.000000;


DEPTH::DEPTH( ) : ParserKeyword("DEPTH")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  clearDeckNames();
  addDeckName("DEPTH");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DEPTH::keywordName = "DEPTH";
const std::string DEPTH::data::itemName = "data";


DEPTHTAB::DEPTHTAB( ) : ParserKeyword("DEPTHTAB")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("RIVRDIMS","NMDEPT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("DEPTHTAB");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DEPTHTAB::keywordName = "DEPTHTAB";
const std::string DEPTHTAB::DATA::itemName = "DATA";


DEPTHZ::DEPTHZ( ) : ParserKeyword("DEPTHZ")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DEPTHZ");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DEPTHZ::keywordName = "DEPTHZ";
const std::string DEPTHZ::data::itemName = "data";


DIAGDISP::DIAGDISP( ) : ParserKeyword("DIAGDISP")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("DIAGDISP");
}
const std::string DIAGDISP::keywordName = "DIAGDISP";


DIFF::DIFF( ) : ParserKeyword("DIFF")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DIFF");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DIFF::keywordName = "DIFF";
const std::string DIFF::data::itemName = "data";
const double DIFF::data::defaultValue = 1.000000;


DIFFC::DIFFC( ) : ParserKeyword("DIFFC")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("DIFFC");
  {
     ParserRecord record;
     {
        ParserItem item("OIL_MOL_WEIGHT", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("GAS_MOL_WEIGHT", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("GAS_GAS_DIFF_COEFF", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length/Time");
        record.addItem(item);
     }
     {
        ParserItem item("OIL_GAS_DIFF_COEFF", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length/Time");
        record.addItem(item);
     }
     {
        ParserItem item("GAS_OIL_DIFF_COEFF", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length/Time");
        record.addItem(item);
     }
     {
        ParserItem item("OIL_OIL_DIFF_COEFF", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length/Time");
        record.addItem(item);
     }
     {
        ParserItem item("GAS_OIL_CROSS_DIFF_COEFF", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length/Time");
        record.addItem(item);
     }
     {
        ParserItem item("OIL_OIL_CROSS_DIFF_COEFF", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length/Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DIFFC::keywordName = "DIFFC";
const std::string DIFFC::OIL_MOL_WEIGHT::itemName = "OIL_MOL_WEIGHT";
const std::string DIFFC::GAS_MOL_WEIGHT::itemName = "GAS_MOL_WEIGHT";
const std::string DIFFC::GAS_GAS_DIFF_COEFF::itemName = "GAS_GAS_DIFF_COEFF";
const std::string DIFFC::OIL_GAS_DIFF_COEFF::itemName = "OIL_GAS_DIFF_COEFF";
const std::string DIFFC::GAS_OIL_DIFF_COEFF::itemName = "GAS_OIL_DIFF_COEFF";
const std::string DIFFC::OIL_OIL_DIFF_COEFF::itemName = "OIL_OIL_DIFF_COEFF";
const std::string DIFFC::GAS_OIL_CROSS_DIFF_COEFF::itemName = "GAS_OIL_CROSS_DIFF_COEFF";
const std::string DIFFC::OIL_OIL_CROSS_DIFF_COEFF::itemName = "OIL_OIL_CROSS_DIFF_COEFF";


DIFFCOAL::DIFFCOAL( ) : ParserKeyword("DIFFCOAL")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("REGDIMS","NTCREG",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("DIFFCOAL");
  {
     ParserRecord record;
     {
        ParserItem item("GAS_DIFF_COEFF", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length/Time");
        record.addItem(item);
     }
     {
        ParserItem item("RE_ADSORB_FRACTION", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("SOL_DIFF_COEFF", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length/Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DIFFCOAL::keywordName = "DIFFCOAL";
const std::string DIFFCOAL::GAS_DIFF_COEFF::itemName = "GAS_DIFF_COEFF";
const std::string DIFFCOAL::RE_ADSORB_FRACTION::itemName = "RE_ADSORB_FRACTION";
const double DIFFCOAL::RE_ADSORB_FRACTION::defaultValue = 1.000000;
const std::string DIFFCOAL::SOL_DIFF_COEFF::itemName = "SOL_DIFF_COEFF";


DIFFDP::DIFFDP( ) : ParserKeyword("DIFFDP")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("DIFFDP");
}
const std::string DIFFDP::keywordName = "DIFFDP";


DIFFMMF::DIFFMMF( ) : ParserKeyword("DIFFMMF")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("DIFFMMF");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DIFFMMF::keywordName = "DIFFMMF";
const std::string DIFFMMF::data::itemName = "data";
const double DIFFMMF::data::defaultValue = 1.000000;


DIFFMR::DIFFMR( ) : ParserKeyword("DIFFMR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DIFFMR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DIFFMR::keywordName = "DIFFMR";
const std::string DIFFMR::data::itemName = "data";
const double DIFFMR::data::defaultValue = 1.000000;


DIFFMTHT::DIFFMTHT( ) : ParserKeyword("DIFFMTHT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DIFFMTHT");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DIFFMTHT::keywordName = "DIFFMTHT";
const std::string DIFFMTHT::data::itemName = "data";
const double DIFFMTHT::data::defaultValue = 1.000000;


DIFFMX::DIFFMX( ) : ParserKeyword("DIFFMX")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DIFFMX");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DIFFMX::keywordName = "DIFFMX";
const std::string DIFFMX::data::itemName = "data";
const double DIFFMX::data::defaultValue = 1.000000;


DIFFMY::DIFFMY( ) : ParserKeyword("DIFFMY")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DIFFMY");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DIFFMY::keywordName = "DIFFMY";
const std::string DIFFMY::data::itemName = "data";
const double DIFFMY::data::defaultValue = 1.000000;


DIFFMZ::DIFFMZ( ) : ParserKeyword("DIFFMZ")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DIFFMZ");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DIFFMZ::keywordName = "DIFFMZ";
const std::string DIFFMZ::data::itemName = "data";
const double DIFFMZ::data::defaultValue = 1.000000;


DIFFR::DIFFR( ) : ParserKeyword("DIFFR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  clearDeckNames();
  addDeckName("DIFFR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DIFFR::keywordName = "DIFFR";
const std::string DIFFR::data::itemName = "data";


DIFFTHT::DIFFTHT( ) : ParserKeyword("DIFFTHT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  clearDeckNames();
  addDeckName("DIFFTHT");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DIFFTHT::keywordName = "DIFFTHT";
const std::string DIFFTHT::data::itemName = "data";


DIFFUSE::DIFFUSE( ) : ParserKeyword("DIFFUSE")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("DIFFUSE");
}
const std::string DIFFUSE::keywordName = "DIFFUSE";


DIFFX::DIFFX( ) : ParserKeyword("DIFFX")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  clearDeckNames();
  addDeckName("DIFFX");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DIFFX::keywordName = "DIFFX";
const std::string DIFFX::data::itemName = "data";


DIFFY::DIFFY( ) : ParserKeyword("DIFFY")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  clearDeckNames();
  addDeckName("DIFFY");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DIFFY::keywordName = "DIFFY";
const std::string DIFFY::data::itemName = "data";


DIFFZ::DIFFZ( ) : ParserKeyword("DIFFZ")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  clearDeckNames();
  addDeckName("DIFFZ");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DIFFZ::keywordName = "DIFFZ";
const std::string DIFFZ::data::itemName = "data";


DIMENS::DIMENS( ) : ParserKeyword("DIMENS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("DIMENS");
  {
     ParserRecord record;
     {
        ParserItem item("NX", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NY", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NZ", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DIMENS::keywordName = "DIMENS";
const std::string DIMENS::NX::itemName = "NX";
const std::string DIMENS::NY::itemName = "NY";
const std::string DIMENS::NZ::itemName = "NZ";


DIMPES::DIMPES( ) : ParserKeyword("DIMPES")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("DIMPES");
  {
     ParserRecord record;
     {
        ParserItem item("DSTARG", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.050000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("DSMAX", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.100000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("DPMAX", ParserItem::itype::DOUBLE);
        item.setDefault( double(13.790000) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DIMPES::keywordName = "DIMPES";
const std::string DIMPES::DSTARG::itemName = "DSTARG";
const double DIMPES::DSTARG::defaultValue = 0.050000;
const std::string DIMPES::DSMAX::itemName = "DSMAX";
const double DIMPES::DSMAX::defaultValue = 0.100000;
const std::string DIMPES::DPMAX::itemName = "DPMAX";
const double DIMPES::DPMAX::defaultValue = 13.790000;


DIMPLICT::DIMPLICT( ) : ParserKeyword("DIMPLICT")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("DIMPLICT");
}
const std::string DIMPLICT::keywordName = "DIMPLICT";


DISGAS::DISGAS( ) : ParserKeyword("DISGAS")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("DISGAS");
}
const std::string DISGAS::keywordName = "DISGAS";


DISPDIMS::DISPDIMS( ) : ParserKeyword("DISPDIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("DISPDIMS");
  {
     ParserRecord record;
     {
        ParserItem item("NUM_DISP_TABLES", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_VELOCITY_NODES", ParserItem::itype::INT);
        item.setDefault( 2 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_CONCENTRATION_NODES", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DISPDIMS::keywordName = "DISPDIMS";
const std::string DISPDIMS::NUM_DISP_TABLES::itemName = "NUM_DISP_TABLES";
const int DISPDIMS::NUM_DISP_TABLES::defaultValue = 1;
const std::string DISPDIMS::MAX_VELOCITY_NODES::itemName = "MAX_VELOCITY_NODES";
const int DISPDIMS::MAX_VELOCITY_NODES::defaultValue = 2;
const std::string DISPDIMS::MAX_CONCENTRATION_NODES::itemName = "MAX_CONCENTRATION_NODES";
const int DISPDIMS::MAX_CONCENTRATION_NODES::defaultValue = 1;


DISPERSE::DISPERSE( ) : ParserKeyword("DISPERSE")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("DISPDIMS","MXDIST",0);
  setTableCollection( true );
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("DISPERSE");
  {
     ParserRecord record;
     {
        ParserItem item("VELOCITY", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length/Time");
        record.addItem(item);
     }
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("Length*Length/Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DISPERSE::keywordName = "DISPERSE";
const std::string DISPERSE::VELOCITY::itemName = "VELOCITY";
const std::string DISPERSE::DATA::itemName = "DATA";


DOMAINS::DOMAINS( ) : ParserKeyword("DOMAINS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DOMAINS");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DOMAINS::keywordName = "DOMAINS";
const std::string DOMAINS::data::itemName = "data";


DPGRID::DPGRID( ) : ParserKeyword("DPGRID")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DPGRID");
}
const std::string DPGRID::keywordName = "DPGRID";


DPKRMOD::DPKRMOD( ) : ParserKeyword("DPKRMOD")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("DPKRMOD");
  {
     ParserRecord record;
     {
        ParserItem item("MOD_OIL_WAT_PERM", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("MOD_OIL_GAS_PERM", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("SCALE_PERM_FRACTURE", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DPKRMOD::keywordName = "DPKRMOD";
const std::string DPKRMOD::MOD_OIL_WAT_PERM::itemName = "MOD_OIL_WAT_PERM";
const double DPKRMOD::MOD_OIL_WAT_PERM::defaultValue = 0.000000;
const std::string DPKRMOD::MOD_OIL_GAS_PERM::itemName = "MOD_OIL_GAS_PERM";
const double DPKRMOD::MOD_OIL_GAS_PERM::defaultValue = 0.000000;
const std::string DPKRMOD::SCALE_PERM_FRACTURE::itemName = "SCALE_PERM_FRACTURE";
const std::string DPKRMOD::SCALE_PERM_FRACTURE::defaultValue = "YES";


DPNUM::DPNUM( ) : ParserKeyword("DPNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DPNUM");
  {
     ParserRecord record;
     {
        ParserItem item("VALUE", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DPNUM::keywordName = "DPNUM";
const std::string DPNUM::VALUE::itemName = "VALUE";


DR::DR( ) : ParserKeyword("DR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DR::keywordName = "DR";
const std::string DR::data::itemName = "data";


DREF::DREF( ) : ParserKeyword("DREF")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NUM_STATE_EQ",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("DREF");
  {
     ParserRecord record;
     {
        ParserItem item("DENSITY", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Density");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DREF::keywordName = "DREF";
const std::string DREF::DENSITY::itemName = "DENSITY";


DREFS::DREFS( ) : ParserKeyword("DREFS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NUM_STATE_EQ",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("DREFS");
  {
     ParserRecord record;
     {
        ParserItem item("DENSITY", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Density");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DREFS::keywordName = "DREFS";
const std::string DREFS::DENSITY::itemName = "DENSITY";


DRILPRI::DRILPRI( ) : ParserKeyword("DRILPRI")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("DRILPRI");
  {
     ParserRecord record;
     {
        ParserItem item("INTERVAL", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("A", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("B", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("C", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("D", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("E", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("F", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("G", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("H", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("LOOK_AHEAD", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("CALCULATION", ParserItem::itype::STRING);
        item.setDefault( std::string("SINGLE") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DRILPRI::keywordName = "DRILPRI";
const std::string DRILPRI::INTERVAL::itemName = "INTERVAL";
const double DRILPRI::INTERVAL::defaultValue = 0.000000;
const std::string DRILPRI::A::itemName = "A";
const double DRILPRI::A::defaultValue = 0.000000;
const std::string DRILPRI::B::itemName = "B";
const double DRILPRI::B::defaultValue = 0.000000;
const std::string DRILPRI::C::itemName = "C";
const double DRILPRI::C::defaultValue = 0.000000;
const std::string DRILPRI::D::itemName = "D";
const double DRILPRI::D::defaultValue = 0.000000;
const std::string DRILPRI::E::itemName = "E";
const double DRILPRI::E::defaultValue = 0.000000;
const std::string DRILPRI::F::itemName = "F";
const double DRILPRI::F::defaultValue = 0.000000;
const std::string DRILPRI::G::itemName = "G";
const double DRILPRI::G::defaultValue = 0.000000;
const std::string DRILPRI::H::itemName = "H";
const double DRILPRI::H::defaultValue = 0.000000;
const std::string DRILPRI::LOOK_AHEAD::itemName = "LOOK_AHEAD";
const double DRILPRI::LOOK_AHEAD::defaultValue = 0.000000;
const std::string DRILPRI::CALCULATION::itemName = "CALCULATION";
const std::string DRILPRI::CALCULATION::defaultValue = "SINGLE";


DRSDT::DRSDT( ) : ParserKeyword("DRSDT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("DRSDT");
  {
     ParserRecord record;
     {
        ParserItem item("DRSDT_MAX", ParserItem::itype::DOUBLE);
        item.push_backDimension("GasDissolutionFactor/Time");
        record.addItem(item);
     }
     {
        ParserItem item("Option", ParserItem::itype::STRING);
        item.setDefault( std::string("ALL") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DRSDT::keywordName = "DRSDT";
const std::string DRSDT::DRSDT_MAX::itemName = "DRSDT_MAX";
const std::string DRSDT::Option::itemName = "Option";
const std::string DRSDT::Option::defaultValue = "ALL";


DRSDTR::DRSDTR( ) : ParserKeyword("DRSDTR")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("DRSDTR");
  {
     ParserRecord record;
     {
        ParserItem item("DRSDT_MAX", ParserItem::itype::DOUBLE);
        item.push_backDimension("GasDissolutionFactor/Time");
        record.addItem(item);
     }
     {
        ParserItem item("Option", ParserItem::itype::STRING);
        item.setDefault( std::string("ALL") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DRSDTR::keywordName = "DRSDTR";
const std::string DRSDTR::DRSDT_MAX::itemName = "DRSDT_MAX";
const std::string DRSDTR::Option::itemName = "Option";
const std::string DRSDTR::Option::defaultValue = "ALL";


DRV::DRV( ) : ParserKeyword("DRV")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DRV");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DRV::keywordName = "DRV";
const std::string DRV::data::itemName = "data";


DRVDT::DRVDT( ) : ParserKeyword("DRVDT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("DRVDT");
  {
     ParserRecord record;
     {
        ParserItem item("DRVDT_MAX", ParserItem::itype::DOUBLE);
        item.push_backDimension("OilDissolutionFactor/Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DRVDT::keywordName = "DRVDT";
const std::string DRVDT::DRVDT_MAX::itemName = "DRVDT_MAX";


DRVDTR::DRVDTR( ) : ParserKeyword("DRVDTR")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("DRVDTR");
  {
     ParserRecord record;
     {
        ParserItem item("DRVDT_MAX", ParserItem::itype::DOUBLE);
        item.push_backDimension("OilDissolutionFactor/Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DRVDTR::keywordName = "DRVDTR";
const std::string DRVDTR::DRVDT_MAX::itemName = "DRVDT_MAX";


DSPDEINT::DSPDEINT( ) : ParserKeyword("DSPDEINT")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("DSPDEINT");
}
const std::string DSPDEINT::keywordName = "DSPDEINT";


DTHETA::DTHETA( ) : ParserKeyword("DTHETA")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DTHETA");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DTHETA::keywordName = "DTHETA";
const std::string DTHETA::data::itemName = "data";


DTHETAV::DTHETAV( ) : ParserKeyword("DTHETAV")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DTHETAV");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DTHETAV::keywordName = "DTHETAV";
const std::string DTHETAV::data::itemName = "data";


DUALPERM::DUALPERM( ) : ParserKeyword("DUALPERM")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("DUALPERM");
}
const std::string DUALPERM::keywordName = "DUALPERM";


DUALPORO::DUALPORO( ) : ParserKeyword("DUALPORO")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("DUALPORO");
}
const std::string DUALPORO::keywordName = "DUALPORO";


DUMPCUPL::DUMPCUPL( ) : ParserKeyword("DUMPCUPL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("DUMPCUPL");
  {
     ParserRecord record;
     {
        ParserItem item("VALUE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DUMPCUPL::keywordName = "DUMPCUPL";
const std::string DUMPCUPL::VALUE::itemName = "VALUE";


DUMPFLUX::DUMPFLUX( ) : ParserKeyword("DUMPFLUX")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DUMPFLUX");
}
const std::string DUMPFLUX::keywordName = "DUMPFLUX";


DX::DX( ) : ParserKeyword("DX")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DX");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DX::keywordName = "DX";
const std::string DX::data::itemName = "data";


DXV::DXV( ) : ParserKeyword("DXV")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DXV");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DXV::keywordName = "DXV";
const std::string DXV::data::itemName = "data";


DY::DY( ) : ParserKeyword("DY")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DY");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DY::keywordName = "DY";
const std::string DY::data::itemName = "data";


DYNRDIMS::DYNRDIMS( ) : ParserKeyword("DYNRDIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("DYNRDIMS");
  {
     ParserRecord record;
     {
        ParserItem item("MNUMDR", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MXDYNF", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MXDYNR", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string DYNRDIMS::keywordName = "DYNRDIMS";
const std::string DYNRDIMS::MNUMDR::itemName = "MNUMDR";
const int DYNRDIMS::MNUMDR::defaultValue = 0;
const std::string DYNRDIMS::MXDYNF::itemName = "MXDYNF";
const int DYNRDIMS::MXDYNF::defaultValue = 0;
const std::string DYNRDIMS::MXDYNR::itemName = "MXDYNR";
const int DYNRDIMS::MXDYNR::defaultValue = 0;


DYV::DYV( ) : ParserKeyword("DYV")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DYV");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DYV::keywordName = "DYV";
const std::string DYV::data::itemName = "data";


DZ::DZ( ) : ParserKeyword("DZ")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DZ");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DZ::keywordName = "DZ";
const std::string DZ::data::itemName = "data";


DZMATRIX::DZMATRIX( ) : ParserKeyword("DZMATRIX")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DZMATRIX");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(0) );
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DZMATRIX::keywordName = "DZMATRIX";
const std::string DZMATRIX::data::itemName = "data";
const double DZMATRIX::data::defaultValue = 0.000000;


DZMTRX::DZMTRX( ) : ParserKeyword("DZMTRX")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DZMTRX");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(0) );
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DZMTRX::keywordName = "DZMTRX";
const std::string DZMTRX::data::itemName = "data";
const double DZMTRX::data::defaultValue = 0.000000;


DZMTRXV::DZMTRXV( ) : ParserKeyword("DZMTRXV")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DZMTRXV");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(0) );
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DZMTRXV::keywordName = "DZMTRXV";
const std::string DZMTRXV::data::itemName = "data";
const double DZMTRXV::data::defaultValue = 0.000000;


DZNET::DZNET( ) : ParserKeyword("DZNET")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DZNET");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DZNET::keywordName = "DZNET";
const std::string DZNET::data::itemName = "data";


DZV::DZV( ) : ParserKeyword("DZV")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("DZV");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string DZV::keywordName = "DZV";
const std::string DZV::data::itemName = "data";


ECHO::ECHO( ) : ParserKeyword("ECHO")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("ECHO");
}
const std::string ECHO::keywordName = "ECHO";


ECLMC::ECLMC( ) : ParserKeyword("ECLMC")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("ECLMC");
}
const std::string ECLMC::keywordName = "ECLMC";


EDIT::EDIT( ) : ParserKeyword("EDIT")
{
  setFixedSize( (size_t) 0);
  clearDeckNames();
  addDeckName("EDIT");
}
const std::string EDIT::keywordName = "EDIT";


EDITNNC::EDITNNC( ) : ParserKeyword("EDITNNC")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("EDIT");
  clearDeckNames();
  addDeckName("EDITNNC");
  {
     ParserRecord record;
     {
        ParserItem item("I1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("I2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("TRAN_MULT", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("SAT_TABLE12", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("SAT_TABLE21", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("PRESS_TABLE12", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("PRESS_TABLE21", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("FACE_FLOW12", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("FACE_FLOW21", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("DIFFM", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string EDITNNC::keywordName = "EDITNNC";
const std::string EDITNNC::I1::itemName = "I1";
const std::string EDITNNC::J1::itemName = "J1";
const std::string EDITNNC::K1::itemName = "K1";
const std::string EDITNNC::I2::itemName = "I2";
const std::string EDITNNC::J2::itemName = "J2";
const std::string EDITNNC::K2::itemName = "K2";
const std::string EDITNNC::TRAN_MULT::itemName = "TRAN_MULT";
const std::string EDITNNC::SAT_TABLE12::itemName = "SAT_TABLE12";
const std::string EDITNNC::SAT_TABLE21::itemName = "SAT_TABLE21";
const std::string EDITNNC::PRESS_TABLE12::itemName = "PRESS_TABLE12";
const std::string EDITNNC::PRESS_TABLE21::itemName = "PRESS_TABLE21";
const std::string EDITNNC::FACE_FLOW12::itemName = "FACE_FLOW12";
const std::string EDITNNC::FACE_FLOW21::itemName = "FACE_FLOW21";
const std::string EDITNNC::DIFFM::itemName = "DIFFM";


EDITNNCR::EDITNNCR( ) : ParserKeyword("EDITNNCR")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("EDIT");
  clearDeckNames();
  addDeckName("EDITNNCR");
  {
     ParserRecord record;
     {
        ParserItem item("I1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("I2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("TRANS", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("SAT_TABLE12", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("SAT_TABLE21", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("PRESS_TABLE12", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("PRESS_TABLE21", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("FACE_FLOW12", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("FACE_FLOW21", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("DIFF", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string EDITNNCR::keywordName = "EDITNNCR";
const std::string EDITNNCR::I1::itemName = "I1";
const std::string EDITNNCR::J1::itemName = "J1";
const std::string EDITNNCR::K1::itemName = "K1";
const std::string EDITNNCR::I2::itemName = "I2";
const std::string EDITNNCR::J2::itemName = "J2";
const std::string EDITNNCR::K2::itemName = "K2";
const std::string EDITNNCR::TRANS::itemName = "TRANS";
const std::string EDITNNCR::SAT_TABLE12::itemName = "SAT_TABLE12";
const std::string EDITNNCR::SAT_TABLE21::itemName = "SAT_TABLE21";
const std::string EDITNNCR::PRESS_TABLE12::itemName = "PRESS_TABLE12";
const std::string EDITNNCR::PRESS_TABLE21::itemName = "PRESS_TABLE21";
const std::string EDITNNCR::FACE_FLOW12::itemName = "FACE_FLOW12";
const std::string EDITNNCR::FACE_FLOW21::itemName = "FACE_FLOW21";
const std::string EDITNNCR::DIFF::itemName = "DIFF";


EHYSTR::EHYSTR( ) : ParserKeyword("EHYSTR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("EHYSTR");
  {
     ParserRecord record;
     {
        ParserItem item("curvature_caplillary_pressure_hyst", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.100000) );
        record.addItem(item);
     }
     {
        ParserItem item("relative_perm_hyst", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("curvature_param_killough_wetting", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("mod_param_trapped", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.100000) );
        record.addItem(item);
     }
     {
        ParserItem item("limiting_hyst_flag", ParserItem::itype::STRING);
        item.setDefault( std::string("BOTH") );
        record.addItem(item);
     }
     {
        ParserItem item("shape_cap_press_flag", ParserItem::itype::STRING);
        item.setDefault( std::string("RETR") );
        record.addItem(item);
     }
     {
        ParserItem item("init_fluid_mob_flag", ParserItem::itype::STRING);
        item.setDefault( std::string("DRAIN") );
        record.addItem(item);
     }
     {
        ParserItem item("wetting_phase_flag", ParserItem::itype::STRING);
        item.setDefault( std::string("OIL") );
        record.addItem(item);
     }
     {
        ParserItem item("baker_flag_oil", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("baker_flag_gas", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("baker_flag_water", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("threshold_saturation", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string EHYSTR::keywordName = "EHYSTR";
const std::string EHYSTR::curvature_caplillary_pressure_hyst::itemName = "curvature_caplillary_pressure_hyst";
const double EHYSTR::curvature_caplillary_pressure_hyst::defaultValue = 0.100000;
const std::string EHYSTR::relative_perm_hyst::itemName = "relative_perm_hyst";
const int EHYSTR::relative_perm_hyst::defaultValue = 0;
const std::string EHYSTR::curvature_param_killough_wetting::itemName = "curvature_param_killough_wetting";
const double EHYSTR::curvature_param_killough_wetting::defaultValue = 1.000000;
const std::string EHYSTR::mod_param_trapped::itemName = "mod_param_trapped";
const double EHYSTR::mod_param_trapped::defaultValue = 0.100000;
const std::string EHYSTR::limiting_hyst_flag::itemName = "limiting_hyst_flag";
const std::string EHYSTR::limiting_hyst_flag::defaultValue = "BOTH";
const std::string EHYSTR::shape_cap_press_flag::itemName = "shape_cap_press_flag";
const std::string EHYSTR::shape_cap_press_flag::defaultValue = "RETR";
const std::string EHYSTR::init_fluid_mob_flag::itemName = "init_fluid_mob_flag";
const std::string EHYSTR::init_fluid_mob_flag::defaultValue = "DRAIN";
const std::string EHYSTR::wetting_phase_flag::itemName = "wetting_phase_flag";
const std::string EHYSTR::wetting_phase_flag::defaultValue = "OIL";
const std::string EHYSTR::baker_flag_oil::itemName = "baker_flag_oil";
const std::string EHYSTR::baker_flag_oil::defaultValue = "NO";
const std::string EHYSTR::baker_flag_gas::itemName = "baker_flag_gas";
const std::string EHYSTR::baker_flag_gas::defaultValue = "NO";
const std::string EHYSTR::baker_flag_water::itemName = "baker_flag_water";
const std::string EHYSTR::baker_flag_water::defaultValue = "NO";
const std::string EHYSTR::threshold_saturation::itemName = "threshold_saturation";
const double EHYSTR::threshold_saturation::defaultValue = 0.000000;


EHYSTRR::EHYSTRR( ) : ParserKeyword("EHYSTRR")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("EHYSTRR");
  {
     ParserRecord record;
     {
        ParserItem item("curvature_caplillary_pressure_hyst", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.100000) );
        record.addItem(item);
     }
     {
        ParserItem item("curvature_parameter_wetting_phase_hyst", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("mod_param_non_wet_phase_sat", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.100000) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string EHYSTRR::keywordName = "EHYSTRR";
const std::string EHYSTRR::curvature_caplillary_pressure_hyst::itemName = "curvature_caplillary_pressure_hyst";
const double EHYSTRR::curvature_caplillary_pressure_hyst::defaultValue = 0.100000;
const std::string EHYSTRR::curvature_parameter_wetting_phase_hyst::itemName = "curvature_parameter_wetting_phase_hyst";
const double EHYSTRR::curvature_parameter_wetting_phase_hyst::defaultValue = 1.000000;
const std::string EHYSTRR::mod_param_non_wet_phase_sat::itemName = "mod_param_non_wet_phase_sat";
const double EHYSTRR::mod_param_non_wet_phase_sat::defaultValue = 0.100000;


END::END( ) : ParserKeyword("END")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("END");
}
const std::string END::keywordName = "END";


ENDACTIO::ENDACTIO( ) : ParserKeyword("ENDACTIO")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("ENDACTIO");
}
const std::string ENDACTIO::keywordName = "ENDACTIO";


ENDBOX::ENDBOX( ) : ParserKeyword("ENDBOX")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("ENDBOX");
}
const std::string ENDBOX::keywordName = "ENDBOX";


ENDDYN::ENDDYN( ) : ParserKeyword("ENDDYN")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("ENDDYN");
}
const std::string ENDDYN::keywordName = "ENDDYN";


ENDFIN::ENDFIN( ) : ParserKeyword("ENDFIN")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("ENDFIN");
}
const std::string ENDFIN::keywordName = "ENDFIN";


ENDINC::ENDINC( ) : ParserKeyword("ENDINC")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("ENDINC");
}
const std::string ENDINC::keywordName = "ENDINC";


ENDNUM::ENDNUM( ) : ParserKeyword("ENDNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("ENDNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string ENDNUM::keywordName = "ENDNUM";
const std::string ENDNUM::data::itemName = "data";


ENDPOINT_SPECIFIERS::ENDPOINT_SPECIFIERS( ) : ParserKeyword("ENDPOINT_SPECIFIERS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("IKRG");
  addDeckName("IKRGR");
  addDeckName("IKRGRX");
  addDeckName("IKRGRX-");
  addDeckName("IKRGRY");
  addDeckName("IKRGRY-");
  addDeckName("IKRGRZ");
  addDeckName("IKRGRZ-");
  addDeckName("IKRGX");
  addDeckName("IKRGX-");
  addDeckName("IKRGY");
  addDeckName("IKRGY-");
  addDeckName("IKRGZ");
  addDeckName("IKRGZ-");
  addDeckName("IKRO");
  addDeckName("IKRORG");
  addDeckName("IKRORGX");
  addDeckName("IKRORGX-");
  addDeckName("IKRORGY");
  addDeckName("IKRORGY-");
  addDeckName("IKRORGZ");
  addDeckName("IKRORGZ-");
  addDeckName("IKRORW");
  addDeckName("IKRORWX");
  addDeckName("IKRORWX-");
  addDeckName("IKRORWY");
  addDeckName("IKRORWY-");
  addDeckName("IKRORWZ");
  addDeckName("IKRORWZ-");
  addDeckName("IKROX-");
  addDeckName("IKROY-");
  addDeckName("IKROZ-");
  addDeckName("IKRW");
  addDeckName("IKRWR");
  addDeckName("IKRWRX");
  addDeckName("IKRWRX-");
  addDeckName("IKRWRY");
  addDeckName("IKRWRY-");
  addDeckName("IKRWRZ");
  addDeckName("IKRWRZ-");
  addDeckName("IKRWX");
  addDeckName("IKRWX-");
  addDeckName("IKRWY");
  addDeckName("IKRWY-");
  addDeckName("IKRWZ");
  addDeckName("IKRWZ-");
  addDeckName("ISGCR");
  addDeckName("ISGCRX");
  addDeckName("ISGCRX-");
  addDeckName("ISGCRY");
  addDeckName("ISGCRY-");
  addDeckName("ISGCRZ");
  addDeckName("ISGCRZ-");
  addDeckName("ISGU");
  addDeckName("ISGUX");
  addDeckName("ISGUX-");
  addDeckName("ISGUY");
  addDeckName("ISGUY-");
  addDeckName("ISGUZ");
  addDeckName("ISGUZ-");
  addDeckName("ISOGCR");
  addDeckName("ISOGCRX");
  addDeckName("ISOGCRX-");
  addDeckName("ISOGCRY");
  addDeckName("ISOGCRY-");
  addDeckName("ISOGCRZ");
  addDeckName("ISOGCRZ-");
  addDeckName("ISOWCR");
  addDeckName("ISOWCRX");
  addDeckName("ISOWCRX-");
  addDeckName("ISOWCRY");
  addDeckName("ISOWCRY-");
  addDeckName("ISOWCRZ");
  addDeckName("ISOWCRZ-");
  addDeckName("ISWCR");
  addDeckName("ISWCRX");
  addDeckName("ISWCRX-");
  addDeckName("ISWCRZ");
  addDeckName("ISWCRZ-");
  addDeckName("ISWL");
  addDeckName("ISWLX");
  addDeckName("ISWLX-");
  addDeckName("ISWLY");
  addDeckName("ISWLY-");
  addDeckName("ISWLZ");
  addDeckName("ISWLZ-");
  addDeckName("ISWU");
  addDeckName("ISWUX");
  addDeckName("ISWUX-");
  addDeckName("ISWUY");
  addDeckName("ISWUY-");
  addDeckName("ISWUZ");
  addDeckName("ISWUZ-");
  addDeckName("KRG");
  addDeckName("KRGR");
  addDeckName("KRGRX");
  addDeckName("KRGRX-");
  addDeckName("KRGRY");
  addDeckName("KRGRY-");
  addDeckName("KRGRZ");
  addDeckName("KRGRZ-");
  addDeckName("KRGX");
  addDeckName("KRGX-");
  addDeckName("KRGY");
  addDeckName("KRGY-");
  addDeckName("KRGZ");
  addDeckName("KRGZ-");
  addDeckName("KRO");
  addDeckName("KRORG");
  addDeckName("KRORGX");
  addDeckName("KRORGX-");
  addDeckName("KRORGY");
  addDeckName("KRORGY-");
  addDeckName("KRORGZ");
  addDeckName("KRORGZ-");
  addDeckName("KRORW");
  addDeckName("KRORWX");
  addDeckName("KRORWX-");
  addDeckName("KRORWY");
  addDeckName("KRORWY-");
  addDeckName("KRORWZ");
  addDeckName("KRORWZ-");
  addDeckName("KROX");
  addDeckName("KROX-");
  addDeckName("KROY");
  addDeckName("KROY-");
  addDeckName("KROZ");
  addDeckName("KROZ-");
  addDeckName("KRW");
  addDeckName("KRWR");
  addDeckName("KRWRX");
  addDeckName("KRWRX-");
  addDeckName("KRWRY");
  addDeckName("KRWRY-");
  addDeckName("KRWRZ");
  addDeckName("KRWRZ-");
  addDeckName("KRWX");
  addDeckName("KRWX-");
  addDeckName("KRWY");
  addDeckName("KRWY-");
  addDeckName("KRWZ");
  addDeckName("KRWZ-");
  addDeckName("SGCR");
  addDeckName("SGCRX");
  addDeckName("SGCRX-");
  addDeckName("SGCRY");
  addDeckName("SGCRY-");
  addDeckName("SGCRZ");
  addDeckName("SGCRZ-");
  addDeckName("SGU");
  addDeckName("SGUX");
  addDeckName("SGUX-");
  addDeckName("SGUY");
  addDeckName("SGUY-");
  addDeckName("SGUZ");
  addDeckName("SGUZ-");
  addDeckName("SOGCR");
  addDeckName("SOGCRX");
  addDeckName("SOGCRX-");
  addDeckName("SOGCRY");
  addDeckName("SOGCRY-");
  addDeckName("SOGCRZ");
  addDeckName("SOGCRZ-");
  addDeckName("SOWCR");
  addDeckName("SOWCRX");
  addDeckName("SOWCRX-");
  addDeckName("SOWCRY");
  addDeckName("SOWCRY-");
  addDeckName("SOWCRZ");
  addDeckName("SOWCRZ-");
  addDeckName("SWCR");
  addDeckName("SWCRX");
  addDeckName("SWCRX-");
  addDeckName("SWCRY");
  addDeckName("SWCRY-");
  addDeckName("SWCRZ");
  addDeckName("SWCRZ-");
  addDeckName("SWL");
  addDeckName("SWLX");
  addDeckName("SWLX-");
  addDeckName("SWLY");
  addDeckName("SWLY-");
  addDeckName("SWLZ");
  addDeckName("SWLZ-");
  addDeckName("SWU");
  addDeckName("SWUX");
  addDeckName("SWUX-");
  addDeckName("SWUY");
  addDeckName("SWUY-");
  addDeckName("SWUZ");
  addDeckName("SWUZ-");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string ENDPOINT_SPECIFIERS::keywordName = "ENDPOINT_SPECIFIERS";
const std::string ENDPOINT_SPECIFIERS::data::itemName = "data";


ENDSCALE::ENDSCALE( ) : ParserKeyword("ENDSCALE")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("ENDSCALE");
  {
     ParserRecord record;
     {
        ParserItem item("DIRECT", ParserItem::itype::STRING);
        item.setDefault( std::string("NODIR") );
        record.addItem(item);
     }
     {
        ParserItem item("IRREVERS", ParserItem::itype::STRING);
        item.setDefault( std::string("REVER") );
        record.addItem(item);
     }
     {
        ParserItem item("NUM_TABLES", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NUM_NODES", ParserItem::itype::INT);
        item.setDefault( 20 );
        record.addItem(item);
     }
     {
        ParserItem item("COMB_MODE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ENDSCALE::keywordName = "ENDSCALE";
const std::string ENDSCALE::DIRECT::itemName = "DIRECT";
const std::string ENDSCALE::DIRECT::defaultValue = "NODIR";
const std::string ENDSCALE::IRREVERS::itemName = "IRREVERS";
const std::string ENDSCALE::IRREVERS::defaultValue = "REVER";
const std::string ENDSCALE::NUM_TABLES::itemName = "NUM_TABLES";
const int ENDSCALE::NUM_TABLES::defaultValue = 1;
const std::string ENDSCALE::NUM_NODES::itemName = "NUM_NODES";
const int ENDSCALE::NUM_NODES::defaultValue = 20;
const std::string ENDSCALE::COMB_MODE::itemName = "COMB_MODE";
const int ENDSCALE::COMB_MODE::defaultValue = 0;


ENDSKIP::ENDSKIP( ) : ParserKeyword("ENDSKIP")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("ENDSKIP");
}
const std::string ENDSKIP::keywordName = "ENDSKIP";


ENKRVD::ENKRVD( ) : ParserKeyword("ENKRVD")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("ENDSCALE","NUM_TABLES",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ENKRVD");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(-1.000000) );
        item.push_backDimension("Length");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ENKRVD::keywordName = "ENKRVD";
const std::string ENKRVD::DATA::itemName = "DATA";
const double ENKRVD::DATA::defaultValue = -1.000000;


ENPCVD::ENPCVD( ) : ParserKeyword("ENPCVD")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("ENDSCALE","NUM_TABLES",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ENPCVD");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(-1.000000) );
        item.push_backDimension("Length");
        item.push_backDimension("Pressure");
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ENPCVD::keywordName = "ENPCVD";
const std::string ENPCVD::DATA::itemName = "DATA";
const double ENPCVD::DATA::defaultValue = -1.000000;


ENPTVD::ENPTVD( ) : ParserKeyword("ENPTVD")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("ENDSCALE","NUM_TABLES",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ENPTVD");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(-1.000000) );
        item.push_backDimension("Length");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ENPTVD::keywordName = "ENPTVD";
const std::string ENPTVD::DATA::itemName = "DATA";
const double ENPTVD::DATA::defaultValue = -1.000000;


ENSPCVD::ENSPCVD( ) : ParserKeyword("ENSPCVD")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("ENDSCALE","NUM_TABLES",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ENSPCVD");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(-1.000000) );
        item.push_backDimension("Length");
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ENSPCVD::keywordName = "ENSPCVD";
const std::string ENSPCVD::DATA::itemName = "DATA";
const double ENSPCVD::DATA::defaultValue = -1.000000;


EPSDBGS::EPSDBGS( ) : ParserKeyword("EPSDBGS")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("PROPS");
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("EPSDBGS");
  {
     ParserRecord record;
     {
        ParserItem item("TABLE_OUTPUT", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("CHECK_DRAIN_HYST", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("IX1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IX2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JY1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JY2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("KZ1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("KZ2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("GRID_NAME", ParserItem::itype::STRING);
        item.setDefault( std::string("") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string EPSDBGS::keywordName = "EPSDBGS";
const std::string EPSDBGS::TABLE_OUTPUT::itemName = "TABLE_OUTPUT";
const int EPSDBGS::TABLE_OUTPUT::defaultValue = 0;
const std::string EPSDBGS::CHECK_DRAIN_HYST::itemName = "CHECK_DRAIN_HYST";
const int EPSDBGS::CHECK_DRAIN_HYST::defaultValue = 0;
const std::string EPSDBGS::IX1::itemName = "IX1";
const std::string EPSDBGS::IX2::itemName = "IX2";
const std::string EPSDBGS::JY1::itemName = "JY1";
const std::string EPSDBGS::JY2::itemName = "JY2";
const std::string EPSDBGS::KZ1::itemName = "KZ1";
const std::string EPSDBGS::KZ2::itemName = "KZ2";
const std::string EPSDBGS::GRID_NAME::itemName = "GRID_NAME";
const std::string EPSDBGS::GRID_NAME::defaultValue = "";


EPSDEBUG::EPSDEBUG( ) : ParserKeyword("EPSDEBUG")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("EPSDEBUG");
  {
     ParserRecord record;
     {
        ParserItem item("IX1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IX2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JY1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JY2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("KZ1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("KZ2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("TABLE_OUTPUT", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("GRID_NAME", ParserItem::itype::STRING);
        item.setDefault( std::string("") );
        record.addItem(item);
     }
     {
        ParserItem item("CHECK_DRAIN_HYST", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string EPSDEBUG::keywordName = "EPSDEBUG";
const std::string EPSDEBUG::IX1::itemName = "IX1";
const std::string EPSDEBUG::IX2::itemName = "IX2";
const std::string EPSDEBUG::JY1::itemName = "JY1";
const std::string EPSDEBUG::JY2::itemName = "JY2";
const std::string EPSDEBUG::KZ1::itemName = "KZ1";
const std::string EPSDEBUG::KZ2::itemName = "KZ2";
const std::string EPSDEBUG::TABLE_OUTPUT::itemName = "TABLE_OUTPUT";
const int EPSDEBUG::TABLE_OUTPUT::defaultValue = 0;
const std::string EPSDEBUG::GRID_NAME::itemName = "GRID_NAME";
const std::string EPSDEBUG::GRID_NAME::defaultValue = "";
const std::string EPSDEBUG::CHECK_DRAIN_HYST::itemName = "CHECK_DRAIN_HYST";
const int EPSDEBUG::CHECK_DRAIN_HYST::defaultValue = 0;


EQLDIMS::EQLDIMS( ) : ParserKeyword("EQLDIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("EQLDIMS");
  {
     ParserRecord record;
     {
        ParserItem item("NTEQUL", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("DEPTH_NODES_P", ParserItem::itype::INT);
        item.setDefault( 100 );
        record.addItem(item);
     }
     {
        ParserItem item("DEPTH_NODES_TAB", ParserItem::itype::INT);
        item.setDefault( 20 );
        record.addItem(item);
     }
     {
        ParserItem item("NTTRVD", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NSTRVD", ParserItem::itype::INT);
        item.setDefault( 20 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string EQLDIMS::keywordName = "EQLDIMS";
const std::string EQLDIMS::NTEQUL::itemName = "NTEQUL";
const int EQLDIMS::NTEQUL::defaultValue = 1;
const std::string EQLDIMS::DEPTH_NODES_P::itemName = "DEPTH_NODES_P";
const int EQLDIMS::DEPTH_NODES_P::defaultValue = 100;
const std::string EQLDIMS::DEPTH_NODES_TAB::itemName = "DEPTH_NODES_TAB";
const int EQLDIMS::DEPTH_NODES_TAB::defaultValue = 20;
const std::string EQLDIMS::NTTRVD::itemName = "NTTRVD";
const int EQLDIMS::NTTRVD::defaultValue = 1;
const std::string EQLDIMS::NSTRVD::itemName = "NSTRVD";
const int EQLDIMS::NSTRVD::defaultValue = 20;


EQLNUM::EQLNUM( ) : ParserKeyword("EQLNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("EQLNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string EQLNUM::keywordName = "EQLNUM";
const std::string EQLNUM::data::itemName = "data";


EQLOPTS::EQLOPTS( ) : ParserKeyword("EQLOPTS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("EQLOPTS");
  {
     ParserRecord record;
     {
        ParserItem item("OPTION1", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("OPTION2", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("OPTION3", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("OPTION4", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string EQLOPTS::keywordName = "EQLOPTS";
const std::string EQLOPTS::OPTION1::itemName = "OPTION1";
const std::string EQLOPTS::OPTION2::itemName = "OPTION2";
const std::string EQLOPTS::OPTION3::itemName = "OPTION3";
const std::string EQLOPTS::OPTION4::itemName = "OPTION4";


EQLZCORN::EQLZCORN( ) : ParserKeyword("EQLZCORN")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("EQLZCORN");
  {
     ParserRecord record;
     {
        ParserItem item("VALUE_ZCORN_ARRAY", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("IX1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IX2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JY1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JY2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("KZ1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("KZ2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IX1A", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IX2A", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JY1A", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JY2A", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("ACTION_REQ", ParserItem::itype::STRING);
        item.setDefault( std::string("TOP") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string EQLZCORN::keywordName = "EQLZCORN";
const std::string EQLZCORN::VALUE_ZCORN_ARRAY::itemName = "VALUE_ZCORN_ARRAY";
const std::string EQLZCORN::IX1::itemName = "IX1";
const std::string EQLZCORN::IX2::itemName = "IX2";
const std::string EQLZCORN::JY1::itemName = "JY1";
const std::string EQLZCORN::JY2::itemName = "JY2";
const std::string EQLZCORN::KZ1::itemName = "KZ1";
const std::string EQLZCORN::KZ2::itemName = "KZ2";
const std::string EQLZCORN::IX1A::itemName = "IX1A";
const std::string EQLZCORN::IX2A::itemName = "IX2A";
const std::string EQLZCORN::JY1A::itemName = "JY1A";
const std::string EQLZCORN::JY2A::itemName = "JY2A";
const std::string EQLZCORN::ACTION_REQ::itemName = "ACTION_REQ";
const std::string EQLZCORN::ACTION_REQ::defaultValue = "TOP";


EQUALREG::EQUALREG( ) : ParserKeyword("EQUALREG")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("EQUALREG");
  {
     ParserRecord record;
     {
        ParserItem item("ARRAY", ParserItem::itype::STRING);
        item.setDescription("The 3D array we will update");
        record.addItem(item);
     }
     {
        ParserItem item("VALUE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.setDescription("The value we will assign");
        record.addItem(item);
     }
     {
        ParserItem item("REGION_NUMBER", ParserItem::itype::INT);
        item.setDescription("The region number we are interested in");
        record.addItem(item);
     }
     {
        ParserItem item("REGION_NAME", ParserItem::itype::STRING);
        item.setDefault( std::string("M") );
        item.setDescription("The name of the region we are interested in");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string EQUALREG::keywordName = "EQUALREG";
const std::string EQUALREG::ARRAY::itemName = "ARRAY";
const std::string EQUALREG::VALUE::itemName = "VALUE";
const double EQUALREG::VALUE::defaultValue = 0.000000;
const std::string EQUALREG::REGION_NUMBER::itemName = "REGION_NUMBER";
const std::string EQUALREG::REGION_NAME::itemName = "REGION_NAME";
const std::string EQUALREG::REGION_NAME::defaultValue = "M";


EQUALS::EQUALS( ) : ParserKeyword("EQUALS")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("EQUALS");
  {
     ParserRecord record;
     {
        ParserItem item("field", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("value", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("I1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("I2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string EQUALS::keywordName = "EQUALS";
const std::string EQUALS::field::itemName = "field";
const std::string EQUALS::value::itemName = "value";
const std::string EQUALS::I1::itemName = "I1";
const std::string EQUALS::I2::itemName = "I2";
const std::string EQUALS::J1::itemName = "J1";
const std::string EQUALS::J2::itemName = "J2";
const std::string EQUALS::K1::itemName = "K1";
const std::string EQUALS::K2::itemName = "K2";


EQUIL::EQUIL( ) : ParserKeyword("EQUIL")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("EQLDIMS","NTEQUL",0);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("EQUIL");
  {
     ParserRecord record;
     {
        ParserItem item("DATUM_DEPTH", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("DATUM_PRESSURE", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("OWC", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Length");
        item.setDescription("The OWC item is depth of the OIL Water contact. This should ...");
        record.addItem(item);
     }
     {
        ParserItem item("PC_OWC", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("GOC", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("PC_GOC", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("BLACK_OIL_INIT", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("BLACK_OIL_INIT_WG", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("OIP_INIT", ParserItem::itype::INT);
        item.setDefault( -5 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string EQUIL::keywordName = "EQUIL";
const std::string EQUIL::DATUM_DEPTH::itemName = "DATUM_DEPTH";
const double EQUIL::DATUM_DEPTH::defaultValue = 0.000000;
const std::string EQUIL::DATUM_PRESSURE::itemName = "DATUM_PRESSURE";
const std::string EQUIL::OWC::itemName = "OWC";
const double EQUIL::OWC::defaultValue = 0.000000;
const std::string EQUIL::PC_OWC::itemName = "PC_OWC";
const double EQUIL::PC_OWC::defaultValue = 0.000000;
const std::string EQUIL::GOC::itemName = "GOC";
const double EQUIL::GOC::defaultValue = 0.000000;
const std::string EQUIL::PC_GOC::itemName = "PC_GOC";
const double EQUIL::PC_GOC::defaultValue = 0.000000;
const std::string EQUIL::BLACK_OIL_INIT::itemName = "BLACK_OIL_INIT";
const int EQUIL::BLACK_OIL_INIT::defaultValue = 0;
const std::string EQUIL::BLACK_OIL_INIT_WG::itemName = "BLACK_OIL_INIT_WG";
const int EQUIL::BLACK_OIL_INIT_WG::defaultValue = 0;
const std::string EQUIL::OIP_INIT::itemName = "OIP_INIT";
const int EQUIL::OIP_INIT::defaultValue = -5;


ESSNODE::ESSNODE( ) : ParserKeyword("ESSNODE")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ESSNODE");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Density");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ESSNODE::keywordName = "ESSNODE";
const std::string ESSNODE::DATA::itemName = "DATA";


EXCAVATE::EXCAVATE( ) : ParserKeyword("EXCAVATE")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("EXCAVATE");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string EXCAVATE::keywordName = "EXCAVATE";
const std::string EXCAVATE::DATA::itemName = "DATA";


EXCEL::EXCEL( ) : ParserKeyword("EXCEL")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("EXCEL");
}
const std::string EXCEL::keywordName = "EXCEL";


EXTFIN::EXTFIN( ) : ParserKeyword("EXTFIN")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("EXTFIN");
  {
     ParserRecord record;
     {
        ParserItem item("LOCAL_GRID_REF", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("NX", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NY", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NZ", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NREPG", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NHALO", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NFLOG", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NUMINT", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NUMCON", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NWMAX", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string EXTFIN::keywordName = "EXTFIN";
const std::string EXTFIN::LOCAL_GRID_REF::itemName = "LOCAL_GRID_REF";
const std::string EXTFIN::NX::itemName = "NX";
const std::string EXTFIN::NY::itemName = "NY";
const std::string EXTFIN::NZ::itemName = "NZ";
const std::string EXTFIN::NREPG::itemName = "NREPG";
const std::string EXTFIN::NHALO::itemName = "NHALO";
const std::string EXTFIN::NFLOG::itemName = "NFLOG";
const std::string EXTFIN::NUMINT::itemName = "NUMINT";
const std::string EXTFIN::NUMCON::itemName = "NUMCON";
const std::string EXTFIN::NWMAX::itemName = "NWMAX";


EXTHOST::EXTHOST( ) : ParserKeyword("EXTHOST")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("EXTHOST");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string EXTHOST::keywordName = "EXTHOST";
const std::string EXTHOST::data::itemName = "data";


EXTRAPMS::EXTRAPMS( ) : ParserKeyword("EXTRAPMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("EXTRAPMS");
  {
     ParserRecord record;
     {
        ParserItem item("LEVEL", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string EXTRAPMS::keywordName = "EXTRAPMS";
const std::string EXTRAPMS::LEVEL::itemName = "LEVEL";
const int EXTRAPMS::LEVEL::defaultValue = 0;


EXTREPGL::EXTREPGL( ) : ParserKeyword("EXTREPGL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("EXTREPGL");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string EXTREPGL::keywordName = "EXTREPGL";
const std::string EXTREPGL::data::itemName = "data";


FAULTDIM::FAULTDIM( ) : ParserKeyword("FAULTDIM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("FAULTDIM");
  {
     ParserRecord record;
     {
        ParserItem item("MFSEGS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string FAULTDIM::keywordName = "FAULTDIM";
const std::string FAULTDIM::MFSEGS::itemName = "MFSEGS";
const int FAULTDIM::MFSEGS::defaultValue = 0;


FAULTS::FAULTS( ) : ParserKeyword("FAULTS")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("FAULTS");
  {
     ParserRecord record;
     {
        ParserItem item("NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("IX1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IX2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IY1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IY2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IZ1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IZ2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("FACE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string FAULTS::keywordName = "FAULTS";
const std::string FAULTS::NAME::itemName = "NAME";
const std::string FAULTS::IX1::itemName = "IX1";
const std::string FAULTS::IX2::itemName = "IX2";
const std::string FAULTS::IY1::itemName = "IY1";
const std::string FAULTS::IY2::itemName = "IY2";
const std::string FAULTS::IZ1::itemName = "IZ1";
const std::string FAULTS::IZ2::itemName = "IZ2";
const std::string FAULTS::FACE::itemName = "FACE";


FBHPDEF::FBHPDEF( ) : ParserKeyword("FBHPDEF")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("FBHPDEF");
  {
     ParserRecord record;
     {
        ParserItem item("TARGET_BHP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("LIMIT_BHP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string FBHPDEF::keywordName = "FBHPDEF";
const std::string FBHPDEF::TARGET_BHP::itemName = "TARGET_BHP";
const std::string FBHPDEF::LIMIT_BHP::itemName = "LIMIT_BHP";


FHERCHBL::FHERCHBL( ) : ParserKeyword("FHERCHBL")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("NNEWTF","NTHRBL",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("FHERCHBL");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Density");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string FHERCHBL::keywordName = "FHERCHBL";
const std::string FHERCHBL::DATA::itemName = "DATA";


FIELD::FIELD( ) : ParserKeyword("FIELD")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("FIELD");
}
const std::string FIELD::keywordName = "FIELD";


FIELD_PROBE::FIELD_PROBE( ) : ParserKeyword("FIELD_PROBE")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("FAPI");
  addDeckName("FAQR");
  addDeckName("FAQRG");
  addDeckName("FAQT");
  addDeckName("FAQTG");
  addDeckName("FCAD");
  addDeckName("FCGC");
  addDeckName("FCIC");
  addDeckName("FCIP");
  addDeckName("FCIR");
  addDeckName("FCIT");
  addDeckName("FCPC");
  addDeckName("FCPR");
  addDeckName("FCPT");
  addDeckName("FCSC");
  addDeckName("FEPR");
  addDeckName("FEPT");
  addDeckName("FGCR");
  addDeckName("FGCT");
  addDeckName("FGDC");
  addDeckName("FGDCQ");
  addDeckName("FGDEN");
  addDeckName("FGIMR");
  addDeckName("FGIMT");
  addDeckName("FGIP");
  addDeckName("FGIPG");
  addDeckName("FGIPL");
  addDeckName("FGIR");
  addDeckName("FGIRH");
  addDeckName("FGIRT");
  addDeckName("FGIT");
  addDeckName("FGITH");
  addDeckName("FGLIR");
  addDeckName("FGLR");
  addDeckName("FGLRH");
  addDeckName("FGOR");
  addDeckName("FGORH");
  addDeckName("FGPI");
  addDeckName("FGPI2");
  addDeckName("FGPP");
  addDeckName("FGPP2");
  addDeckName("FGPPF");
  addDeckName("FGPPF2");
  addDeckName("FGPPS");
  addDeckName("FGPPS2");
  addDeckName("FGPR");
  addDeckName("FGPRF");
  addDeckName("FGPRH");
  addDeckName("FGPRS");
  addDeckName("FGPRT");
  addDeckName("FGPT");
  addDeckName("FGPTF");
  addDeckName("FGPTH");
  addDeckName("FGPTS");
  addDeckName("FGPV");
  addDeckName("FGQ");
  addDeckName("FGSAT");
  addDeckName("FGSPR");
  addDeckName("FGSR");
  addDeckName("FGSRL");
  addDeckName("FGSRU");
  addDeckName("FGSSP");
  addDeckName("FGST");
  addDeckName("FGSTP");
  addDeckName("FGVIS");
  addDeckName("FHPV");
  addDeckName("FJPR");
  addDeckName("FJPRH");
  addDeckName("FJPRT");
  addDeckName("FJPT");
  addDeckName("FJPTH");
  addDeckName("FLPR");
  addDeckName("FLPRH");
  addDeckName("FLPRT");
  addDeckName("FLPT");
  addDeckName("FLPTH");
  addDeckName("FMCTG");
  addDeckName("FMCTP");
  addDeckName("FMCTW");
  addDeckName("FMIR");
  addDeckName("FMIT");
  addDeckName("FMPR");
  addDeckName("FMPT");
  addDeckName("FMWDR");
  addDeckName("FMWDT");
  addDeckName("FMWIA");
  addDeckName("FMWIG");
  addDeckName("FMWIN");
  addDeckName("FMWIP");
  addDeckName("FMWIS");
  addDeckName("FMWIT");
  addDeckName("FMWIU");
  addDeckName("FMWIV");
  addDeckName("FMWPA");
  addDeckName("FMWPG");
  addDeckName("FMWPL");
  addDeckName("FMWPO");
  addDeckName("FMWPP");
  addDeckName("FMWPR");
  addDeckName("FMWPS");
  addDeckName("FMWPT");
  addDeckName("FMWPU");
  addDeckName("FMWPV");
  addDeckName("FMWWO");
  addDeckName("FMWWT");
  addDeckName("FNIP");
  addDeckName("FNIR");
  addDeckName("FNIT");
  addDeckName("FNPR");
  addDeckName("FNPT");
  addDeckName("FNQR");
  addDeckName("FNQT");
  addDeckName("FODEN");
  addDeckName("FOE");
  addDeckName("FOEIG");
  addDeckName("FOEIW");
  addDeckName("FOEW");
  addDeckName("FOEWG");
  addDeckName("FOEWW");
  addDeckName("FOGR");
  addDeckName("FOGRH");
  addDeckName("FOIP");
  addDeckName("FOIPG");
  addDeckName("FOIPL");
  addDeckName("FOIR");
  addDeckName("FOIRH");
  addDeckName("FOIRT");
  addDeckName("FOIT");
  addDeckName("FOITH");
  addDeckName("FOPI");
  addDeckName("FOPI2");
  addDeckName("FOPP");
  addDeckName("FOPP2");
  addDeckName("FOPR");
  addDeckName("FOPRF");
  addDeckName("FOPRH");
  addDeckName("FOPRS");
  addDeckName("FOPRT");
  addDeckName("FOPT");
  addDeckName("FOPTF");
  addDeckName("FOPTH");
  addDeckName("FOPTS");
  addDeckName("FOPV");
  addDeckName("FORFE");
  addDeckName("FORFF");
  addDeckName("FORFG");
  addDeckName("FORFR");
  addDeckName("FORFS");
  addDeckName("FORFW");
  addDeckName("FORFX");
  addDeckName("FORFY");
  addDeckName("FORME");
  addDeckName("FORMF");
  addDeckName("FORMG");
  addDeckName("FORMR");
  addDeckName("FORMS");
  addDeckName("FORMW");
  addDeckName("FORMX");
  addDeckName("FORMY");
  addDeckName("FOSAT");
  addDeckName("FOSPR");
  addDeckName("FOSRL");
  addDeckName("FOSRU");
  addDeckName("FOSSP");
  addDeckName("FOSTP");
  addDeckName("FOVIS");
  addDeckName("FPPC");
  addDeckName("FPPG");
  addDeckName("FPPO");
  addDeckName("FPPW");
  addDeckName("FPR");
  addDeckName("FPRGZ");
  addDeckName("FPRH");
  addDeckName("FPRP");
  addDeckName("FRPV");
  addDeckName("FRS");
  addDeckName("FRTM");
  addDeckName("FRV");
  addDeckName("FSGR");
  addDeckName("FSGT");
  addDeckName("FSIC");
  addDeckName("FSIP");
  addDeckName("FSIR");
  addDeckName("FSIT");
  addDeckName("FSPC");
  addDeckName("FSPR");
  addDeckName("FSPT");
  addDeckName("FTADSFOA");
  addDeckName("FTADSUR");
  addDeckName("FTDCYFOA");
  addDeckName("FTICHEA");
  addDeckName("FTIPTFOA");
  addDeckName("FTIPTHEA");
  addDeckName("FTIPTSUR");
  addDeckName("FTIRALK");
  addDeckName("FTIRANI");
  addDeckName("FTIRCAT");
  addDeckName("FTIRFOA");
  addDeckName("FTIRHEA");
  addDeckName("FTIRSUR");
  addDeckName("FTITALK");
  addDeckName("FTITANI");
  addDeckName("FTITCAT");
  addDeckName("FTITFOA");
  addDeckName("FTITHEA");
  addDeckName("FTITSUR");
  addDeckName("FTMOBFOA");
  addDeckName("FTPCHEA");
  addDeckName("FTPRALK");
  addDeckName("FTPRANI");
  addDeckName("FTPRCAT");
  addDeckName("FTPRFOA");
  addDeckName("FTPRHEA");
  addDeckName("FTPRSUR");
  addDeckName("FTPTALK");
  addDeckName("FTPTANI");
  addDeckName("FTPTCAT");
  addDeckName("FTPTFOA");
  addDeckName("FTPTHEA");
  addDeckName("FTPTSUR");
  addDeckName("FVIR");
  addDeckName("FVIRT");
  addDeckName("FVIT");
  addDeckName("FVPR");
  addDeckName("FVPRT");
  addDeckName("FVPT");
  addDeckName("FWCT");
  addDeckName("FWCTH");
  addDeckName("FWDEN");
  addDeckName("FWGR");
  addDeckName("FWGRH");
  addDeckName("FWIP");
  addDeckName("FWIR");
  addDeckName("FWIRH");
  addDeckName("FWIRT");
  addDeckName("FWIT");
  addDeckName("FWITH");
  addDeckName("FWPI");
  addDeckName("FWPI2");
  addDeckName("FWPIR");
  addDeckName("FWPP");
  addDeckName("FWPP2");
  addDeckName("FWPR");
  addDeckName("FWPRH");
  addDeckName("FWPRT");
  addDeckName("FWPT");
  addDeckName("FWPTH");
  addDeckName("FWPV");
  addDeckName("FWSAT");
  addDeckName("FWSPR");
  addDeckName("FWSRL");
  addDeckName("FWSRU");
  addDeckName("FWSSP");
  addDeckName("FWSTP");
  addDeckName("FWVIS");
  addDeckName("PSSPR");
  addDeckName("PSSSC");
  addDeckName("PSSSG");
  addDeckName("PSSSO");
  addDeckName("PSSSW");
  setMatchRegex("FU.+|FTPR.+|FTPT.+|FTPC.+|FTIR.+|FTIT.+|FTIC.+|FTIPT.+|FTIPF.+|FTIPS|FTIP[1-9][0-9]*.+|FTPR.+|FTPT.+|FTPC.+|FTIR.+|FTIT.+|FTIC.+|FTADS.+|FTDCY.+|FTIRF.+|FTIRS.+|FTPRF.+|FTPRS.+|FTITF.+|FTITS.+|FTPTF.+|FTPTS.+|FTICF.+|FTICS.+|FTPCF.+|FTPCS.+");
}
const std::string FIELD_PROBE::keywordName = "FIELD_PROBE";


FILEUNIT::FILEUNIT( ) : ParserKeyword("FILEUNIT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("FILEUNIT");
  {
     ParserRecord record;
     {
        ParserItem item("FILE_UNIT_SYSTEM", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string FILEUNIT::keywordName = "FILEUNIT";
const std::string FILEUNIT::FILE_UNIT_SYSTEM::itemName = "FILE_UNIT_SYSTEM";


FILLEPS::FILLEPS( ) : ParserKeyword("FILLEPS")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("FILLEPS");
}
const std::string FILLEPS::keywordName = "FILLEPS";


FIPNUM::FIPNUM( ) : ParserKeyword("FIPNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("FIPNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string FIPNUM::keywordName = "FIPNUM";
const std::string FIPNUM::data::itemName = "data";


FIPOWG::FIPOWG( ) : ParserKeyword("FIPOWG")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("FIPOWG");
}
const std::string FIPOWG::keywordName = "FIPOWG";


FIPSEP::FIPSEP( ) : ParserKeyword("FIPSEP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("FIPSEP");
  {
     ParserRecord record;
     {
        ParserItem item("FLUID_IN_PLACE_REGION", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("STAGE_INDEX", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("STAGE_TEMPERATURE", ParserItem::itype::DOUBLE);
        item.setDefault( double(15.560000) );
        item.push_backDimension("Temperature");
        record.addItem(item);
     }
     {
        ParserItem item("STAGE_PRESSURE", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.013250) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("DESTINATION_OUPUT", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("DESTINATION_STAGE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("K_VAL_TABLE_NUM", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("GAS_PLANT_TABLE_NUM", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("SURF_EQ_STATE_NUM", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("DENSITY_EVAL_GAS_TEMP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Temperature");
        record.addItem(item);
     }
     {
        ParserItem item("DENSITY_EVAL_PRESSURE_TEMP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string FIPSEP::keywordName = "FIPSEP";
const std::string FIPSEP::FLUID_IN_PLACE_REGION::itemName = "FLUID_IN_PLACE_REGION";
const std::string FIPSEP::STAGE_INDEX::itemName = "STAGE_INDEX";
const std::string FIPSEP::STAGE_TEMPERATURE::itemName = "STAGE_TEMPERATURE";
const double FIPSEP::STAGE_TEMPERATURE::defaultValue = 15.560000;
const std::string FIPSEP::STAGE_PRESSURE::itemName = "STAGE_PRESSURE";
const double FIPSEP::STAGE_PRESSURE::defaultValue = 1.013250;
const std::string FIPSEP::DESTINATION_OUPUT::itemName = "DESTINATION_OUPUT";
const int FIPSEP::DESTINATION_OUPUT::defaultValue = 0;
const std::string FIPSEP::DESTINATION_STAGE::itemName = "DESTINATION_STAGE";
const int FIPSEP::DESTINATION_STAGE::defaultValue = 0;
const std::string FIPSEP::K_VAL_TABLE_NUM::itemName = "K_VAL_TABLE_NUM";
const int FIPSEP::K_VAL_TABLE_NUM::defaultValue = 0;
const std::string FIPSEP::GAS_PLANT_TABLE_NUM::itemName = "GAS_PLANT_TABLE_NUM";
const int FIPSEP::GAS_PLANT_TABLE_NUM::defaultValue = 0;
const std::string FIPSEP::SURF_EQ_STATE_NUM::itemName = "SURF_EQ_STATE_NUM";
const std::string FIPSEP::DENSITY_EVAL_GAS_TEMP::itemName = "DENSITY_EVAL_GAS_TEMP";
const std::string FIPSEP::DENSITY_EVAL_PRESSURE_TEMP::itemName = "DENSITY_EVAL_PRESSURE_TEMP";


FIP_PROBE::FIP_PROBE( ) : ParserKeyword("FIP_PROBE")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  setMatchRegex("FIP.+");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string FIP_PROBE::keywordName = "FIP_PROBE";
const std::string FIP_PROBE::data::itemName = "data";


FLUXNUM::FLUXNUM( ) : ParserKeyword("FLUXNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("FLUXNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string FLUXNUM::keywordName = "FLUXNUM";
const std::string FLUXNUM::data::itemName = "data";


FLUXREG::FLUXREG( ) : ParserKeyword("FLUXREG")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("FLUXREG");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string FLUXREG::keywordName = "FLUXREG";
const std::string FLUXREG::data::itemName = "data";


FLUXTYPE::FLUXTYPE( ) : ParserKeyword("FLUXTYPE")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("FLUXTYPE");
}
const std::string FLUXTYPE::keywordName = "FLUXTYPE";


FMTHMD::FMTHMD( ) : ParserKeyword("FMTHMD")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("FMTHMD");
}
const std::string FMTHMD::keywordName = "FMTHMD";


FMTIN::FMTIN( ) : ParserKeyword("FMTIN")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("FMTIN");
}
const std::string FMTIN::keywordName = "FMTIN";


FMTOUT::FMTOUT( ) : ParserKeyword("FMTOUT")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("FMTOUT");
}
const std::string FMTOUT::keywordName = "FMTOUT";


FMWSET::FMWSET( ) : ParserKeyword("FMWSET")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("FMWSET");
}
const std::string FMWSET::keywordName = "FMWSET";


FOAM::FOAM( ) : ParserKeyword("FOAM")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("FOAM");
}
const std::string FOAM::keywordName = "FOAM";


FOAMADS::FOAMADS( ) : ParserKeyword("FOAMADS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("FOAMADS");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("FoamDensity");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string FOAMADS::keywordName = "FOAMADS";
const std::string FOAMADS::DATA::itemName = "DATA";


FOAMDCYO::FOAMDCYO( ) : ParserKeyword("FOAMDCYO")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("FOAMDCYO");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string FOAMDCYO::keywordName = "FOAMDCYO";
const std::string FOAMDCYO::DATA::itemName = "DATA";


FOAMDCYW::FOAMDCYW( ) : ParserKeyword("FOAMDCYW")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("FOAMDCYW");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string FOAMDCYW::keywordName = "FOAMDCYW";
const std::string FOAMDCYW::DATA::itemName = "DATA";


FOAMFCN::FOAMFCN( ) : ParserKeyword("FOAMFCN")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("FOAMFCN");
  {
     ParserRecord record;
     {
        ParserItem item("CAPILLARY_NUMBER", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("EXP", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string FOAMFCN::keywordName = "FOAMFCN";
const std::string FOAMFCN::CAPILLARY_NUMBER::itemName = "CAPILLARY_NUMBER";
const std::string FOAMFCN::EXP::itemName = "EXP";
const double FOAMFCN::EXP::defaultValue = 1.000000;


FOAMFRM::FOAMFRM( ) : ParserKeyword("FOAMFRM")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("FOAMFRM");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string FOAMFRM::keywordName = "FOAMFRM";
const std::string FOAMFRM::DATA::itemName = "DATA";


FOAMFSC::FOAMFSC( ) : ParserKeyword("FOAMFSC")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("FOAMFSC");
  {
     ParserRecord record;
     {
        ParserItem item("REF_SURF_CONC", ParserItem::itype::DOUBLE);
        item.push_backDimension("FoamSurfactantConcentration");
        record.addItem(item);
     }
     {
        ParserItem item("EXPONENT", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("MIN_SURF_CONC", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-20) );
        item.push_backDimension("FoamSurfactantConcentration");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string FOAMFSC::keywordName = "FOAMFSC";
const std::string FOAMFSC::REF_SURF_CONC::itemName = "REF_SURF_CONC";
const std::string FOAMFSC::EXPONENT::itemName = "EXPONENT";
const double FOAMFSC::EXPONENT::defaultValue = 1.000000;
const std::string FOAMFSC::MIN_SURF_CONC::itemName = "MIN_SURF_CONC";
const double FOAMFSC::MIN_SURF_CONC::defaultValue = 0.000000;


FOAMFSO::FOAMFSO( ) : ParserKeyword("FOAMFSO")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("FOAMFSO");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string FOAMFSO::keywordName = "FOAMFSO";
const std::string FOAMFSO::DATA::itemName = "DATA";


FOAMFST::FOAMFST( ) : ParserKeyword("FOAMFST")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("FOAMFST");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("FoamDensity");
        item.push_backDimension("SurfaceTension");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string FOAMFST::keywordName = "FOAMFST";
const std::string FOAMFST::DATA::itemName = "DATA";


FOAMFSW::FOAMFSW( ) : ParserKeyword("FOAMFSW")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("FOAMFSW");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string FOAMFSW::keywordName = "FOAMFSW";
const std::string FOAMFSW::DATA::itemName = "DATA";


FOAMMOB::FOAMMOB( ) : ParserKeyword("FOAMMOB")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("FOAMMOB");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("FoamDensity");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string FOAMMOB::keywordName = "FOAMMOB";
const std::string FOAMMOB::DATA::itemName = "DATA";


FOAMMOBP::FOAMMOBP( ) : ParserKeyword("FOAMMOBP")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("FOAMMOBP");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string FOAMMOBP::keywordName = "FOAMMOBP";
const std::string FOAMMOBP::DATA::itemName = "DATA";


FOAMMOBS::FOAMMOBS( ) : ParserKeyword("FOAMMOBS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("FOAMMOBS");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length/Time");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string FOAMMOBS::keywordName = "FOAMMOBS";
const std::string FOAMMOBS::DATA::itemName = "DATA";


FOAMOPTS::FOAMOPTS( ) : ParserKeyword("FOAMOPTS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("FOAMOPTS");
  {
     ParserRecord record;
     {
        ParserItem item("TRANSPORT_PHASE", ParserItem::itype::STRING);
        item.setDefault( std::string("GAS") );
        record.addItem(item);
     }
     {
        ParserItem item("MODEL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string FOAMOPTS::keywordName = "FOAMOPTS";
const std::string FOAMOPTS::TRANSPORT_PHASE::itemName = "TRANSPORT_PHASE";
const std::string FOAMOPTS::TRANSPORT_PHASE::defaultValue = "GAS";
const std::string FOAMOPTS::MODEL::itemName = "MODEL";


FOAMROCK::FOAMROCK( ) : ParserKeyword("FOAMROCK")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("FOAMROCK");
  {
     ParserRecord record;
     {
        ParserItem item("ADSORPTION_INDEX", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("ROCK_DENSITY", ParserItem::itype::DOUBLE);
        item.push_backDimension("Density");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string FOAMROCK::keywordName = "FOAMROCK";
const std::string FOAMROCK::ADSORPTION_INDEX::itemName = "ADSORPTION_INDEX";
const int FOAMROCK::ADSORPTION_INDEX::defaultValue = 1;
const std::string FOAMROCK::ROCK_DENSITY::itemName = "ROCK_DENSITY";


FORMFEED::FORMFEED( ) : ParserKeyword("FORMFEED")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("FORMFEED");
  {
     ParserRecord record;
     {
        ParserItem item("VALUE", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string FORMFEED::keywordName = "FORMFEED";
const std::string FORMFEED::VALUE::itemName = "VALUE";
const int FORMFEED::VALUE::defaultValue = 1;


FRICTION::FRICTION( ) : ParserKeyword("FRICTION")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("FRICTION");
  {
     ParserRecord record;
     {
        ParserItem item("NWFRIC", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("NWFRIB", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string FRICTION::keywordName = "FRICTION";
const std::string FRICTION::NWFRIC::itemName = "NWFRIC";
const int FRICTION::NWFRIC::defaultValue = 0;
const std::string FRICTION::NWFRIB::itemName = "NWFRIB";
const int FRICTION::NWFRIB::defaultValue = 1;


FULLIMP::FULLIMP( ) : ParserKeyword("FULLIMP")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("FULLIMP");
}
const std::string FULLIMP::keywordName = "FULLIMP";


GAS::GAS( ) : ParserKeyword("GAS")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("GAS");
}
const std::string GAS::keywordName = "GAS";


GASBEGIN::GASBEGIN( ) : ParserKeyword("GASBEGIN")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GASBEGIN");
}
const std::string GASBEGIN::keywordName = "GASBEGIN";


GASCONC::GASCONC( ) : ParserKeyword("GASCONC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("GASCONC");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string GASCONC::keywordName = "GASCONC";
const std::string GASCONC::data::itemName = "data";


GASDENT::GASDENT( ) : ParserKeyword("GASDENT")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("GASDENT");
  {
     ParserRecord record;
     {
        ParserItem item("REFERENCE_TEMPERATURE", ParserItem::itype::DOUBLE);
        item.setDefault( double(293.150000) );
        item.push_backDimension("AbsoluteTemperature");
        record.addItem(item);
     }
     {
        ParserItem item("EXPANSION_COEFF_LINEAR", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("1/AbsoluteTemperature");
        record.addItem(item);
     }
     {
        ParserItem item("EXPANSION_COEFF_QUADRATIC", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("1/AbsoluteTemperature*AbsoluteTemperature");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GASDENT::keywordName = "GASDENT";
const std::string GASDENT::REFERENCE_TEMPERATURE::itemName = "REFERENCE_TEMPERATURE";
const double GASDENT::REFERENCE_TEMPERATURE::defaultValue = 293.150000;
const std::string GASDENT::EXPANSION_COEFF_LINEAR::itemName = "EXPANSION_COEFF_LINEAR";
const double GASDENT::EXPANSION_COEFF_LINEAR::defaultValue = 0.000000;
const std::string GASDENT::EXPANSION_COEFF_QUADRATIC::itemName = "EXPANSION_COEFF_QUADRATIC";
const double GASDENT::EXPANSION_COEFF_QUADRATIC::defaultValue = 0.000000;


GASEND::GASEND( ) : ParserKeyword("GASEND")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GASEND");
}
const std::string GASEND::keywordName = "GASEND";


GASFCOMP::GASFCOMP( ) : ParserKeyword("GASFCOMP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GASFCOMP");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("VFP_TABLE_NUM", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ARTFICIAL_LIFT_QNTY", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("GAS_CONSUMPTION_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("GasSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("COMPRESSION_LVL", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("ACTION_SEQ_NUM", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GASFCOMP::keywordName = "GASFCOMP";
const std::string GASFCOMP::GROUP::itemName = "GROUP";
const std::string GASFCOMP::VFP_TABLE_NUM::itemName = "VFP_TABLE_NUM";
const int GASFCOMP::VFP_TABLE_NUM::defaultValue = 0;
const std::string GASFCOMP::ARTFICIAL_LIFT_QNTY::itemName = "ARTFICIAL_LIFT_QNTY";
const double GASFCOMP::ARTFICIAL_LIFT_QNTY::defaultValue = 0.000000;
const std::string GASFCOMP::GAS_CONSUMPTION_RATE::itemName = "GAS_CONSUMPTION_RATE";
const double GASFCOMP::GAS_CONSUMPTION_RATE::defaultValue = 0.000000;
const std::string GASFCOMP::COMPRESSION_LVL::itemName = "COMPRESSION_LVL";
const int GASFCOMP::COMPRESSION_LVL::defaultValue = 1;
const std::string GASFCOMP::ACTION_SEQ_NUM::itemName = "ACTION_SEQ_NUM";
const int GASFCOMP::ACTION_SEQ_NUM::defaultValue = 1;


GASFDECR::GASFDECR( ) : ParserKeyword("GASFDECR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GASFDECR");
  {
     ParserRecord record;
     {
        ParserItem item("JAN", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("FEB", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("MAR", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("APR", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("MAY", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("JUN", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("JUL", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("AUG", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("SEP", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("OCT", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("NOV", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("DEC", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GASFDECR::keywordName = "GASFDECR";
const std::string GASFDECR::JAN::itemName = "JAN";
const double GASFDECR::JAN::defaultValue = 0.000000;
const std::string GASFDECR::FEB::itemName = "FEB";
const double GASFDECR::FEB::defaultValue = 0.000000;
const std::string GASFDECR::MAR::itemName = "MAR";
const double GASFDECR::MAR::defaultValue = 0.000000;
const std::string GASFDECR::APR::itemName = "APR";
const double GASFDECR::APR::defaultValue = 0.000000;
const std::string GASFDECR::MAY::itemName = "MAY";
const double GASFDECR::MAY::defaultValue = 0.000000;
const std::string GASFDECR::JUN::itemName = "JUN";
const double GASFDECR::JUN::defaultValue = 0.000000;
const std::string GASFDECR::JUL::itemName = "JUL";
const double GASFDECR::JUL::defaultValue = 0.000000;
const std::string GASFDECR::AUG::itemName = "AUG";
const double GASFDECR::AUG::defaultValue = 0.000000;
const std::string GASFDECR::SEP::itemName = "SEP";
const double GASFDECR::SEP::defaultValue = 0.000000;
const std::string GASFDECR::OCT::itemName = "OCT";
const double GASFDECR::OCT::defaultValue = 0.000000;
const std::string GASFDECR::NOV::itemName = "NOV";
const double GASFDECR::NOV::defaultValue = 0.000000;
const std::string GASFDECR::DEC::itemName = "DEC";
const double GASFDECR::DEC::defaultValue = 0.000000;


GASFDELC::GASFDELC( ) : ParserKeyword("GASFDELC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GASFDELC");
  {
     ParserRecord record;
     {
        ParserItem item("VALUE", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GASFDELC::keywordName = "GASFDELC";
const std::string GASFDELC::VALUE::itemName = "VALUE";


GASFIELD::GASFIELD( ) : ParserKeyword("GASFIELD")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("GASFIELD");
  {
     ParserRecord record;
     {
        ParserItem item("FLAG_COMP", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("FLAG_IT", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GASFIELD::keywordName = "GASFIELD";
const std::string GASFIELD::FLAG_COMP::itemName = "FLAG_COMP";
const std::string GASFIELD::FLAG_COMP::defaultValue = "NO";
const std::string GASFIELD::FLAG_IT::itemName = "FLAG_IT";
const std::string GASFIELD::FLAG_IT::defaultValue = "NO";


GASFTARG::GASFTARG( ) : ParserKeyword("GASFTARG")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GASFTARG");
  {
     ParserRecord record;
     {
        ParserItem item("JAN", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length*Length/Time");
        record.addItem(item);
     }
     {
        ParserItem item("FEB", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length*Length/Time");
        record.addItem(item);
     }
     {
        ParserItem item("MAR", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length*Length/Time");
        record.addItem(item);
     }
     {
        ParserItem item("APR", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length*Length/Time");
        record.addItem(item);
     }
     {
        ParserItem item("MAY", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length*Length/Time");
        record.addItem(item);
     }
     {
        ParserItem item("JUN", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length*Length/Time");
        record.addItem(item);
     }
     {
        ParserItem item("JUL", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length*Length/Time");
        record.addItem(item);
     }
     {
        ParserItem item("AUG", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length*Length/Time");
        record.addItem(item);
     }
     {
        ParserItem item("SEP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length*Length/Time");
        record.addItem(item);
     }
     {
        ParserItem item("OCT", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length*Length/Time");
        record.addItem(item);
     }
     {
        ParserItem item("NOV", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length*Length/Time");
        record.addItem(item);
     }
     {
        ParserItem item("DEC", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length*Length/Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GASFTARG::keywordName = "GASFTARG";
const std::string GASFTARG::JAN::itemName = "JAN";
const std::string GASFTARG::FEB::itemName = "FEB";
const std::string GASFTARG::MAR::itemName = "MAR";
const std::string GASFTARG::APR::itemName = "APR";
const std::string GASFTARG::MAY::itemName = "MAY";
const std::string GASFTARG::JUN::itemName = "JUN";
const std::string GASFTARG::JUL::itemName = "JUL";
const std::string GASFTARG::AUG::itemName = "AUG";
const std::string GASFTARG::SEP::itemName = "SEP";
const std::string GASFTARG::OCT::itemName = "OCT";
const std::string GASFTARG::NOV::itemName = "NOV";
const std::string GASFTARG::DEC::itemName = "DEC";


GASMONTH::GASMONTH( ) : ParserKeyword("GASMONTH")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GASMONTH");
  {
     ParserRecord record;
     {
        ParserItem item("MONTH", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("WRITE_REPORT", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GASMONTH::keywordName = "GASMONTH";
const std::string GASMONTH::MONTH::itemName = "MONTH";
const std::string GASMONTH::WRITE_REPORT::itemName = "WRITE_REPORT";
const std::string GASMONTH::WRITE_REPORT::defaultValue = "NO";


GASPERIO::GASPERIO( ) : ParserKeyword("GASPERIO")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GASPERIO");
  {
     ParserRecord record;
     {
        ParserItem item("NUM_PERIODS", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NUM_MONTHS", ParserItem::itype::INT);
        item.setDefault( 12 );
        record.addItem(item);
     }
     {
        ParserItem item("INITIAL_DCQ", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("SWING_REQ", ParserItem::itype::STRING);
        item.setDefault( std::string("PER") );
        record.addItem(item);
     }
     {
        ParserItem item("LIMIT_TIMESTEPS", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     {
        ParserItem item("LIMIT_DCQ_RED_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("ANTICIPATED_DCQ_RED_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("MAX_ITERATIONS", ParserItem::itype::INT);
        item.setDefault( 3 );
        record.addItem(item);
     }
     {
        ParserItem item("DCQ_CONV_TOLERANCE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.100000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GASPERIO::keywordName = "GASPERIO";
const std::string GASPERIO::NUM_PERIODS::itemName = "NUM_PERIODS";
const std::string GASPERIO::NUM_MONTHS::itemName = "NUM_MONTHS";
const int GASPERIO::NUM_MONTHS::defaultValue = 12;
const std::string GASPERIO::INITIAL_DCQ::itemName = "INITIAL_DCQ";
const std::string GASPERIO::SWING_REQ::itemName = "SWING_REQ";
const std::string GASPERIO::SWING_REQ::defaultValue = "PER";
const std::string GASPERIO::LIMIT_TIMESTEPS::itemName = "LIMIT_TIMESTEPS";
const std::string GASPERIO::LIMIT_TIMESTEPS::defaultValue = "YES";
const std::string GASPERIO::LIMIT_DCQ_RED_FACTOR::itemName = "LIMIT_DCQ_RED_FACTOR";
const double GASPERIO::LIMIT_DCQ_RED_FACTOR::defaultValue = 0.000000;
const std::string GASPERIO::ANTICIPATED_DCQ_RED_FACTOR::itemName = "ANTICIPATED_DCQ_RED_FACTOR";
const double GASPERIO::ANTICIPATED_DCQ_RED_FACTOR::defaultValue = 1.000000;
const std::string GASPERIO::MAX_ITERATIONS::itemName = "MAX_ITERATIONS";
const int GASPERIO::MAX_ITERATIONS::defaultValue = 3;
const std::string GASPERIO::DCQ_CONV_TOLERANCE::itemName = "DCQ_CONV_TOLERANCE";
const double GASPERIO::DCQ_CONV_TOLERANCE::defaultValue = 0.100000;


GASSATC::GASSATC( ) : ParserKeyword("GASSATC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("GASSATC");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string GASSATC::keywordName = "GASSATC";
const std::string GASSATC::data::itemName = "data";


GASVISCT::GASVISCT( ) : ParserKeyword("GASVISCT")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("GASVISCT");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("ContextDependent");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GASVISCT::keywordName = "GASVISCT";
const std::string GASVISCT::DATA::itemName = "DATA";


GASYEAR::GASYEAR( ) : ParserKeyword("GASYEAR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GASYEAR");
  {
     ParserRecord record;
     {
        ParserItem item("NUM_YEARS", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("INITIAL_DCQ", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("SWING_REQ", ParserItem::itype::STRING);
        item.setDefault( std::string("YEAR") );
        record.addItem(item);
     }
     {
        ParserItem item("LIMIT_TIMESTEPS", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     {
        ParserItem item("LIMIT_DCQ_RED_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("ANTICIPATED_DCQ_RED_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("MAX_ITERATIONS", ParserItem::itype::INT);
        item.setDefault( 3 );
        record.addItem(item);
     }
     {
        ParserItem item("DCQ_CONV_TOLERANCE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.100000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GASYEAR::keywordName = "GASYEAR";
const std::string GASYEAR::NUM_YEARS::itemName = "NUM_YEARS";
const std::string GASYEAR::INITIAL_DCQ::itemName = "INITIAL_DCQ";
const std::string GASYEAR::SWING_REQ::itemName = "SWING_REQ";
const std::string GASYEAR::SWING_REQ::defaultValue = "YEAR";
const std::string GASYEAR::LIMIT_TIMESTEPS::itemName = "LIMIT_TIMESTEPS";
const std::string GASYEAR::LIMIT_TIMESTEPS::defaultValue = "YES";
const std::string GASYEAR::LIMIT_DCQ_RED_FACTOR::itemName = "LIMIT_DCQ_RED_FACTOR";
const double GASYEAR::LIMIT_DCQ_RED_FACTOR::defaultValue = 0.000000;
const std::string GASYEAR::ANTICIPATED_DCQ_RED_FACTOR::itemName = "ANTICIPATED_DCQ_RED_FACTOR";
const double GASYEAR::ANTICIPATED_DCQ_RED_FACTOR::defaultValue = 1.000000;
const std::string GASYEAR::MAX_ITERATIONS::itemName = "MAX_ITERATIONS";
const int GASYEAR::MAX_ITERATIONS::defaultValue = 3;
const std::string GASYEAR::DCQ_CONV_TOLERANCE::itemName = "DCQ_CONV_TOLERANCE";
const double GASYEAR::DCQ_CONV_TOLERANCE::defaultValue = 0.100000;


GCALECON::GCALECON( ) : ParserKeyword("GCALECON")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GCALECON");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("MIN_ENERGY_PROD_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Energy/Time");
        record.addItem(item);
     }
     {
        ParserItem item("MIN_CALORIFIC_VAL", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Energy/GasSurfaceVolume");
        record.addItem(item);
     }
     {
        ParserItem item("FLAG_END_RUN", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GCALECON::keywordName = "GCALECON";
const std::string GCALECON::GROUP::itemName = "GROUP";
const std::string GCALECON::MIN_ENERGY_PROD_RATE::itemName = "MIN_ENERGY_PROD_RATE";
const double GCALECON::MIN_ENERGY_PROD_RATE::defaultValue = 0.000000;
const std::string GCALECON::MIN_CALORIFIC_VAL::itemName = "MIN_CALORIFIC_VAL";
const double GCALECON::MIN_CALORIFIC_VAL::defaultValue = 0.000000;
const std::string GCALECON::FLAG_END_RUN::itemName = "FLAG_END_RUN";
const std::string GCALECON::FLAG_END_RUN::defaultValue = "NO";


GCOMPIDX::GCOMPIDX( ) : ParserKeyword("GCOMPIDX")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("GCOMPIDX");
  {
     ParserRecord record;
     {
        ParserItem item("GAS_COMPONENT_INDEX", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GCOMPIDX::keywordName = "GCOMPIDX";
const std::string GCOMPIDX::GAS_COMPONENT_INDEX::itemName = "GAS_COMPONENT_INDEX";


GCONCAL::GCONCAL( ) : ParserKeyword("GCONCAL")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GCONCAL");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("MEAN_CALORIFIC_VAL", ParserItem::itype::DOUBLE);
        item.push_backDimension("Energy/GasSurfaceVolume");
        record.addItem(item);
     }
     {
        ParserItem item("ACTION", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     {
        ParserItem item("RATE_RED_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.900000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GCONCAL::keywordName = "GCONCAL";
const std::string GCONCAL::GROUP::itemName = "GROUP";
const std::string GCONCAL::MEAN_CALORIFIC_VAL::itemName = "MEAN_CALORIFIC_VAL";
const std::string GCONCAL::ACTION::itemName = "ACTION";
const std::string GCONCAL::ACTION::defaultValue = "NONE";
const std::string GCONCAL::RATE_RED_FACTOR::itemName = "RATE_RED_FACTOR";
const double GCONCAL::RATE_RED_FACTOR::defaultValue = 0.900000;


GCONENG::GCONENG( ) : ParserKeyword("GCONENG")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GCONENG");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("ENERGY_PROD_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(100000000000000000000.000000) );
        item.push_backDimension("Energy/Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GCONENG::keywordName = "GCONENG";
const std::string GCONENG::GROUP::itemName = "GROUP";
const std::string GCONENG::ENERGY_PROD_RATE::itemName = "ENERGY_PROD_RATE";
const double GCONENG::ENERGY_PROD_RATE::defaultValue = 100000000000000000000.000000;


GCONINJE::GCONINJE( ) : ParserKeyword("GCONINJE")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GCONINJE");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("PHASE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("CONTROL_MODE", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     {
        ParserItem item("SURFACE_TARGET", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        record.addItem(item);
     }
     {
        ParserItem item("RESV_TARGET", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        item.push_backDimension("ReservoirVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("REINJ_TARGET", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("VOIDAGE_TARGET", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("FREE", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     {
        ParserItem item("GUIDE_FRACTION", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("GUIDE_DEF", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("REINJECT_GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("VOIDAGE_GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("WETGAS_TARGET", ParserItem::itype::DOUBLE);
        item.push_backDimension("GasSurfaceVolume/Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GCONINJE::keywordName = "GCONINJE";
const std::string GCONINJE::GROUP::itemName = "GROUP";
const std::string GCONINJE::PHASE::itemName = "PHASE";
const std::string GCONINJE::CONTROL_MODE::itemName = "CONTROL_MODE";
const std::string GCONINJE::CONTROL_MODE::defaultValue = "NONE";
const std::string GCONINJE::SURFACE_TARGET::itemName = "SURFACE_TARGET";
const UDAValue GCONINJE::SURFACE_TARGET::defaultValue = UDAValue(0.000000);
const std::string GCONINJE::RESV_TARGET::itemName = "RESV_TARGET";
const UDAValue GCONINJE::RESV_TARGET::defaultValue = UDAValue(0.000000);
const std::string GCONINJE::REINJ_TARGET::itemName = "REINJ_TARGET";
const UDAValue GCONINJE::REINJ_TARGET::defaultValue = UDAValue(0.000000);
const std::string GCONINJE::VOIDAGE_TARGET::itemName = "VOIDAGE_TARGET";
const UDAValue GCONINJE::VOIDAGE_TARGET::defaultValue = UDAValue(0.000000);
const std::string GCONINJE::FREE::itemName = "FREE";
const std::string GCONINJE::FREE::defaultValue = "YES";
const std::string GCONINJE::GUIDE_FRACTION::itemName = "GUIDE_FRACTION";
const double GCONINJE::GUIDE_FRACTION::defaultValue = 0.000000;
const std::string GCONINJE::GUIDE_DEF::itemName = "GUIDE_DEF";
const std::string GCONINJE::REINJECT_GROUP::itemName = "REINJECT_GROUP";
const std::string GCONINJE::VOIDAGE_GROUP::itemName = "VOIDAGE_GROUP";
const std::string GCONINJE::WETGAS_TARGET::itemName = "WETGAS_TARGET";


GCONPRI::GCONPRI( ) : ParserKeyword("GCONPRI")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GCONPRI");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("OIL_PROD_UPPER_LIMIT", ParserItem::itype::UDA);
        item.setDefault( UDAValue(99999999999999996973312221251036165947450327545502362648241750950346848435554075534196338404706251868027512415973882408182135734368278484639385041047239877871023591066789981811181813306167128854888448.000000) );
        item.push_backDimension("LiquidSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("PROCEDURE_OIL_LIMIT", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     {
        ParserItem item("WAT_PROD_UPPER_LIMIT", ParserItem::itype::UDA);
        item.setDefault( UDAValue(99999999999999996973312221251036165947450327545502362648241750950346848435554075534196338404706251868027512415973882408182135734368278484639385041047239877871023591066789981811181813306167128854888448.000000) );
        item.push_backDimension("LiquidSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("PROCEDURE_WAT_LIMIT", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     {
        ParserItem item("GAS_PROD_UPPER_LIMIT", ParserItem::itype::UDA);
        item.setDefault( UDAValue(99999999999999996973312221251036165947450327545502362648241750950346848435554075534196338404706251868027512415973882408182135734368278484639385041047239877871023591066789981811181813306167128854888448.000000) );
        item.push_backDimension("GasSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("PROCEDURE_GAS_LIMIT", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     {
        ParserItem item("LIQ_PROD_UPPER_LIMIT", ParserItem::itype::UDA);
        item.setDefault( UDAValue(99999999999999996973312221251036165947450327545502362648241750950346848435554075534196338404706251868027512415973882408182135734368278484639385041047239877871023591066789981811181813306167128854888448.000000) );
        item.push_backDimension("LiquidSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("PROCEDURE_LIQ_LIMIT", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     {
        ParserItem item("RES_FLUID_PROD_UPPER_LIMIT", ParserItem::itype::UDA);
        item.setDefault( UDAValue(99999999999999996973312221251036165947450327545502362648241750950346848435554075534196338404706251868027512415973882408182135734368278484639385041047239877871023591066789981811181813306167128854888448.000000) );
        item.push_backDimension("ReservoirVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("RES_VOL_BALANCING_FRAC_UPPER_LIMIT", ParserItem::itype::UDA);
        item.setDefault( UDAValue(99999999999999996973312221251036165947450327545502362648241750950346848435554075534196338404706251868027512415973882408182135734368278484639385041047239877871023591066789981811181813306167128854888448.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("WET_GAS_PROD_UPPER_LIMIT", ParserItem::itype::UDA);
        item.setDefault( UDAValue(99999999999999996973312221251036165947450327545502362648241750950346848435554075534196338404706251868027512415973882408182135734368278484639385041047239877871023591066789981811181813306167128854888448.000000) );
        item.push_backDimension("GasSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("PROCEDURE_WET_GAS_LIMIT", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     {
        ParserItem item("SURF_GAS_BALANCING_FRAC_UPPER_LIMIT", ParserItem::itype::UDA);
        item.setDefault( UDAValue(99999999999999996973312221251036165947450327545502362648241750950346848435554075534196338404706251868027512415973882408182135734368278484639385041047239877871023591066789981811181813306167128854888448.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("SURF_WAT_BALANCING_FRAC_UPPER_LIMIT", ParserItem::itype::UDA);
        item.setDefault( UDAValue(99999999999999996973312221251036165947450327545502362648241750950346848435554075534196338404706251868027512415973882408182135734368278484639385041047239877871023591066789981811181813306167128854888448.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("UPPER_LIMIT", ParserItem::itype::UDA);
        item.setDefault( UDAValue(99999999999999996973312221251036165947450327545502362648241750950346848435554075534196338404706251868027512415973882408182135734368278484639385041047239877871023591066789981811181813306167128854888448.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("PROCEDURE_LIMIT", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GCONPRI::keywordName = "GCONPRI";
const std::string GCONPRI::GROUP::itemName = "GROUP";
const std::string GCONPRI::OIL_PROD_UPPER_LIMIT::itemName = "OIL_PROD_UPPER_LIMIT";
const UDAValue GCONPRI::OIL_PROD_UPPER_LIMIT::defaultValue = UDAValue(99999999999999996973312221251036165947450327545502362648241750950346848435554075534196338404706251868027512415973882408182135734368278484639385041047239877871023591066789981811181813306167128854888448.000000);
const std::string GCONPRI::PROCEDURE_OIL_LIMIT::itemName = "PROCEDURE_OIL_LIMIT";
const std::string GCONPRI::PROCEDURE_OIL_LIMIT::defaultValue = "NONE";
const std::string GCONPRI::WAT_PROD_UPPER_LIMIT::itemName = "WAT_PROD_UPPER_LIMIT";
const UDAValue GCONPRI::WAT_PROD_UPPER_LIMIT::defaultValue = UDAValue(99999999999999996973312221251036165947450327545502362648241750950346848435554075534196338404706251868027512415973882408182135734368278484639385041047239877871023591066789981811181813306167128854888448.000000);
const std::string GCONPRI::PROCEDURE_WAT_LIMIT::itemName = "PROCEDURE_WAT_LIMIT";
const std::string GCONPRI::PROCEDURE_WAT_LIMIT::defaultValue = "NONE";
const std::string GCONPRI::GAS_PROD_UPPER_LIMIT::itemName = "GAS_PROD_UPPER_LIMIT";
const UDAValue GCONPRI::GAS_PROD_UPPER_LIMIT::defaultValue = UDAValue(99999999999999996973312221251036165947450327545502362648241750950346848435554075534196338404706251868027512415973882408182135734368278484639385041047239877871023591066789981811181813306167128854888448.000000);
const std::string GCONPRI::PROCEDURE_GAS_LIMIT::itemName = "PROCEDURE_GAS_LIMIT";
const std::string GCONPRI::PROCEDURE_GAS_LIMIT::defaultValue = "NONE";
const std::string GCONPRI::LIQ_PROD_UPPER_LIMIT::itemName = "LIQ_PROD_UPPER_LIMIT";
const UDAValue GCONPRI::LIQ_PROD_UPPER_LIMIT::defaultValue = UDAValue(99999999999999996973312221251036165947450327545502362648241750950346848435554075534196338404706251868027512415973882408182135734368278484639385041047239877871023591066789981811181813306167128854888448.000000);
const std::string GCONPRI::PROCEDURE_LIQ_LIMIT::itemName = "PROCEDURE_LIQ_LIMIT";
const std::string GCONPRI::PROCEDURE_LIQ_LIMIT::defaultValue = "NONE";
const std::string GCONPRI::RES_FLUID_PROD_UPPER_LIMIT::itemName = "RES_FLUID_PROD_UPPER_LIMIT";
const UDAValue GCONPRI::RES_FLUID_PROD_UPPER_LIMIT::defaultValue = UDAValue(99999999999999996973312221251036165947450327545502362648241750950346848435554075534196338404706251868027512415973882408182135734368278484639385041047239877871023591066789981811181813306167128854888448.000000);
const std::string GCONPRI::RES_VOL_BALANCING_FRAC_UPPER_LIMIT::itemName = "RES_VOL_BALANCING_FRAC_UPPER_LIMIT";
const UDAValue GCONPRI::RES_VOL_BALANCING_FRAC_UPPER_LIMIT::defaultValue = UDAValue(99999999999999996973312221251036165947450327545502362648241750950346848435554075534196338404706251868027512415973882408182135734368278484639385041047239877871023591066789981811181813306167128854888448.000000);
const std::string GCONPRI::WET_GAS_PROD_UPPER_LIMIT::itemName = "WET_GAS_PROD_UPPER_LIMIT";
const UDAValue GCONPRI::WET_GAS_PROD_UPPER_LIMIT::defaultValue = UDAValue(99999999999999996973312221251036165947450327545502362648241750950346848435554075534196338404706251868027512415973882408182135734368278484639385041047239877871023591066789981811181813306167128854888448.000000);
const std::string GCONPRI::PROCEDURE_WET_GAS_LIMIT::itemName = "PROCEDURE_WET_GAS_LIMIT";
const std::string GCONPRI::PROCEDURE_WET_GAS_LIMIT::defaultValue = "NONE";
const std::string GCONPRI::SURF_GAS_BALANCING_FRAC_UPPER_LIMIT::itemName = "SURF_GAS_BALANCING_FRAC_UPPER_LIMIT";
const UDAValue GCONPRI::SURF_GAS_BALANCING_FRAC_UPPER_LIMIT::defaultValue = UDAValue(99999999999999996973312221251036165947450327545502362648241750950346848435554075534196338404706251868027512415973882408182135734368278484639385041047239877871023591066789981811181813306167128854888448.000000);
const std::string GCONPRI::SURF_WAT_BALANCING_FRAC_UPPER_LIMIT::itemName = "SURF_WAT_BALANCING_FRAC_UPPER_LIMIT";
const UDAValue GCONPRI::SURF_WAT_BALANCING_FRAC_UPPER_LIMIT::defaultValue = UDAValue(99999999999999996973312221251036165947450327545502362648241750950346848435554075534196338404706251868027512415973882408182135734368278484639385041047239877871023591066789981811181813306167128854888448.000000);
const std::string GCONPRI::UPPER_LIMIT::itemName = "UPPER_LIMIT";
const UDAValue GCONPRI::UPPER_LIMIT::defaultValue = UDAValue(99999999999999996973312221251036165947450327545502362648241750950346848435554075534196338404706251868027512415973882408182135734368278484639385041047239877871023591066789981811181813306167128854888448.000000);
const std::string GCONPRI::PROCEDURE_LIMIT::itemName = "PROCEDURE_LIMIT";
const std::string GCONPRI::PROCEDURE_LIMIT::defaultValue = "NONE";


GCONPROD::GCONPROD( ) : ParserKeyword("GCONPROD")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GCONPROD");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("CONTROL_MODE", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     {
        ParserItem item("OIL_TARGET", ParserItem::itype::UDA);
        item.setDefault( UDAValue(-9989999999999999764508097064678579891241680670206998059982957902605768119280291502755086619213633159168.000000) );
        item.push_backDimension("LiquidSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("WATER_TARGET", ParserItem::itype::UDA);
        item.setDefault( UDAValue(-9989999999999999764508097064678579891241680670206998059982957902605768119280291502755086619213633159168.000000) );
        item.push_backDimension("LiquidSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("GAS_TARGET", ParserItem::itype::UDA);
        item.setDefault( UDAValue(-9989999999999999764508097064678579891241680670206998059982957902605768119280291502755086619213633159168.000000) );
        item.push_backDimension("GasSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("LIQUID_TARGET", ParserItem::itype::UDA);
        item.setDefault( UDAValue(-9989999999999999764508097064678579891241680670206998059982957902605768119280291502755086619213633159168.000000) );
        item.push_backDimension("LiquidSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("EXCEED_PROC", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     {
        ParserItem item("RESPOND_TO_PARENT", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     {
        ParserItem item("GUIDE_RATE", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("GUIDE_RATE_DEF", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("WATER_EXCEED_PROCEDURE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("GAS_EXCEED_PROCEDURE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("LIQUID_EXCEED_PROCEDURE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("RESERVOIR_FLUID_TARGET", ParserItem::itype::DOUBLE);
        item.setDefault( double(-9989999999999999764508097064678579891241680670206998059982957902605768119280291502755086619213633159168.000000) );
        item.push_backDimension("ReservoirVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("RESERVOIR_VOLUME_BALANCE", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("LINEAR_COMBINED_TARGET", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("LIN_TARGET_EXCEED_PROCEDURE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GCONPROD::keywordName = "GCONPROD";
const std::string GCONPROD::GROUP::itemName = "GROUP";
const std::string GCONPROD::CONTROL_MODE::itemName = "CONTROL_MODE";
const std::string GCONPROD::CONTROL_MODE::defaultValue = "NONE";
const std::string GCONPROD::OIL_TARGET::itemName = "OIL_TARGET";
const UDAValue GCONPROD::OIL_TARGET::defaultValue = UDAValue(-9989999999999999764508097064678579891241680670206998059982957902605768119280291502755086619213633159168.000000);
const std::string GCONPROD::WATER_TARGET::itemName = "WATER_TARGET";
const UDAValue GCONPROD::WATER_TARGET::defaultValue = UDAValue(-9989999999999999764508097064678579891241680670206998059982957902605768119280291502755086619213633159168.000000);
const std::string GCONPROD::GAS_TARGET::itemName = "GAS_TARGET";
const UDAValue GCONPROD::GAS_TARGET::defaultValue = UDAValue(-9989999999999999764508097064678579891241680670206998059982957902605768119280291502755086619213633159168.000000);
const std::string GCONPROD::LIQUID_TARGET::itemName = "LIQUID_TARGET";
const UDAValue GCONPROD::LIQUID_TARGET::defaultValue = UDAValue(-9989999999999999764508097064678579891241680670206998059982957902605768119280291502755086619213633159168.000000);
const std::string GCONPROD::EXCEED_PROC::itemName = "EXCEED_PROC";
const std::string GCONPROD::EXCEED_PROC::defaultValue = "NONE";
const std::string GCONPROD::RESPOND_TO_PARENT::itemName = "RESPOND_TO_PARENT";
const std::string GCONPROD::RESPOND_TO_PARENT::defaultValue = "YES";
const std::string GCONPROD::GUIDE_RATE::itemName = "GUIDE_RATE";
const std::string GCONPROD::GUIDE_RATE_DEF::itemName = "GUIDE_RATE_DEF";
const std::string GCONPROD::WATER_EXCEED_PROCEDURE::itemName = "WATER_EXCEED_PROCEDURE";
const std::string GCONPROD::GAS_EXCEED_PROCEDURE::itemName = "GAS_EXCEED_PROCEDURE";
const std::string GCONPROD::LIQUID_EXCEED_PROCEDURE::itemName = "LIQUID_EXCEED_PROCEDURE";
const std::string GCONPROD::RESERVOIR_FLUID_TARGET::itemName = "RESERVOIR_FLUID_TARGET";
const double GCONPROD::RESERVOIR_FLUID_TARGET::defaultValue = -9989999999999999764508097064678579891241680670206998059982957902605768119280291502755086619213633159168.000000;
const std::string GCONPROD::RESERVOIR_VOLUME_BALANCE::itemName = "RESERVOIR_VOLUME_BALANCE";
const std::string GCONPROD::LINEAR_COMBINED_TARGET::itemName = "LINEAR_COMBINED_TARGET";
const std::string GCONPROD::LIN_TARGET_EXCEED_PROCEDURE::itemName = "LIN_TARGET_EXCEED_PROCEDURE";


GCONSALE::GCONSALE( ) : ParserKeyword("GCONSALE")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GCONSALE");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SALES_TARGET", ParserItem::itype::UDA);
        item.push_backDimension("GasSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("MAX_SALES_RATE", ParserItem::itype::UDA);
        item.setDefault( UDAValue(100000000000000000000.000000) );
        item.push_backDimension("GasSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("MIN_SALES_RATE", ParserItem::itype::UDA);
        item.setDefault( UDAValue(-100000000000000000000.000000) );
        item.push_backDimension("GasSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("MAX_PROC", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GCONSALE::keywordName = "GCONSALE";
const std::string GCONSALE::GROUP::itemName = "GROUP";
const std::string GCONSALE::SALES_TARGET::itemName = "SALES_TARGET";
const std::string GCONSALE::MAX_SALES_RATE::itemName = "MAX_SALES_RATE";
const UDAValue GCONSALE::MAX_SALES_RATE::defaultValue = UDAValue(100000000000000000000.000000);
const std::string GCONSALE::MIN_SALES_RATE::itemName = "MIN_SALES_RATE";
const UDAValue GCONSALE::MIN_SALES_RATE::defaultValue = UDAValue(-100000000000000000000.000000);
const std::string GCONSALE::MAX_PROC::itemName = "MAX_PROC";
const std::string GCONSALE::MAX_PROC::defaultValue = "NONE";


GCONSUMP::GCONSUMP( ) : ParserKeyword("GCONSUMP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GCONSUMP");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("GAS_CONSUMP_RATE", ParserItem::itype::UDA);
        item.push_backDimension("GasSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("GAS_IMPORT_RATE", ParserItem::itype::UDA);
        item.push_backDimension("GasSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("NETWORK_NODE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GCONSUMP::keywordName = "GCONSUMP";
const std::string GCONSUMP::GROUP::itemName = "GROUP";
const std::string GCONSUMP::GAS_CONSUMP_RATE::itemName = "GAS_CONSUMP_RATE";
const std::string GCONSUMP::GAS_IMPORT_RATE::itemName = "GAS_IMPORT_RATE";
const std::string GCONSUMP::NETWORK_NODE::itemName = "NETWORK_NODE";


GCONTOL::GCONTOL( ) : ParserKeyword("GCONTOL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GCONTOL");
  {
     ParserRecord record;
     {
        ParserItem item("TOLERANCE_FRACTION", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("NUPCOL_VALUE", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("TOLERANCE_FRACTION_INJ", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.001000) );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_IT_INJ", ParserItem::itype::INT);
        item.setDefault( 5 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GCONTOL::keywordName = "GCONTOL";
const std::string GCONTOL::TOLERANCE_FRACTION::itemName = "TOLERANCE_FRACTION";
const std::string GCONTOL::NUPCOL_VALUE::itemName = "NUPCOL_VALUE";
const std::string GCONTOL::TOLERANCE_FRACTION_INJ::itemName = "TOLERANCE_FRACTION_INJ";
const double GCONTOL::TOLERANCE_FRACTION_INJ::defaultValue = 0.001000;
const std::string GCONTOL::MAX_IT_INJ::itemName = "MAX_IT_INJ";
const int GCONTOL::MAX_IT_INJ::defaultValue = 5;


GCUTBACK::GCUTBACK( ) : ParserKeyword("GCUTBACK")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GCUTBACK");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("WATER_CUT_UPPER_LIM", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("GAS_OIL_UPPER_LIM", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("GAS_LIQ_UPPER_LIM", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("WAT_GAS_UPPER_LIM", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("RATE_CUTBACK_FACTOR", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("CONTROL_PHASE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GCUTBACK::keywordName = "GCUTBACK";
const std::string GCUTBACK::GROUP_NAME::itemName = "GROUP_NAME";
const std::string GCUTBACK::WATER_CUT_UPPER_LIM::itemName = "WATER_CUT_UPPER_LIM";
const std::string GCUTBACK::GAS_OIL_UPPER_LIM::itemName = "GAS_OIL_UPPER_LIM";
const std::string GCUTBACK::GAS_LIQ_UPPER_LIM::itemName = "GAS_LIQ_UPPER_LIM";
const std::string GCUTBACK::WAT_GAS_UPPER_LIM::itemName = "WAT_GAS_UPPER_LIM";
const std::string GCUTBACK::RATE_CUTBACK_FACTOR::itemName = "RATE_CUTBACK_FACTOR";
const std::string GCUTBACK::CONTROL_PHASE::itemName = "CONTROL_PHASE";


GCVD::GCVD( ) : ParserKeyword("GCVD")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("EQLDIMS","NTEQUL",0);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("GCVD");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        item.push_backDimension("GasSurfaceVolume/Length*Length*Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GCVD::keywordName = "GCVD";
const std::string GCVD::DATA::itemName = "DATA";


GDCQ::GDCQ( ) : ParserKeyword("GDCQ")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GDCQ");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("INIT_DCQ", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("DCQ_TYPE", ParserItem::itype::STRING);
        item.setDefault( std::string("VAR") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GDCQ::keywordName = "GDCQ";
const std::string GDCQ::GROUP_NAME::itemName = "GROUP_NAME";
const std::string GDCQ::INIT_DCQ::itemName = "INIT_DCQ";
const std::string GDCQ::DCQ_TYPE::itemName = "DCQ_TYPE";
const std::string GDCQ::DCQ_TYPE::defaultValue = "VAR";


GDCQECON::GDCQECON( ) : ParserKeyword("GDCQECON")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GDCQECON");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("MIN_DCQ", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GDCQECON::keywordName = "GDCQECON";
const std::string GDCQECON::GROUP_NAME::itemName = "GROUP_NAME";
const std::string GDCQECON::MIN_DCQ::itemName = "MIN_DCQ";


GDFILE::GDFILE( ) : ParserKeyword("GDFILE")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("GDFILE");
  {
     ParserRecord record;
     {
        ParserItem item("filename", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("formatted", ParserItem::itype::STRING);
        item.setDefault( std::string("U") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GDFILE::keywordName = "GDFILE";
const std::string GDFILE::filename::itemName = "filename";
const std::string GDFILE::formatted::itemName = "formatted";
const std::string GDFILE::formatted::defaultValue = "U";


GDIMS::GDIMS( ) : ParserKeyword("GDIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("GDIMS");
  {
     ParserRecord record;
     {
        ParserItem item("MAX_NUM_GRAD_PARAMS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GDIMS::keywordName = "GDIMS";
const std::string GDIMS::MAX_NUM_GRAD_PARAMS::itemName = "MAX_NUM_GRAD_PARAMS";
const int GDIMS::MAX_NUM_GRAD_PARAMS::defaultValue = 0;


GDORIENT::GDORIENT( ) : ParserKeyword("GDORIENT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("GDORIENT");
  {
     ParserRecord record;
     {
        ParserItem item("I", ParserItem::itype::STRING);
        item.setDefault( std::string("INC") );
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::STRING);
        item.setDefault( std::string("INC") );
        record.addItem(item);
     }
     {
        ParserItem item("K", ParserItem::itype::STRING);
        item.setDefault( std::string("INC") );
        record.addItem(item);
     }
     {
        ParserItem item("Z", ParserItem::itype::STRING);
        item.setDefault( std::string("DOWN") );
        record.addItem(item);
     }
     {
        ParserItem item("HAND", ParserItem::itype::STRING);
        item.setDefault( std::string("RIGHT") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GDORIENT::keywordName = "GDORIENT";
const std::string GDORIENT::I::itemName = "I";
const std::string GDORIENT::I::defaultValue = "INC";
const std::string GDORIENT::J::itemName = "J";
const std::string GDORIENT::J::defaultValue = "INC";
const std::string GDORIENT::K::itemName = "K";
const std::string GDORIENT::K::defaultValue = "INC";
const std::string GDORIENT::Z::itemName = "Z";
const std::string GDORIENT::Z::defaultValue = "DOWN";
const std::string GDORIENT::HAND::itemName = "HAND";
const std::string GDORIENT::HAND::defaultValue = "RIGHT";


GDRILPOT::GDRILPOT( ) : ParserKeyword("GDRILPOT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GDRILPOT");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("QNTY_TYPE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("MIN_POTENTIAL_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GDRILPOT::keywordName = "GDRILPOT";
const std::string GDRILPOT::GROUP_NAME::itemName = "GROUP_NAME";
const std::string GDRILPOT::QNTY_TYPE::itemName = "QNTY_TYPE";
const std::string GDRILPOT::MIN_POTENTIAL_RATE::itemName = "MIN_POTENTIAL_RATE";
const double GDRILPOT::MIN_POTENTIAL_RATE::defaultValue = 0.000000;


GECON::GECON( ) : ParserKeyword("GECON")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GECON");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("MIN_OIL_RATE", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        record.addItem(item);
     }
     {
        ParserItem item("MIN_GAS_RATE", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_WCT", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_GOR", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_WATER_GAS_RATIO", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        record.addItem(item);
     }
     {
        ParserItem item("WORKOVER", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     {
        ParserItem item("END_RUN", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_OPEN_WELLS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GECON::keywordName = "GECON";
const std::string GECON::GROUP::itemName = "GROUP";
const std::string GECON::MIN_OIL_RATE::itemName = "MIN_OIL_RATE";
const UDAValue GECON::MIN_OIL_RATE::defaultValue = UDAValue(0.000000);
const std::string GECON::MIN_GAS_RATE::itemName = "MIN_GAS_RATE";
const UDAValue GECON::MIN_GAS_RATE::defaultValue = UDAValue(0.000000);
const std::string GECON::MAX_WCT::itemName = "MAX_WCT";
const UDAValue GECON::MAX_WCT::defaultValue = UDAValue(0.000000);
const std::string GECON::MAX_GOR::itemName = "MAX_GOR";
const UDAValue GECON::MAX_GOR::defaultValue = UDAValue(0.000000);
const std::string GECON::MAX_WATER_GAS_RATIO::itemName = "MAX_WATER_GAS_RATIO";
const UDAValue GECON::MAX_WATER_GAS_RATIO::defaultValue = UDAValue(0.000000);
const std::string GECON::WORKOVER::itemName = "WORKOVER";
const std::string GECON::WORKOVER::defaultValue = "NONE";
const std::string GECON::END_RUN::itemName = "END_RUN";
const std::string GECON::END_RUN::defaultValue = "NO";
const std::string GECON::MAX_OPEN_WELLS::itemName = "MAX_OPEN_WELLS";
const int GECON::MAX_OPEN_WELLS::defaultValue = 0;


GEFAC::GEFAC( ) : ParserKeyword("GEFAC")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GEFAC");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("EFFICIENCY_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("TRANSFER_EXT_NET", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GEFAC::keywordName = "GEFAC";
const std::string GEFAC::GROUP::itemName = "GROUP";
const std::string GEFAC::EFFICIENCY_FACTOR::itemName = "EFFICIENCY_FACTOR";
const double GEFAC::EFFICIENCY_FACTOR::defaultValue = 1.000000;
const std::string GEFAC::TRANSFER_EXT_NET::itemName = "TRANSFER_EXT_NET";
const std::string GEFAC::TRANSFER_EXT_NET::defaultValue = "YES";


GETGLOB::GETGLOB( ) : ParserKeyword("GETGLOB")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("GETGLOB");
}
const std::string GETGLOB::keywordName = "GETGLOB";


GI::GI( ) : ParserKeyword("GI")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("GI");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string GI::keywordName = "GI";
const std::string GI::data::itemName = "data";


GIALL::GIALL( ) : ParserKeyword("GIALL")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("GIALL");
  {
     ParserRecord record;
     {
        ParserItem item("PRESSURE", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("TABLE", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GIALL::keywordName = "GIALL";
const std::string GIALL::PRESSURE::itemName = "PRESSURE";
const std::string GIALL::TABLE::itemName = "TABLE";


GIMODEL::GIMODEL( ) : ParserKeyword("GIMODEL")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("GIMODEL");
}
const std::string GIMODEL::keywordName = "GIMODEL";


GINODE::GINODE( ) : ParserKeyword("GINODE")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("GINODE");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GINODE::keywordName = "GINODE";
const std::string GINODE::DATA::itemName = "DATA";


GLIFTLIM::GLIFTLIM( ) : ParserKeyword("GLIFTLIM")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GLIFTLIM");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("MAX_LIFT_CAPACITY", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_NUM_WELL", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GLIFTLIM::keywordName = "GLIFTLIM";
const std::string GLIFTLIM::GROUP_NAME::itemName = "GROUP_NAME";
const std::string GLIFTLIM::MAX_LIFT_CAPACITY::itemName = "MAX_LIFT_CAPACITY";
const double GLIFTLIM::MAX_LIFT_CAPACITY::defaultValue = 0.000000;
const std::string GLIFTLIM::MAX_NUM_WELL::itemName = "MAX_NUM_WELL";
const int GLIFTLIM::MAX_NUM_WELL::defaultValue = 0;


GLIFTOPT::GLIFTOPT( ) : ParserKeyword("GLIFTOPT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GLIFTOPT");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("MAX_LIFT_GAS_SUPPLY", ParserItem::itype::DOUBLE);
        item.setDefault( double(-100000000000000000000.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_TOTAL_GAS_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(-100000000000000000000.000000) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GLIFTOPT::keywordName = "GLIFTOPT";
const std::string GLIFTOPT::GROUP_NAME::itemName = "GROUP_NAME";
const std::string GLIFTOPT::MAX_LIFT_GAS_SUPPLY::itemName = "MAX_LIFT_GAS_SUPPLY";
const double GLIFTOPT::MAX_LIFT_GAS_SUPPLY::defaultValue = -100000000000000000000.000000;
const std::string GLIFTOPT::MAX_TOTAL_GAS_RATE::itemName = "MAX_TOTAL_GAS_RATE";
const double GLIFTOPT::MAX_TOTAL_GAS_RATE::defaultValue = -100000000000000000000.000000;


GMWSET::GMWSET( ) : ParserKeyword("GMWSET")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("GMWSET");
}
const std::string GMWSET::keywordName = "GMWSET";


GNETDP::GNETDP( ) : ParserKeyword("GNETDP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GNETDP");
  {
     ParserRecord record;
     {
        ParserItem item("FIXED_PRESSURE_GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("PHASE_TYPE", ParserItem::itype::STRING);
        item.setDefault( std::string("GA") );
        record.addItem(item);
     }
     {
        ParserItem item("MIN_RATE_TRIGGER", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_RATE_TRIGGER", ParserItem::itype::DOUBLE);
        item.setDefault( double(100000000000000000000.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("PRESSURE_INCR_SUBTRACT", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("PRESSURE_INCR_ADD", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("MIN_ALLOW_PRESSURE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("MAX_ALLOW_PRESSURE", ParserItem::itype::DOUBLE);
        item.setDefault( double(100000000000000000000.000000) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GNETDP::keywordName = "GNETDP";
const std::string GNETDP::FIXED_PRESSURE_GROUP::itemName = "FIXED_PRESSURE_GROUP";
const std::string GNETDP::PHASE_TYPE::itemName = "PHASE_TYPE";
const std::string GNETDP::PHASE_TYPE::defaultValue = "GA";
const std::string GNETDP::MIN_RATE_TRIGGER::itemName = "MIN_RATE_TRIGGER";
const double GNETDP::MIN_RATE_TRIGGER::defaultValue = 0.000000;
const std::string GNETDP::MAX_RATE_TRIGGER::itemName = "MAX_RATE_TRIGGER";
const double GNETDP::MAX_RATE_TRIGGER::defaultValue = 100000000000000000000.000000;
const std::string GNETDP::PRESSURE_INCR_SUBTRACT::itemName = "PRESSURE_INCR_SUBTRACT";
const double GNETDP::PRESSURE_INCR_SUBTRACT::defaultValue = 0.000000;
const std::string GNETDP::PRESSURE_INCR_ADD::itemName = "PRESSURE_INCR_ADD";
const double GNETDP::PRESSURE_INCR_ADD::defaultValue = 0.000000;
const std::string GNETDP::MIN_ALLOW_PRESSURE::itemName = "MIN_ALLOW_PRESSURE";
const double GNETDP::MIN_ALLOW_PRESSURE::defaultValue = 0.000000;
const std::string GNETDP::MAX_ALLOW_PRESSURE::itemName = "MAX_ALLOW_PRESSURE";
const double GNETDP::MAX_ALLOW_PRESSURE::defaultValue = 100000000000000000000.000000;


GNETINJE::GNETINJE( ) : ParserKeyword("GNETINJE")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GNETINJE");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("PHASE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("PRESSURE", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("VFP_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GNETINJE::keywordName = "GNETINJE";
const std::string GNETINJE::GROUP::itemName = "GROUP";
const std::string GNETINJE::PHASE::itemName = "PHASE";
const std::string GNETINJE::PRESSURE::itemName = "PRESSURE";
const std::string GNETINJE::VFP_TABLE::itemName = "VFP_TABLE";
const int GNETINJE::VFP_TABLE::defaultValue = 0;


GNETPUMP::GNETPUMP( ) : ParserKeyword("GNETPUMP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GNETPUMP");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("PROD_RATE_SWITCH", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("PHASE_TYPE", ParserItem::itype::STRING);
        item.setDefault( std::string("OIL") );
        record.addItem(item);
     }
     {
        ParserItem item("NEW_VFT_TABLE_NUM", ParserItem::itype::INT);
        item.setDefault( 4 );
        record.addItem(item);
     }
     {
        ParserItem item("NEW_ARTIFICIAL_LIFT_QNTY", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("NEW_GAS_CONUMPTION_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("GasSurfaceVolume/Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GNETPUMP::keywordName = "GNETPUMP";
const std::string GNETPUMP::GROUP::itemName = "GROUP";
const std::string GNETPUMP::PROD_RATE_SWITCH::itemName = "PROD_RATE_SWITCH";
const double GNETPUMP::PROD_RATE_SWITCH::defaultValue = 0.000000;
const std::string GNETPUMP::PHASE_TYPE::itemName = "PHASE_TYPE";
const std::string GNETPUMP::PHASE_TYPE::defaultValue = "OIL";
const std::string GNETPUMP::NEW_VFT_TABLE_NUM::itemName = "NEW_VFT_TABLE_NUM";
const int GNETPUMP::NEW_VFT_TABLE_NUM::defaultValue = 4;
const std::string GNETPUMP::NEW_ARTIFICIAL_LIFT_QNTY::itemName = "NEW_ARTIFICIAL_LIFT_QNTY";
const double GNETPUMP::NEW_ARTIFICIAL_LIFT_QNTY::defaultValue = 0.000000;
const std::string GNETPUMP::NEW_GAS_CONUMPTION_RATE::itemName = "NEW_GAS_CONUMPTION_RATE";
const double GNETPUMP::NEW_GAS_CONUMPTION_RATE::defaultValue = 0.000000;


GPMAINT::GPMAINT( ) : ParserKeyword("GPMAINT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GPMAINT");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("FLOW_TARGET", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("REGION", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("FIP_FAMILY", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("PRESSURE_TARGET", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("PROP_CONSTANT", ParserItem::itype::DOUBLE);
        item.push_backDimension("ReservoirVolume/Time*Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("TIME_CONSTANT", ParserItem::itype::DOUBLE);
        item.push_backDimension("Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GPMAINT::keywordName = "GPMAINT";
const std::string GPMAINT::GROUP::itemName = "GROUP";
const std::string GPMAINT::FLOW_TARGET::itemName = "FLOW_TARGET";
const std::string GPMAINT::REGION::itemName = "REGION";
const std::string GPMAINT::FIP_FAMILY::itemName = "FIP_FAMILY";
const std::string GPMAINT::PRESSURE_TARGET::itemName = "PRESSURE_TARGET";
const std::string GPMAINT::PROP_CONSTANT::itemName = "PROP_CONSTANT";
const std::string GPMAINT::TIME_CONSTANT::itemName = "TIME_CONSTANT";


GRADGRUP::GRADGRUP( ) : ParserKeyword("GRADGRUP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GRADGRUP");
  {
     ParserRecord record;
     {
        ParserItem item("MNENONIC", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GRADGRUP::keywordName = "GRADGRUP";
const std::string GRADGRUP::MNENONIC::itemName = "MNENONIC";


GRADRESV::GRADRESV( ) : ParserKeyword("GRADRESV")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GRADRESV");
  {
     ParserRecord record;
     {
        ParserItem item("MNENONIC", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GRADRESV::keywordName = "GRADRESV";
const std::string GRADRESV::MNENONIC::itemName = "MNENONIC";


GRADRFT::GRADRFT( ) : ParserKeyword("GRADRFT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GRADRFT");
  {
     ParserRecord record;
     {
        ParserItem item("MNENONIC", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GRADRFT::keywordName = "GRADRFT";
const std::string GRADRFT::MNENONIC::itemName = "MNENONIC";


GRADWELL::GRADWELL( ) : ParserKeyword("GRADWELL")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GRADWELL");
  {
     ParserRecord record;
     {
        ParserItem item("MNENONIC", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GRADWELL::keywordName = "GRADWELL";
const std::string GRADWELL::MNENONIC::itemName = "MNENONIC";


GRAVCONS::GRAVCONS( ) : ParserKeyword("GRAVCONS")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("GRAVCONS");
  {
     ParserRecord record;
     {
        ParserItem item("MNENONIC", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length*Pressure/Mass");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GRAVCONS::keywordName = "GRAVCONS";
const std::string GRAVCONS::MNENONIC::itemName = "MNENONIC";


GRAVDR::GRAVDR( ) : ParserKeyword("GRAVDR")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("GRAVDR");
}
const std::string GRAVDR::keywordName = "GRAVDR";


GRAVDRB::GRAVDRB( ) : ParserKeyword("GRAVDRB")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("GRAVDRB");
}
const std::string GRAVDRB::keywordName = "GRAVDRB";


GRAVDRM::GRAVDRM( ) : ParserKeyword("GRAVDRM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("GRAVDRM");
  {
     ParserRecord record;
     {
        ParserItem item("ALLOW_RE_INFL", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GRAVDRM::keywordName = "GRAVDRM";
const std::string GRAVDRM::ALLOW_RE_INFL::itemName = "ALLOW_RE_INFL";
const std::string GRAVDRM::ALLOW_RE_INFL::defaultValue = "YES";


GRAVITY::GRAVITY( ) : ParserKeyword("GRAVITY")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("GRAVITY");
  {
     ParserRecord record;
     {
        ParserItem item("API_GRAVITY", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("WATER_SP_GRAVITY", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("GAS_SP_GRAVITY", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.777300) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GRAVITY::keywordName = "GRAVITY";
const std::string GRAVITY::API_GRAVITY::itemName = "API_GRAVITY";
const std::string GRAVITY::WATER_SP_GRAVITY::itemName = "WATER_SP_GRAVITY";
const double GRAVITY::WATER_SP_GRAVITY::defaultValue = 1.000000;
const std::string GRAVITY::GAS_SP_GRAVITY::itemName = "GAS_SP_GRAVITY";
const double GRAVITY::GAS_SP_GRAVITY::defaultValue = 0.777300;


GRDREACH::GRDREACH( ) : ParserKeyword("GRDREACH")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GRDREACH");
  {
     ParserRecord record;
     {
        ParserItem item("RIVER", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("I", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("BRANCH_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("DISTANCE_TO_START", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("DISTANCE_TO_END", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("RCH_CONNECT_TO", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("PENETRATION_DIRECTION", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("GRID_BLOCK_COORD", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("CONTACT_AREA", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("TABLE_NUM", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("PRODUCTIVITY_INDEX", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Length/Time*Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("LENGTH_DEAD_GRID_BLOCK", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("OPTION_CONNECT_REACH", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ADJUSTMENT_REACH", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("REMOVE_CAP_PRESSURE", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("INFILTR_EQ", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("HYDRAULIC_CONDUCTIVITY", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Length/Time");
        record.addItem(item);
     }
     {
        ParserItem item("RIVER_BED_THICKNESS", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GRDREACH::keywordName = "GRDREACH";
const std::string GRDREACH::RIVER::itemName = "RIVER";
const std::string GRDREACH::I::itemName = "I";
const std::string GRDREACH::J::itemName = "J";
const std::string GRDREACH::K::itemName = "K";
const std::string GRDREACH::BRANCH_NAME::itemName = "BRANCH_NAME";
const std::string GRDREACH::DISTANCE_TO_START::itemName = "DISTANCE_TO_START";
const std::string GRDREACH::DISTANCE_TO_END::itemName = "DISTANCE_TO_END";
const std::string GRDREACH::RCH_CONNECT_TO::itemName = "RCH_CONNECT_TO";
const std::string GRDREACH::PENETRATION_DIRECTION::itemName = "PENETRATION_DIRECTION";
const std::string GRDREACH::GRID_BLOCK_COORD::itemName = "GRID_BLOCK_COORD";
const std::string GRDREACH::CONTACT_AREA::itemName = "CONTACT_AREA";
const std::string GRDREACH::TABLE_NUM::itemName = "TABLE_NUM";
const std::string GRDREACH::PRODUCTIVITY_INDEX::itemName = "PRODUCTIVITY_INDEX";
const double GRDREACH::PRODUCTIVITY_INDEX::defaultValue = 0.000000;
const std::string GRDREACH::LENGTH_DEAD_GRID_BLOCK::itemName = "LENGTH_DEAD_GRID_BLOCK";
const std::string GRDREACH::OPTION_CONNECT_REACH::itemName = "OPTION_CONNECT_REACH";
const int GRDREACH::OPTION_CONNECT_REACH::defaultValue = 0;
const std::string GRDREACH::ADJUSTMENT_REACH::itemName = "ADJUSTMENT_REACH";
const int GRDREACH::ADJUSTMENT_REACH::defaultValue = 0;
const std::string GRDREACH::REMOVE_CAP_PRESSURE::itemName = "REMOVE_CAP_PRESSURE";
const std::string GRDREACH::REMOVE_CAP_PRESSURE::defaultValue = "NO";
const std::string GRDREACH::INFILTR_EQ::itemName = "INFILTR_EQ";
const int GRDREACH::INFILTR_EQ::defaultValue = 0;
const std::string GRDREACH::HYDRAULIC_CONDUCTIVITY::itemName = "HYDRAULIC_CONDUCTIVITY";
const double GRDREACH::HYDRAULIC_CONDUCTIVITY::defaultValue = 0.000000;
const std::string GRDREACH::RIVER_BED_THICKNESS::itemName = "RIVER_BED_THICKNESS";
const double GRDREACH::RIVER_BED_THICKNESS::defaultValue = 0.000000;


GRID::GRID( ) : ParserKeyword("GRID")
{
  setFixedSize( (size_t) 0);
  clearDeckNames();
  addDeckName("GRID");
}
const std::string GRID::keywordName = "GRID";


GRIDFILE::GRIDFILE( ) : ParserKeyword("GRIDFILE")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("GRIDFILE");
  {
     ParserRecord record;
     {
        ParserItem item("GRID", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("EGRID", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GRIDFILE::keywordName = "GRIDFILE";
const std::string GRIDFILE::GRID::itemName = "GRID";
const int GRIDFILE::GRID::defaultValue = 0;
const std::string GRIDFILE::EGRID::itemName = "EGRID";
const int GRIDFILE::EGRID::defaultValue = 1;


GRIDOPTS::GRIDOPTS( ) : ParserKeyword("GRIDOPTS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("GRIDOPTS");
  {
     ParserRecord record;
     {
        ParserItem item("TRANMULT", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("NRMULT", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("NRPINC", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GRIDOPTS::keywordName = "GRIDOPTS";
const std::string GRIDOPTS::TRANMULT::itemName = "TRANMULT";
const std::string GRIDOPTS::TRANMULT::defaultValue = "NO";
const std::string GRIDOPTS::NRMULT::itemName = "NRMULT";
const int GRIDOPTS::NRMULT::defaultValue = 0;
const std::string GRIDOPTS::NRPINC::itemName = "NRPINC";
const int GRIDOPTS::NRPINC::defaultValue = 0;


GRIDUNIT::GRIDUNIT( ) : ParserKeyword("GRIDUNIT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("GRIDUNIT");
  {
     ParserRecord record;
     {
        ParserItem item("LengthUnit", ParserItem::itype::STRING);
        item.setDefault( std::string("METRES") );
        record.addItem(item);
     }
     {
        ParserItem item("MAP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GRIDUNIT::keywordName = "GRIDUNIT";
const std::string GRIDUNIT::LengthUnit::itemName = "LengthUnit";
const std::string GRIDUNIT::LengthUnit::defaultValue = "METRES";
const std::string GRIDUNIT::MAP::itemName = "MAP";


GROUP_PROBE::GROUP_PROBE( ) : ParserKeyword("GROUP_PROBE")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("GALQ");
  addDeckName("GAPI");
  addDeckName("GCIC");
  addDeckName("GCIR");
  addDeckName("GCIT");
  addDeckName("GCPC");
  addDeckName("GCPR");
  addDeckName("GCPT");
  addDeckName("GEDC");
  addDeckName("GEDCQ");
  addDeckName("GEFF");
  addDeckName("GEPR");
  addDeckName("GEPT");
  addDeckName("GESR");
  addDeckName("GEST");
  addDeckName("GFGR");
  addDeckName("GFGT");
  addDeckName("GFMF");
  addDeckName("GGCR");
  addDeckName("GGCT");
  addDeckName("GGCV");
  addDeckName("GGDC");
  addDeckName("GGDCQ");
  addDeckName("GGIGR");
  addDeckName("GGIMR");
  addDeckName("GGIMT");
  addDeckName("GGIR");
  addDeckName("GGIRH");
  addDeckName("GGIRL");
  addDeckName("GGIRNB");
  addDeckName("GGIRT");
  addDeckName("GGIT");
  addDeckName("GGITH");
  addDeckName("GGLIR");
  addDeckName("GGLR");
  addDeckName("GGLRH");
  addDeckName("GGOR");
  addDeckName("GGORH");
  addDeckName("GGPGR");
  addDeckName("GGPI");
  addDeckName("GGPI2");
  addDeckName("GGPP");
  addDeckName("GGPP2");
  addDeckName("GGPPF");
  addDeckName("GGPPF2");
  addDeckName("GGPPS");
  addDeckName("GGPPS2");
  addDeckName("GGPR");
  addDeckName("GGPRF");
  addDeckName("GGPRH");
  addDeckName("GGPRL");
  addDeckName("GGPRNB");
  addDeckName("GGPRNBFP");
  addDeckName("GGPRS");
  addDeckName("GGPRT");
  addDeckName("GGPT");
  addDeckName("GGPTF");
  addDeckName("GGPTH");
  addDeckName("GGPTS");
  addDeckName("GGQ");
  addDeckName("GGSPR");
  addDeckName("GGSR");
  addDeckName("GGSRL");
  addDeckName("GGSRU");
  addDeckName("GGSSP");
  addDeckName("GGST");
  addDeckName("GGSTP");
  addDeckName("GJPR");
  addDeckName("GJPRH");
  addDeckName("GJPRL");
  addDeckName("GJPRT");
  addDeckName("GJPT");
  addDeckName("GJPTH");
  addDeckName("GLPR");
  addDeckName("GLPRH");
  addDeckName("GLPRL");
  addDeckName("GLPRNB");
  addDeckName("GLPRT");
  addDeckName("GLPT");
  addDeckName("GLPTH");
  addDeckName("GMCPL");
  addDeckName("GMCTG");
  addDeckName("GMCTP");
  addDeckName("GMCTW");
  addDeckName("GMIR");
  addDeckName("GMIT");
  addDeckName("GMPR");
  addDeckName("GMPT");
  addDeckName("GMWDR");
  addDeckName("GMWDT");
  addDeckName("GMWIA");
  addDeckName("GMWIG");
  addDeckName("GMWIN");
  addDeckName("GMWIP");
  addDeckName("GMWIS");
  addDeckName("GMWIT");
  addDeckName("GMWIU");
  addDeckName("GMWIV");
  addDeckName("GMWPA");
  addDeckName("GMWPG");
  addDeckName("GMWPL");
  addDeckName("GMWPO");
  addDeckName("GMWPP");
  addDeckName("GMWPR");
  addDeckName("GMWPS");
  addDeckName("GMWPT");
  addDeckName("GMWPU");
  addDeckName("GMWPV");
  addDeckName("GMWWO");
  addDeckName("GMWWT");
  addDeckName("GNIR");
  addDeckName("GNIT");
  addDeckName("GNPR");
  addDeckName("GNPT");
  addDeckName("GOGR");
  addDeckName("GOGRH");
  addDeckName("GOIGR");
  addDeckName("GOIR");
  addDeckName("GOIRH");
  addDeckName("GOIRL");
  addDeckName("GOIRT");
  addDeckName("GOIT");
  addDeckName("GOITH");
  addDeckName("GOPGR");
  addDeckName("GOPI");
  addDeckName("GOPI2");
  addDeckName("GOPP");
  addDeckName("GOPP2");
  addDeckName("GOPR");
  addDeckName("GOPRF");
  addDeckName("GOPRH");
  addDeckName("GOPRL");
  addDeckName("GOPRNB");
  addDeckName("GOPRS");
  addDeckName("GOPRT");
  addDeckName("GOPT");
  addDeckName("GOPTF");
  addDeckName("GOPTH");
  addDeckName("GOPTS");
  addDeckName("GOSPR");
  addDeckName("GOSRL");
  addDeckName("GOSRU");
  addDeckName("GOSSP");
  addDeckName("GOSTP");
  addDeckName("GPR");
  addDeckName("GPRB");
  addDeckName("GPRBG");
  addDeckName("GPRBW");
  addDeckName("GPRDC");
  addDeckName("GPRFP");
  addDeckName("GPRG");
  addDeckName("GPRW");
  addDeckName("GSGR");
  addDeckName("GSGT");
  addDeckName("GSIC");
  addDeckName("GSIR");
  addDeckName("GSIT");
  addDeckName("GSMF");
  addDeckName("GSPC");
  addDeckName("GSPR");
  addDeckName("GSPT");
  addDeckName("GTICHEA");
  addDeckName("GTIRALK");
  addDeckName("GTIRANI");
  addDeckName("GTIRCAT");
  addDeckName("GTIRFOA");
  addDeckName("GTIRHEA");
  addDeckName("GTIRSUR");
  addDeckName("GTITALK");
  addDeckName("GTITANI");
  addDeckName("GTITCAT");
  addDeckName("GTITFOA");
  addDeckName("GTITHEA");
  addDeckName("GTITSUR");
  addDeckName("GTPCHEA");
  addDeckName("GTPRALK");
  addDeckName("GTPRANI");
  addDeckName("GTPRCAT");
  addDeckName("GTPRFOA");
  addDeckName("GTPRHEA");
  addDeckName("GTPRSUR");
  addDeckName("GTPTALK");
  addDeckName("GTPTANI");
  addDeckName("GTPTCAT");
  addDeckName("GTPTFOA");
  addDeckName("GTPTHEA");
  addDeckName("GTPTSUR");
  addDeckName("GVIR");
  addDeckName("GVIRL");
  addDeckName("GVIRT");
  addDeckName("GVIT");
  addDeckName("GVPGR");
  addDeckName("GVPR");
  addDeckName("GVPRL");
  addDeckName("GVPRT");
  addDeckName("GVPT");
  addDeckName("GWCT");
  addDeckName("GWCTH");
  addDeckName("GWGR");
  addDeckName("GWGRH");
  addDeckName("GWIGR");
  addDeckName("GWIR");
  addDeckName("GWIRH");
  addDeckName("GWIRL");
  addDeckName("GWIRNB");
  addDeckName("GWIRT");
  addDeckName("GWIT");
  addDeckName("GWITH");
  addDeckName("GWPGR");
  addDeckName("GWPI");
  addDeckName("GWPI2");
  addDeckName("GWPIR");
  addDeckName("GWPP");
  addDeckName("GWPP2");
  addDeckName("GWPR");
  addDeckName("GWPRH");
  addDeckName("GWPRL");
  addDeckName("GWPRNB");
  addDeckName("GWPRT");
  addDeckName("GWPT");
  addDeckName("GWPTH");
  addDeckName("GWSPR");
  addDeckName("GWSRL");
  addDeckName("GWSRU");
  addDeckName("GWSSP");
  addDeckName("GWSTP");
  setMatchRegex("GU.+|GTPR.+|GTPT.+|GTPC.+|GTIR.+|GTIT.+|GTIC.+|GTIRF.+|GTIRS.+|GTPRF.+|GTPRS.+|GTITF.+|GTITS.+|GTPTF.+|GTPTS.+|GTICF.+|GTICS.+|GTPCF.+|GTPCS.+");
  {
     ParserRecord record;
     {
        ParserItem item("GROUPS", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GROUP_PROBE::keywordName = "GROUP_PROBE";
const std::string GROUP_PROBE::GROUPS::itemName = "GROUPS";


GRUPMAST::GRUPMAST( ) : ParserKeyword("GRUPMAST")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GRUPMAST");
  {
     ParserRecord record;
     {
        ParserItem item("MASTER_GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SLAVE_RESERVOIR", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SLAVE_GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("LIMITING_FRACTION", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GRUPMAST::keywordName = "GRUPMAST";
const std::string GRUPMAST::MASTER_GROUP::itemName = "MASTER_GROUP";
const std::string GRUPMAST::SLAVE_RESERVOIR::itemName = "SLAVE_RESERVOIR";
const std::string GRUPMAST::SLAVE_GROUP::itemName = "SLAVE_GROUP";
const std::string GRUPMAST::LIMITING_FRACTION::itemName = "LIMITING_FRACTION";


GRUPNET::GRUPNET( ) : ParserKeyword("GRUPNET")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  addValidSectionName("SPECIAL");
  clearDeckNames();
  addDeckName("GRUPNET");
  {
     ParserRecord record;
     {
        ParserItem item("NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TERMINAL_PRESSURE", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("VFP_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ALQ", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("SUB_SEA_MANIFOLD", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("LIFT_GAS_FLOW_THROUGH", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("ALQ_SURFACE_EQV", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GRUPNET::keywordName = "GRUPNET";
const std::string GRUPNET::NAME::itemName = "NAME";
const std::string GRUPNET::TERMINAL_PRESSURE::itemName = "TERMINAL_PRESSURE";
const std::string GRUPNET::VFP_TABLE::itemName = "VFP_TABLE";
const int GRUPNET::VFP_TABLE::defaultValue = 0;
const std::string GRUPNET::ALQ::itemName = "ALQ";
const double GRUPNET::ALQ::defaultValue = 0.000000;
const std::string GRUPNET::SUB_SEA_MANIFOLD::itemName = "SUB_SEA_MANIFOLD";
const std::string GRUPNET::SUB_SEA_MANIFOLD::defaultValue = "NO";
const std::string GRUPNET::LIFT_GAS_FLOW_THROUGH::itemName = "LIFT_GAS_FLOW_THROUGH";
const std::string GRUPNET::LIFT_GAS_FLOW_THROUGH::defaultValue = "NO";
const std::string GRUPNET::ALQ_SURFACE_EQV::itemName = "ALQ_SURFACE_EQV";
const std::string GRUPNET::ALQ_SURFACE_EQV::defaultValue = "NONE";


GRUPRIG::GRUPRIG( ) : ParserKeyword("GRUPRIG")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GRUPRIG");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("WORKOVER_RIG_NUM", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("DRILLING_RIG_NUM", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ADD_OR_REMOVE", ParserItem::itype::STRING);
        item.setDefault( std::string("ADD") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GRUPRIG::keywordName = "GRUPRIG";
const std::string GRUPRIG::GROUP::itemName = "GROUP";
const std::string GRUPRIG::WORKOVER_RIG_NUM::itemName = "WORKOVER_RIG_NUM";
const int GRUPRIG::WORKOVER_RIG_NUM::defaultValue = 0;
const std::string GRUPRIG::DRILLING_RIG_NUM::itemName = "DRILLING_RIG_NUM";
const int GRUPRIG::DRILLING_RIG_NUM::defaultValue = 0;
const std::string GRUPRIG::ADD_OR_REMOVE::itemName = "ADD_OR_REMOVE";
const std::string GRUPRIG::ADD_OR_REMOVE::defaultValue = "ADD";


GRUPSLAV::GRUPSLAV( ) : ParserKeyword("GRUPSLAV")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GRUPSLAV");
  {
     ParserRecord record;
     {
        ParserItem item("SLAVE_GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("MASTER_GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("OIL_PROD_CONSTRAINTS", ParserItem::itype::STRING);
        item.setDefault( std::string("MAST") );
        record.addItem(item);
     }
     {
        ParserItem item("WAT_PROD_CONSTRAINTS", ParserItem::itype::STRING);
        item.setDefault( std::string("MAST") );
        record.addItem(item);
     }
     {
        ParserItem item("GAS_PROD_CONSTRAINTS", ParserItem::itype::STRING);
        item.setDefault( std::string("MAST") );
        record.addItem(item);
     }
     {
        ParserItem item("FLUID_VOL_PROD_CONSTRAINTS", ParserItem::itype::STRING);
        item.setDefault( std::string("MAST") );
        record.addItem(item);
     }
     {
        ParserItem item("OIL_INJ_PROD_CONSTRAINTS", ParserItem::itype::STRING);
        item.setDefault( std::string("MAST") );
        record.addItem(item);
     }
     {
        ParserItem item("WAT_INJ_PROD_CONSTRAINTS", ParserItem::itype::STRING);
        item.setDefault( std::string("MAST") );
        record.addItem(item);
     }
     {
        ParserItem item("GAS_INJ_PROD_CONSTRAINTS", ParserItem::itype::STRING);
        item.setDefault( std::string("MAST") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GRUPSLAV::keywordName = "GRUPSLAV";
const std::string GRUPSLAV::SLAVE_GROUP::itemName = "SLAVE_GROUP";
const std::string GRUPSLAV::MASTER_GROUP::itemName = "MASTER_GROUP";
const std::string GRUPSLAV::OIL_PROD_CONSTRAINTS::itemName = "OIL_PROD_CONSTRAINTS";
const std::string GRUPSLAV::OIL_PROD_CONSTRAINTS::defaultValue = "MAST";
const std::string GRUPSLAV::WAT_PROD_CONSTRAINTS::itemName = "WAT_PROD_CONSTRAINTS";
const std::string GRUPSLAV::WAT_PROD_CONSTRAINTS::defaultValue = "MAST";
const std::string GRUPSLAV::GAS_PROD_CONSTRAINTS::itemName = "GAS_PROD_CONSTRAINTS";
const std::string GRUPSLAV::GAS_PROD_CONSTRAINTS::defaultValue = "MAST";
const std::string GRUPSLAV::FLUID_VOL_PROD_CONSTRAINTS::itemName = "FLUID_VOL_PROD_CONSTRAINTS";
const std::string GRUPSLAV::FLUID_VOL_PROD_CONSTRAINTS::defaultValue = "MAST";
const std::string GRUPSLAV::OIL_INJ_PROD_CONSTRAINTS::itemName = "OIL_INJ_PROD_CONSTRAINTS";
const std::string GRUPSLAV::OIL_INJ_PROD_CONSTRAINTS::defaultValue = "MAST";
const std::string GRUPSLAV::WAT_INJ_PROD_CONSTRAINTS::itemName = "WAT_INJ_PROD_CONSTRAINTS";
const std::string GRUPSLAV::WAT_INJ_PROD_CONSTRAINTS::defaultValue = "MAST";
const std::string GRUPSLAV::GAS_INJ_PROD_CONSTRAINTS::itemName = "GAS_INJ_PROD_CONSTRAINTS";
const std::string GRUPSLAV::GAS_INJ_PROD_CONSTRAINTS::defaultValue = "MAST";


GRUPTARG::GRUPTARG( ) : ParserKeyword("GRUPTARG")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GRUPTARG");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TARGET", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("NEW_VALUE", ParserItem::itype::DOUBLE);
        item.setDefault( double(999999999999999949387135297074018866963645011013410073083904.000000) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GRUPTARG::keywordName = "GRUPTARG";
const std::string GRUPTARG::GROUP::itemName = "GROUP";
const std::string GRUPTARG::TARGET::itemName = "TARGET";
const std::string GRUPTARG::NEW_VALUE::itemName = "NEW_VALUE";
const double GRUPTARG::NEW_VALUE::defaultValue = 999999999999999949387135297074018866963645011013410073083904.000000;


GRUPTREE::GRUPTREE( ) : ParserKeyword("GRUPTREE")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GRUPTREE");
  {
     ParserRecord record;
     {
        ParserItem item("CHILD_GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("PARENT_GROUP", ParserItem::itype::STRING);
        item.setDefault( std::string("FIELD") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GRUPTREE::keywordName = "GRUPTREE";
const std::string GRUPTREE::CHILD_GROUP::itemName = "CHILD_GROUP";
const std::string GRUPTREE::PARENT_GROUP::itemName = "PARENT_GROUP";
const std::string GRUPTREE::PARENT_GROUP::defaultValue = "FIELD";


GSATINJE::GSATINJE( ) : ParserKeyword("GSATINJE")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GSATINJE");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("PHASE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SURF_INJ_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("RES_INJ_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("MEAN_CALORIFIC", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Energy/GasSurfaceVolume");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GSATINJE::keywordName = "GSATINJE";
const std::string GSATINJE::GROUP::itemName = "GROUP";
const std::string GSATINJE::PHASE::itemName = "PHASE";
const std::string GSATINJE::SURF_INJ_RATE::itemName = "SURF_INJ_RATE";
const double GSATINJE::SURF_INJ_RATE::defaultValue = 0.000000;
const std::string GSATINJE::RES_INJ_RATE::itemName = "RES_INJ_RATE";
const double GSATINJE::RES_INJ_RATE::defaultValue = 0.000000;
const std::string GSATINJE::MEAN_CALORIFIC::itemName = "MEAN_CALORIFIC";
const double GSATINJE::MEAN_CALORIFIC::defaultValue = 0.000000;


GSATPROD::GSATPROD( ) : ParserKeyword("GSATPROD")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GSATPROD");
  {
     ParserRecord record;
     {
        ParserItem item("SATELLITE_GROUP_NAME_OR_GROUP_NAME_ROOT", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("OIL_PRODUCTION_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("WATER_PRODUCTION_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("GAS_PRODUCTION_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("RES_FLUID_VOL_PRODUCTION_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("LIFT_GAS_SUPPLY_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("MEAN_CALORIFIC_VALUE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GSATPROD::keywordName = "GSATPROD";
const std::string GSATPROD::SATELLITE_GROUP_NAME_OR_GROUP_NAME_ROOT::itemName = "SATELLITE_GROUP_NAME_OR_GROUP_NAME_ROOT";
const std::string GSATPROD::OIL_PRODUCTION_RATE::itemName = "OIL_PRODUCTION_RATE";
const double GSATPROD::OIL_PRODUCTION_RATE::defaultValue = 0.000000;
const std::string GSATPROD::WATER_PRODUCTION_RATE::itemName = "WATER_PRODUCTION_RATE";
const double GSATPROD::WATER_PRODUCTION_RATE::defaultValue = 0.000000;
const std::string GSATPROD::GAS_PRODUCTION_RATE::itemName = "GAS_PRODUCTION_RATE";
const double GSATPROD::GAS_PRODUCTION_RATE::defaultValue = 0.000000;
const std::string GSATPROD::RES_FLUID_VOL_PRODUCTION_RATE::itemName = "RES_FLUID_VOL_PRODUCTION_RATE";
const double GSATPROD::RES_FLUID_VOL_PRODUCTION_RATE::defaultValue = 0.000000;
const std::string GSATPROD::LIFT_GAS_SUPPLY_RATE::itemName = "LIFT_GAS_SUPPLY_RATE";
const double GSATPROD::LIFT_GAS_SUPPLY_RATE::defaultValue = 0.000000;
const std::string GSATPROD::MEAN_CALORIFIC_VALUE::itemName = "MEAN_CALORIFIC_VALUE";
const double GSATPROD::MEAN_CALORIFIC_VALUE::defaultValue = 0.000000;


GSEPCOND::GSEPCOND( ) : ParserKeyword("GSEPCOND")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GSEPCOND");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SEPARATOR", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GSEPCOND::keywordName = "GSEPCOND";
const std::string GSEPCOND::GROUP::itemName = "GROUP";
const std::string GSEPCOND::SEPARATOR::itemName = "SEPARATOR";


GSSCPTST::GSSCPTST( ) : ParserKeyword("GSSCPTST")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GSSCPTST");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("CONTROL_MODE", ParserItem::itype::STRING);
        item.setDefault( std::string("GRAT") );
        record.addItem(item);
     }
     {
        ParserItem item("TARGET_PROD_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("TARGET_PROD_PERIOD", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("MAX_PROD_RATE_FLAG", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("CONV_TOLERANCE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("MAT_IT", ParserItem::itype::INT);
        item.setDefault( 6 );
        record.addItem(item);
     }
     {
        ParserItem item("SUB_GRP_CONTROL_FLAG", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GSSCPTST::keywordName = "GSSCPTST";
const std::string GSSCPTST::GROUP::itemName = "GROUP";
const std::string GSSCPTST::CONTROL_MODE::itemName = "CONTROL_MODE";
const std::string GSSCPTST::CONTROL_MODE::defaultValue = "GRAT";
const std::string GSSCPTST::TARGET_PROD_RATE::itemName = "TARGET_PROD_RATE";
const double GSSCPTST::TARGET_PROD_RATE::defaultValue = 0.000000;
const std::string GSSCPTST::TARGET_PROD_PERIOD::itemName = "TARGET_PROD_PERIOD";
const double GSSCPTST::TARGET_PROD_PERIOD::defaultValue = 0.000000;
const std::string GSSCPTST::MAX_PROD_RATE_FLAG::itemName = "MAX_PROD_RATE_FLAG";
const int GSSCPTST::MAX_PROD_RATE_FLAG::defaultValue = 1;
const std::string GSSCPTST::CONV_TOLERANCE::itemName = "CONV_TOLERANCE";
const double GSSCPTST::CONV_TOLERANCE::defaultValue = 0.000000;
const std::string GSSCPTST::MAT_IT::itemName = "MAT_IT";
const int GSSCPTST::MAT_IT::defaultValue = 6;
const std::string GSSCPTST::SUB_GRP_CONTROL_FLAG::itemName = "SUB_GRP_CONTROL_FLAG";
const int GSSCPTST::SUB_GRP_CONTROL_FLAG::defaultValue = 1;


GSWINGF::GSWINGF( ) : ParserKeyword("GSWINGF")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GSWINGF");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SWING_JAN", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("SWING_FEB", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("SWING_MAR", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("SWING_APR", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("SWING_MAY", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("SWING_JUN", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("SWING_JUL", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("SWING_AUG", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("SWING_SEP", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("SWING_OCT", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("SWING_NOV", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("SWING_DEC", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_JAN", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_FEB", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_MAR", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_APR", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_MAY", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_JUN", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_JUL", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_AUG", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_SEP", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_OCT", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_NOV", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_DEC", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GSWINGF::keywordName = "GSWINGF";
const std::string GSWINGF::GROUP::itemName = "GROUP";
const std::string GSWINGF::SWING_JAN::itemName = "SWING_JAN";
const std::string GSWINGF::SWING_FEB::itemName = "SWING_FEB";
const std::string GSWINGF::SWING_MAR::itemName = "SWING_MAR";
const std::string GSWINGF::SWING_APR::itemName = "SWING_APR";
const std::string GSWINGF::SWING_MAY::itemName = "SWING_MAY";
const std::string GSWINGF::SWING_JUN::itemName = "SWING_JUN";
const std::string GSWINGF::SWING_JUL::itemName = "SWING_JUL";
const std::string GSWINGF::SWING_AUG::itemName = "SWING_AUG";
const std::string GSWINGF::SWING_SEP::itemName = "SWING_SEP";
const std::string GSWINGF::SWING_OCT::itemName = "SWING_OCT";
const std::string GSWINGF::SWING_NOV::itemName = "SWING_NOV";
const std::string GSWINGF::SWING_DEC::itemName = "SWING_DEC";
const std::string GSWINGF::PROFILE_JAN::itemName = "PROFILE_JAN";
const std::string GSWINGF::PROFILE_FEB::itemName = "PROFILE_FEB";
const std::string GSWINGF::PROFILE_MAR::itemName = "PROFILE_MAR";
const std::string GSWINGF::PROFILE_APR::itemName = "PROFILE_APR";
const std::string GSWINGF::PROFILE_MAY::itemName = "PROFILE_MAY";
const std::string GSWINGF::PROFILE_JUN::itemName = "PROFILE_JUN";
const std::string GSWINGF::PROFILE_JUL::itemName = "PROFILE_JUL";
const std::string GSWINGF::PROFILE_AUG::itemName = "PROFILE_AUG";
const std::string GSWINGF::PROFILE_SEP::itemName = "PROFILE_SEP";
const std::string GSWINGF::PROFILE_OCT::itemName = "PROFILE_OCT";
const std::string GSWINGF::PROFILE_NOV::itemName = "PROFILE_NOV";
const std::string GSWINGF::PROFILE_DEC::itemName = "PROFILE_DEC";


GTADD::GTADD( ) : ParserKeyword("GTADD")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GTADD");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TARGET", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("QUANTITY", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("NUM_ADDITIONS", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GTADD::keywordName = "GTADD";
const std::string GTADD::GROUP::itemName = "GROUP";
const std::string GTADD::TARGET::itemName = "TARGET";
const std::string GTADD::QUANTITY::itemName = "QUANTITY";
const std::string GTADD::NUM_ADDITIONS::itemName = "NUM_ADDITIONS";
const int GTADD::NUM_ADDITIONS::defaultValue = 1;


GTMULT::GTMULT( ) : ParserKeyword("GTMULT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GTMULT");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TARGET", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("QUANTITY", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("NUM_MULT", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GTMULT::keywordName = "GTMULT";
const std::string GTMULT::GROUP::itemName = "GROUP";
const std::string GTMULT::TARGET::itemName = "TARGET";
const std::string GTMULT::QUANTITY::itemName = "QUANTITY";
const std::string GTMULT::NUM_MULT::itemName = "NUM_MULT";
const int GTMULT::NUM_MULT::defaultValue = 1;


GUIDECAL::GUIDECAL( ) : ParserKeyword("GUIDECAL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GUIDECAL");
  {
     ParserRecord record;
     {
        ParserItem item("COEFF_A", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("COEFF_B", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GUIDECAL::keywordName = "GUIDECAL";
const std::string GUIDECAL::COEFF_A::itemName = "COEFF_A";
const std::string GUIDECAL::COEFF_B::itemName = "COEFF_B";


GUIDERAT::GUIDERAT( ) : ParserKeyword("GUIDERAT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GUIDERAT");
  {
     ParserRecord record;
     {
        ParserItem item("MIN_CALC_TIME", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("NOMINATED_PHASE", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     {
        ParserItem item("A", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("B", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("C", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("D", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("E", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("F", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("ALLOW_INCREASE", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     {
        ParserItem item("DAMPING_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("USE_FREE_GAS", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("MIN_GUIDE_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-06) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GUIDERAT::keywordName = "GUIDERAT";
const std::string GUIDERAT::MIN_CALC_TIME::itemName = "MIN_CALC_TIME";
const double GUIDERAT::MIN_CALC_TIME::defaultValue = 0.000000;
const std::string GUIDERAT::NOMINATED_PHASE::itemName = "NOMINATED_PHASE";
const std::string GUIDERAT::NOMINATED_PHASE::defaultValue = "NONE";
const std::string GUIDERAT::A::itemName = "A";
const double GUIDERAT::A::defaultValue = 0.000000;
const std::string GUIDERAT::B::itemName = "B";
const double GUIDERAT::B::defaultValue = 0.000000;
const std::string GUIDERAT::C::itemName = "C";
const double GUIDERAT::C::defaultValue = 0.000000;
const std::string GUIDERAT::D::itemName = "D";
const double GUIDERAT::D::defaultValue = 0.000000;
const std::string GUIDERAT::E::itemName = "E";
const double GUIDERAT::E::defaultValue = 0.000000;
const std::string GUIDERAT::F::itemName = "F";
const double GUIDERAT::F::defaultValue = 0.000000;
const std::string GUIDERAT::ALLOW_INCREASE::itemName = "ALLOW_INCREASE";
const std::string GUIDERAT::ALLOW_INCREASE::defaultValue = "YES";
const std::string GUIDERAT::DAMPING_FACTOR::itemName = "DAMPING_FACTOR";
const double GUIDERAT::DAMPING_FACTOR::defaultValue = 1.000000;
const std::string GUIDERAT::USE_FREE_GAS::itemName = "USE_FREE_GAS";
const std::string GUIDERAT::USE_FREE_GAS::defaultValue = "NO";
const std::string GUIDERAT::MIN_GUIDE_RATE::itemName = "MIN_GUIDE_RATE";
const double GUIDERAT::MIN_GUIDE_RATE::defaultValue = 0.000001;


GUPFREQ::GUPFREQ( ) : ParserKeyword("GUPFREQ")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GUPFREQ");
  {
     ParserRecord record;
     {
        ParserItem item("UPDATE_FREQ_TYPE", ParserItem::itype::STRING);
        item.setDefault( std::string("ALL") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GUPFREQ::keywordName = "GUPFREQ";
const std::string GUPFREQ::UPDATE_FREQ_TYPE::itemName = "UPDATE_FREQ_TYPE";
const std::string GUPFREQ::UPDATE_FREQ_TYPE::defaultValue = "ALL";


GWRTWCV::GWRTWCV( ) : ParserKeyword("GWRTWCV")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("GWRTWCV");
  {
     ParserRecord record;
     {
        ParserItem item("WELLS", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string GWRTWCV::keywordName = "GWRTWCV";
const std::string GWRTWCV::WELLS::itemName = "WELLS";


HALFTRAN::HALFTRAN( ) : ParserKeyword("HALFTRAN")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("HALFTRAN");
}
const std::string HALFTRAN::keywordName = "HALFTRAN";


HBNUM::HBNUM( ) : ParserKeyword("HBNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("HBNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string HBNUM::keywordName = "HBNUM";
const std::string HBNUM::data::itemName = "data";


HDISP::HDISP( ) : ParserKeyword("HDISP")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("HDISP");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        item.push_backDimension("Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string HDISP::keywordName = "HDISP";
const std::string HDISP::DATA::itemName = "DATA";


HEATCR::HEATCR( ) : ParserKeyword("HEATCR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("HEATCR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Energy/Length*Length*Length*AbsoluteTemperature");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string HEATCR::keywordName = "HEATCR";
const std::string HEATCR::data::itemName = "data";


HEATCRT::HEATCRT( ) : ParserKeyword("HEATCRT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("HEATCRT");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Energy/Length*Length*Length*AbsoluteTemperature*AbsoluteTemperature");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string HEATCRT::keywordName = "HEATCRT";
const std::string HEATCRT::data::itemName = "data";


HMAQUCT::HMAQUCT( ) : ParserKeyword("HMAQUCT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("HMAQUCT");
  {
     ParserRecord record;
     {
        ParserItem item("AQUIFER_ID", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("DERIVATIES_RESP_PERM_MULT", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("DERIVATIES_RESP_OPEN_ANGLE_MULT", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("DERIVATIES_RESP_AQUIFER_DEPTH", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string HMAQUCT::keywordName = "HMAQUCT";
const std::string HMAQUCT::AQUIFER_ID::itemName = "AQUIFER_ID";
const std::string HMAQUCT::DERIVATIES_RESP_PERM_MULT::itemName = "DERIVATIES_RESP_PERM_MULT";
const std::string HMAQUCT::DERIVATIES_RESP_PERM_MULT::defaultValue = "NO";
const std::string HMAQUCT::DERIVATIES_RESP_OPEN_ANGLE_MULT::itemName = "DERIVATIES_RESP_OPEN_ANGLE_MULT";
const std::string HMAQUCT::DERIVATIES_RESP_OPEN_ANGLE_MULT::defaultValue = "NO";
const std::string HMAQUCT::DERIVATIES_RESP_AQUIFER_DEPTH::itemName = "DERIVATIES_RESP_AQUIFER_DEPTH";
const std::string HMAQUCT::DERIVATIES_RESP_AQUIFER_DEPTH::defaultValue = "NO";


HMAQUFET::HMAQUFET( ) : ParserKeyword("HMAQUFET")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("HMAQUFET");
  {
     ParserRecord record;
     {
        ParserItem item("AQUIFER_ID", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("DERIVATIES_RESP_WAT_VOL_MULT", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("DERIVATIES_RESP_AQUIFER_PROD_INDEX_MULT", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("DERIVATIES_RESP_AQUIFER_DEPTH", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string HMAQUFET::keywordName = "HMAQUFET";
const std::string HMAQUFET::AQUIFER_ID::itemName = "AQUIFER_ID";
const std::string HMAQUFET::DERIVATIES_RESP_WAT_VOL_MULT::itemName = "DERIVATIES_RESP_WAT_VOL_MULT";
const std::string HMAQUFET::DERIVATIES_RESP_WAT_VOL_MULT::defaultValue = "NO";
const std::string HMAQUFET::DERIVATIES_RESP_AQUIFER_PROD_INDEX_MULT::itemName = "DERIVATIES_RESP_AQUIFER_PROD_INDEX_MULT";
const std::string HMAQUFET::DERIVATIES_RESP_AQUIFER_PROD_INDEX_MULT::defaultValue = "NO";
const std::string HMAQUFET::DERIVATIES_RESP_AQUIFER_DEPTH::itemName = "DERIVATIES_RESP_AQUIFER_DEPTH";
const std::string HMAQUFET::DERIVATIES_RESP_AQUIFER_DEPTH::defaultValue = "NO";


HMAQUNUM::HMAQUNUM( ) : ParserKeyword("HMAQUNUM")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("HMAQUNUM");
  {
     ParserRecord record;
     {
        ParserItem item("AQUIFER_ID", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("DERIVATIES_RESP_PORE_VOL_MULT", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("DERIVATIES_RESP_AQUIFER_PERM_MULT", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("DERIVATIES_RESP_AQUIFER_GRID_CON_TRANS", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string HMAQUNUM::keywordName = "HMAQUNUM";
const std::string HMAQUNUM::AQUIFER_ID::itemName = "AQUIFER_ID";
const std::string HMAQUNUM::DERIVATIES_RESP_PORE_VOL_MULT::itemName = "DERIVATIES_RESP_PORE_VOL_MULT";
const std::string HMAQUNUM::DERIVATIES_RESP_PORE_VOL_MULT::defaultValue = "NO";
const std::string HMAQUNUM::DERIVATIES_RESP_AQUIFER_PERM_MULT::itemName = "DERIVATIES_RESP_AQUIFER_PERM_MULT";
const std::string HMAQUNUM::DERIVATIES_RESP_AQUIFER_GRID_CON_TRANS::itemName = "DERIVATIES_RESP_AQUIFER_GRID_CON_TRANS";
const std::string HMAQUNUM::DERIVATIES_RESP_AQUIFER_GRID_CON_TRANS::defaultValue = "NO";


HMDIMS::HMDIMS( ) : ParserKeyword("HMDIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("HMDIMS");
  {
     ParserRecord record;
     {
        ParserItem item("MAX_GRAD_REGIONS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_SUB_REGIONS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_GRADS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_FAULTS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_AQUIFER_PARAMS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_WELL_PARAMS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("UNUSED", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_ROCK_GRAD_PARAMS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_WELL_CONN_PARAMS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string HMDIMS::keywordName = "HMDIMS";
const std::string HMDIMS::MAX_GRAD_REGIONS::itemName = "MAX_GRAD_REGIONS";
const int HMDIMS::MAX_GRAD_REGIONS::defaultValue = 0;
const std::string HMDIMS::MAX_SUB_REGIONS::itemName = "MAX_SUB_REGIONS";
const int HMDIMS::MAX_SUB_REGIONS::defaultValue = 0;
const std::string HMDIMS::MAX_GRADS::itemName = "MAX_GRADS";
const int HMDIMS::MAX_GRADS::defaultValue = 0;
const std::string HMDIMS::MAX_FAULTS::itemName = "MAX_FAULTS";
const int HMDIMS::MAX_FAULTS::defaultValue = 0;
const std::string HMDIMS::MAX_AQUIFER_PARAMS::itemName = "MAX_AQUIFER_PARAMS";
const int HMDIMS::MAX_AQUIFER_PARAMS::defaultValue = 0;
const std::string HMDIMS::MAX_WELL_PARAMS::itemName = "MAX_WELL_PARAMS";
const int HMDIMS::MAX_WELL_PARAMS::defaultValue = 0;
const std::string HMDIMS::UNUSED::itemName = "UNUSED";
const int HMDIMS::UNUSED::defaultValue = 0;
const std::string HMDIMS::MAX_ROCK_GRAD_PARAMS::itemName = "MAX_ROCK_GRAD_PARAMS";
const int HMDIMS::MAX_ROCK_GRAD_PARAMS::defaultValue = 0;
const std::string HMDIMS::MAX_WELL_CONN_PARAMS::itemName = "MAX_WELL_CONN_PARAMS";
const int HMDIMS::MAX_WELL_CONN_PARAMS::defaultValue = 0;


HMFAULTS::HMFAULTS( ) : ParserKeyword("HMFAULTS")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("HMFAULTS");
  {
     ParserRecord record;
     {
        ParserItem item("FAULT_SEGMENT", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string HMFAULTS::keywordName = "HMFAULTS";
const std::string HMFAULTS::FAULT_SEGMENT::itemName = "FAULT_SEGMENT";


HMMLAQUN::HMMLAQUN( ) : ParserKeyword("HMMLAQUN")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("HMMLAQUN");
  {
     ParserRecord record;
     {
        ParserItem item("AQUIFER_ID", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("AQUIFER_PORE_VOL_MULT", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("AQUIFER_PORE_PERM_MULT", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("AQUIFER_GRID_CONN_MULT", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string HMMLAQUN::keywordName = "HMMLAQUN";
const std::string HMMLAQUN::AQUIFER_ID::itemName = "AQUIFER_ID";
const std::string HMMLAQUN::AQUIFER_PORE_VOL_MULT::itemName = "AQUIFER_PORE_VOL_MULT";
const double HMMLAQUN::AQUIFER_PORE_VOL_MULT::defaultValue = 1.000000;
const std::string HMMLAQUN::AQUIFER_PORE_PERM_MULT::itemName = "AQUIFER_PORE_PERM_MULT";
const double HMMLAQUN::AQUIFER_PORE_PERM_MULT::defaultValue = 1.000000;
const std::string HMMLAQUN::AQUIFER_GRID_CONN_MULT::itemName = "AQUIFER_GRID_CONN_MULT";
const double HMMLAQUN::AQUIFER_GRID_CONN_MULT::defaultValue = 1.000000;


HMMLCTAQ::HMMLCTAQ( ) : ParserKeyword("HMMLCTAQ")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("HMMLCTAQ");
  {
     ParserRecord record;
     {
        ParserItem item("AQUIFER_ID", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("AQUIFER_PERM_MULT", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("AQUIFER_ANGLE_MULT", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("AQUIFER_DEPTH_MULT", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string HMMLCTAQ::keywordName = "HMMLCTAQ";
const std::string HMMLCTAQ::AQUIFER_ID::itemName = "AQUIFER_ID";
const std::string HMMLCTAQ::AQUIFER_PERM_MULT::itemName = "AQUIFER_PERM_MULT";
const double HMMLCTAQ::AQUIFER_PERM_MULT::defaultValue = 1.000000;
const std::string HMMLCTAQ::AQUIFER_ANGLE_MULT::itemName = "AQUIFER_ANGLE_MULT";
const double HMMLCTAQ::AQUIFER_ANGLE_MULT::defaultValue = 1.000000;
const std::string HMMLCTAQ::AQUIFER_DEPTH_MULT::itemName = "AQUIFER_DEPTH_MULT";
const double HMMLCTAQ::AQUIFER_DEPTH_MULT::defaultValue = 1.000000;


HMMLFTAQ::HMMLFTAQ( ) : ParserKeyword("HMMLFTAQ")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("HMMLFTAQ");
  {
     ParserRecord record;
     {
        ParserItem item("AQUIFER_ID", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("AQUIFER_WAT_VOL_MULT", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("AQUIFER_PROD_INDEX_MULT", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("AQUIFER_DEPTH_MULT", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string HMMLFTAQ::keywordName = "HMMLFTAQ";
const std::string HMMLFTAQ::AQUIFER_ID::itemName = "AQUIFER_ID";
const std::string HMMLFTAQ::AQUIFER_WAT_VOL_MULT::itemName = "AQUIFER_WAT_VOL_MULT";
const double HMMLFTAQ::AQUIFER_WAT_VOL_MULT::defaultValue = 1.000000;
const std::string HMMLFTAQ::AQUIFER_PROD_INDEX_MULT::itemName = "AQUIFER_PROD_INDEX_MULT";
const double HMMLFTAQ::AQUIFER_PROD_INDEX_MULT::defaultValue = 1.000000;
const std::string HMMLFTAQ::AQUIFER_DEPTH_MULT::itemName = "AQUIFER_DEPTH_MULT";
const double HMMLFTAQ::AQUIFER_DEPTH_MULT::defaultValue = 1.000000;


HMMLTWCN::HMMLTWCN( ) : ParserKeyword("HMMLTWCN")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("HMMLTWCN");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("GRID", ParserItem::itype::STRING);
        item.setDefault( std::string("FIELD") );
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("CTF", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("SKIN", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string HMMLTWCN::keywordName = "HMMLTWCN";
const std::string HMMLTWCN::WELL::itemName = "WELL";
const std::string HMMLTWCN::GRID::itemName = "GRID";
const std::string HMMLTWCN::GRID::defaultValue = "FIELD";
const std::string HMMLTWCN::I::itemName = "I";
const std::string HMMLTWCN::J::itemName = "J";
const std::string HMMLTWCN::K::itemName = "K";
const std::string HMMLTWCN::CTF::itemName = "CTF";
const double HMMLTWCN::CTF::defaultValue = 1.000000;
const std::string HMMLTWCN::SKIN::itemName = "SKIN";
const double HMMLTWCN::SKIN::defaultValue = 1.000000;


HMMULTFT::HMMULTFT( ) : ParserKeyword("HMMULTFT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("HMMULTFT");
  {
     ParserRecord record;
     {
        ParserItem item("FAULT", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TRANS_MULT", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("DIFF_MULT", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string HMMULTFT::keywordName = "HMMULTFT";
const std::string HMMULTFT::FAULT::itemName = "FAULT";
const std::string HMMULTFT::TRANS_MULT::itemName = "TRANS_MULT";
const double HMMULTFT::TRANS_MULT::defaultValue = 1.000000;
const std::string HMMULTFT::DIFF_MULT::itemName = "DIFF_MULT";
const double HMMULTFT::DIFF_MULT::defaultValue = 1.000000;


HMPROPS::HMPROPS( ) : ParserKeyword("HMPROPS")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("HMPROPS");
}
const std::string HMPROPS::keywordName = "HMPROPS";


HMROCK::HMROCK( ) : ParserKeyword("HMROCK")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("HMROCK");
  {
     ParserRecord record;
     {
        ParserItem item("TABLE_NUMBER", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("CALCULATE_GRADIENTS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string HMROCK::keywordName = "HMROCK";
const std::string HMROCK::TABLE_NUMBER::itemName = "TABLE_NUMBER";
const std::string HMROCK::CALCULATE_GRADIENTS::itemName = "CALCULATE_GRADIENTS";
const int HMROCK::CALCULATE_GRADIENTS::defaultValue = 0;


HMROCKT::HMROCKT( ) : ParserKeyword("HMROCKT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("HMROCKT");
  {
     ParserRecord record;
     {
        ParserItem item("TABLE_NUMBER", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("CALCULATE_GRADIENTS_1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("CALCULATE_GRADIENTS_2", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string HMROCKT::keywordName = "HMROCKT";
const std::string HMROCKT::TABLE_NUMBER::itemName = "TABLE_NUMBER";
const std::string HMROCKT::CALCULATE_GRADIENTS_1::itemName = "CALCULATE_GRADIENTS_1";
const std::string HMROCKT::CALCULATE_GRADIENTS_2::itemName = "CALCULATE_GRADIENTS_2";


HMRREF::HMRREF( ) : ParserKeyword("HMRREF")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("ROCKCOMP","NTROCC",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("HMRREF");
  {
     ParserRecord record;
     {
        ParserItem item("P_REF", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("P_DIM", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string HMRREF::keywordName = "HMRREF";
const std::string HMRREF::P_REF::itemName = "P_REF";
const std::string HMRREF::P_DIM::itemName = "P_DIM";


HMWELCON::HMWELCON( ) : ParserKeyword("HMWELCON")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("HMWELCON");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("GRID", ParserItem::itype::STRING);
        item.setDefault( std::string("FIELD") );
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("REQ_TRANS_FACTOR_GRAD", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("REQ_SKIN_FACTOR_GRAD", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string HMWELCON::keywordName = "HMWELCON";
const std::string HMWELCON::WELL::itemName = "WELL";
const std::string HMWELCON::GRID::itemName = "GRID";
const std::string HMWELCON::GRID::defaultValue = "FIELD";
const std::string HMWELCON::I::itemName = "I";
const std::string HMWELCON::J::itemName = "J";
const std::string HMWELCON::K::itemName = "K";
const std::string HMWELCON::REQ_TRANS_FACTOR_GRAD::itemName = "REQ_TRANS_FACTOR_GRAD";
const std::string HMWELCON::REQ_TRANS_FACTOR_GRAD::defaultValue = "NO";
const std::string HMWELCON::REQ_SKIN_FACTOR_GRAD::itemName = "REQ_SKIN_FACTOR_GRAD";
const std::string HMWELCON::REQ_SKIN_FACTOR_GRAD::defaultValue = "NO";


HMWPIMLT::HMWPIMLT( ) : ParserKeyword("HMWPIMLT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("HMWPIMLT");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string HMWPIMLT::keywordName = "HMWPIMLT";
const std::string HMWPIMLT::WELL::itemName = "WELL";


HRFIN::HRFIN( ) : ParserKeyword("HRFIN")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("HRFIN");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string HRFIN::keywordName = "HRFIN";
const std::string HRFIN::data::itemName = "data";


HWKRO::HWKRO( ) : ParserKeyword("HWKRO")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("HWKRO");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string HWKRO::keywordName = "HWKRO";
const std::string HWKRO::data::itemName = "data";


HWKRORG::HWKRORG( ) : ParserKeyword("HWKRORG")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("HWKRORG");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string HWKRORG::keywordName = "HWKRORG";
const std::string HWKRORG::data::itemName = "data";


HWKRORW::HWKRORW( ) : ParserKeyword("HWKRORW")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("HWKRORW");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string HWKRORW::keywordName = "HWKRORW";
const std::string HWKRORW::data::itemName = "data";


HWKRW::HWKRW( ) : ParserKeyword("HWKRW")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("HWKRW");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string HWKRW::keywordName = "HWKRW";
const std::string HWKRW::data::itemName = "data";


HWKRWR::HWKRWR( ) : ParserKeyword("HWKRWR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("HWKRWR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string HWKRWR::keywordName = "HWKRWR";
const std::string HWKRWR::data::itemName = "data";


HWPCW::HWPCW( ) : ParserKeyword("HWPCW")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("HWPCW");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string HWPCW::keywordName = "HWPCW";
const std::string HWPCW::data::itemName = "data";


HWSNUM::HWSNUM( ) : ParserKeyword("HWSNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("HWSNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string HWSNUM::keywordName = "HWSNUM";
const std::string HWSNUM::data::itemName = "data";


HWSOGCR::HWSOGCR( ) : ParserKeyword("HWSOGCR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("HWSOGCR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string HWSOGCR::keywordName = "HWSOGCR";
const std::string HWSOGCR::data::itemName = "data";


HWSOWCR::HWSOWCR( ) : ParserKeyword("HWSOWCR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("HWSOWCR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string HWSOWCR::keywordName = "HWSOWCR";
const std::string HWSOWCR::data::itemName = "data";


HWSWCR::HWSWCR( ) : ParserKeyword("HWSWCR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("HWSWCR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string HWSWCR::keywordName = "HWSWCR";
const std::string HWSWCR::data::itemName = "data";


HWSWL::HWSWL( ) : ParserKeyword("HWSWL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("HWSWL");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string HWSWL::keywordName = "HWSWL";
const std::string HWSWL::data::itemName = "data";


HWSWLPC::HWSWLPC( ) : ParserKeyword("HWSWLPC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("HWSWLPC");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string HWSWLPC::keywordName = "HWSWLPC";
const std::string HWSWLPC::data::itemName = "data";


HWSWU::HWSWU( ) : ParserKeyword("HWSWU")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("HWSWU");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string HWSWU::keywordName = "HWSWU";
const std::string HWSWU::data::itemName = "data";


HXFIN::HXFIN( ) : ParserKeyword("HXFIN")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("HXFIN");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string HXFIN::keywordName = "HXFIN";
const std::string HXFIN::data::itemName = "data";


HYDRHEAD::HYDRHEAD( ) : ParserKeyword("HYDRHEAD")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("HYDRHEAD");
  {
     ParserRecord record;
     {
        ParserItem item("REF_DEPTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("FRESHWATER_DENSITY", ParserItem::itype::DOUBLE);
        item.push_backDimension("Density");
        record.addItem(item);
     }
     {
        ParserItem item("REMOVE_DEPTH_TERMS", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string HYDRHEAD::keywordName = "HYDRHEAD";
const std::string HYDRHEAD::REF_DEPTH::itemName = "REF_DEPTH";
const std::string HYDRHEAD::FRESHWATER_DENSITY::itemName = "FRESHWATER_DENSITY";
const std::string HYDRHEAD::REMOVE_DEPTH_TERMS::itemName = "REMOVE_DEPTH_TERMS";
const std::string HYDRHEAD::REMOVE_DEPTH_TERMS::defaultValue = "NO";


HYFIN::HYFIN( ) : ParserKeyword("HYFIN")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("HYFIN");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string HYFIN::keywordName = "HYFIN";
const std::string HYFIN::data::itemName = "data";


HYMOBGDR::HYMOBGDR( ) : ParserKeyword("HYMOBGDR")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("HYMOBGDR");
}
const std::string HYMOBGDR::keywordName = "HYMOBGDR";


HYST::HYST( ) : ParserKeyword("HYST")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("HYST");
}
const std::string HYST::keywordName = "HYST";


HYSTCHCK::HYSTCHCK( ) : ParserKeyword("HYSTCHCK")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("HYSTCHCK");
  {
     ParserRecord record;
     addRecord( record );
  }
}
const std::string HYSTCHCK::keywordName = "HYSTCHCK";


HZFIN::HZFIN( ) : ParserKeyword("HZFIN")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("HZFIN");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string HZFIN::keywordName = "HZFIN";
const std::string HZFIN::data::itemName = "data";


IHOST::IHOST( ) : ParserKeyword("IHOST")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("IHOST");
  {
     ParserRecord record;
     {
        ParserItem item("LGR", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("PROCESS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string IHOST::keywordName = "IHOST";
const std::string IHOST::LGR::itemName = "LGR";
const std::string IHOST::PROCESS::itemName = "PROCESS";
const int IHOST::PROCESS::defaultValue = 0;


IMBNUM::IMBNUM( ) : ParserKeyword("IMBNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("IMBNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string IMBNUM::keywordName = "IMBNUM";
const std::string IMBNUM::data::itemName = "data";


IMBNUMMF::IMBNUMMF( ) : ParserKeyword("IMBNUMMF")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("IMBNUMMF");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string IMBNUMMF::keywordName = "IMBNUMMF";
const std::string IMBNUMMF::data::itemName = "data";


IMKRVD::IMKRVD( ) : ParserKeyword("IMKRVD")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("ENDSCALE","NUM_TABLES",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("IMKRVD");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string IMKRVD::keywordName = "IMKRVD";
const std::string IMKRVD::DATA::itemName = "DATA";


IMPCVD::IMPCVD( ) : ParserKeyword("IMPCVD")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("ENDSCALE","NTENDP",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("IMPCVD");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        item.push_backDimension("Pressure");
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string IMPCVD::keywordName = "IMPCVD";
const std::string IMPCVD::DATA::itemName = "DATA";


IMPES::IMPES( ) : ParserKeyword("IMPES")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("IMPES");
}
const std::string IMPES::keywordName = "IMPES";


IMPLICIT::IMPLICIT( ) : ParserKeyword("IMPLICIT")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("IMPLICIT");
}
const std::string IMPLICIT::keywordName = "IMPLICIT";


IMPORT::IMPORT( ) : ParserKeyword("IMPORT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("IMPORT");
  {
     ParserRecord record;
     {
        ParserItem item("FILE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("FORMATTED", ParserItem::itype::STRING);
        item.setDefault( std::string("UNFORMATTED") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string IMPORT::keywordName = "IMPORT";
const std::string IMPORT::FILE::itemName = "FILE";
const std::string IMPORT::FORMATTED::itemName = "FORMATTED";
const std::string IMPORT::FORMATTED::defaultValue = "UNFORMATTED";


IMPTVD::IMPTVD( ) : ParserKeyword("IMPTVD")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("ENDSCALE","NUM_TABLES",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("IMPTVD");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string IMPTVD::keywordName = "IMPTVD";
const std::string IMPTVD::DATA::itemName = "DATA";


IMSPCVD::IMSPCVD( ) : ParserKeyword("IMSPCVD")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("ENDSCALE","NTENDP",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("IMSPCVD");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string IMSPCVD::keywordName = "IMSPCVD";
const std::string IMSPCVD::DATA::itemName = "DATA";


INCLUDE::INCLUDE( ) : ParserKeyword("INCLUDE")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("INCLUDE");
  {
     ParserRecord record;
     {
        ParserItem item("IncludeFile", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string INCLUDE::keywordName = "INCLUDE";
const std::string INCLUDE::IncludeFile::itemName = "IncludeFile";


INIT::INIT( ) : ParserKeyword("INIT")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("INIT");
}
const std::string INIT::keywordName = "INIT";


INRAD::INRAD( ) : ParserKeyword("INRAD")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("INRAD");
  {
     ParserRecord record;
     {
        ParserItem item("RADIUS", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string INRAD::keywordName = "INRAD";
const std::string INRAD::RADIUS::itemName = "RADIUS";


INSPEC::INSPEC( ) : ParserKeyword("INSPEC")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("INSPEC");
}
const std::string INSPEC::keywordName = "INSPEC";


INTPC::INTPC( ) : ParserKeyword("INTPC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("INTPC");
  {
     ParserRecord record;
     {
        ParserItem item("PHASE", ParserItem::itype::STRING);
        item.setDefault( std::string("BOTH") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string INTPC::keywordName = "INTPC";
const std::string INTPC::PHASE::itemName = "PHASE";
const std::string INTPC::PHASE::defaultValue = "BOTH";


IONROCK::IONROCK( ) : ParserKeyword("IONROCK")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("IONROCK");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string IONROCK::keywordName = "IONROCK";
const std::string IONROCK::data::itemName = "data";


IONXROCK::IONXROCK( ) : ParserKeyword("IONXROCK")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("IONXROCK");
  {
     ParserRecord record;
     {
        ParserItem item("VALUE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string IONXROCK::keywordName = "IONXROCK";
const std::string IONXROCK::VALUE::itemName = "VALUE";
const double IONXROCK::VALUE::defaultValue = 0.000000;


IONXSURF::IONXSURF( ) : ParserKeyword("IONXSURF")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("IONXSURF");
  {
     ParserRecord record;
     {
        ParserItem item("MOLECULAR_WEIGHT", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("ION_EXCH_CONST", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string IONXSURF::keywordName = "IONXSURF";
const std::string IONXSURF::MOLECULAR_WEIGHT::itemName = "MOLECULAR_WEIGHT";
const std::string IONXSURF::ION_EXCH_CONST::itemName = "ION_EXCH_CONST";
const double IONXSURF::ION_EXCH_CONST::defaultValue = 0.000000;


IPCG::IPCG( ) : ParserKeyword("IPCG")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("IPCG");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string IPCG::keywordName = "IPCG";
const std::string IPCG::data::itemName = "data";


IPCW::IPCW( ) : ParserKeyword("IPCW")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("IPCW");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string IPCW::keywordName = "IPCW";
const std::string IPCW::data::itemName = "data";


ISGCR::ISGCR( ) : ParserKeyword("ISGCR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ISGCR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string ISGCR::keywordName = "ISGCR";
const std::string ISGCR::data::itemName = "data";


ISGL::ISGL( ) : ParserKeyword("ISGL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ISGL");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string ISGL::keywordName = "ISGL";
const std::string ISGL::data::itemName = "data";


ISGLPC::ISGLPC( ) : ParserKeyword("ISGLPC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ISGLPC");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string ISGLPC::keywordName = "ISGLPC";
const std::string ISGLPC::data::itemName = "data";


ISGU::ISGU( ) : ParserKeyword("ISGU")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ISGU");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string ISGU::keywordName = "ISGU";
const std::string ISGU::data::itemName = "data";


ISOGCR::ISOGCR( ) : ParserKeyword("ISOGCR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ISOGCR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string ISOGCR::keywordName = "ISOGCR";
const std::string ISOGCR::data::itemName = "data";


ISOLNUM::ISOLNUM( ) : ParserKeyword("ISOLNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("ISOLNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string ISOLNUM::keywordName = "ISOLNUM";
const std::string ISOLNUM::data::itemName = "data";


ISOWCR::ISOWCR( ) : ParserKeyword("ISOWCR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ISOWCR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string ISOWCR::keywordName = "ISOWCR";
const std::string ISOWCR::data::itemName = "data";


ISWCR::ISWCR( ) : ParserKeyword("ISWCR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ISWCR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string ISWCR::keywordName = "ISWCR";
const std::string ISWCR::data::itemName = "data";


ISWL::ISWL( ) : ParserKeyword("ISWL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ISWL");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string ISWL::keywordName = "ISWL";
const std::string ISWL::data::itemName = "data";


ISWLPC::ISWLPC( ) : ParserKeyword("ISWLPC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ISWLPC");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string ISWLPC::keywordName = "ISWLPC";
const std::string ISWLPC::data::itemName = "data";


ISWU::ISWU( ) : ParserKeyword("ISWU")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ISWU");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string ISWU::keywordName = "ISWU";
const std::string ISWU::data::itemName = "data";


JFUNC::JFUNC( ) : ParserKeyword("JFUNC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("JFUNC");
  {
     ParserRecord record;
     {
        ParserItem item("FLAG", ParserItem::itype::STRING);
        item.setDefault( std::string("BOTH") );
        record.addItem(item);
     }
     {
        ParserItem item("OW_SURFACE_TENSION", ParserItem::itype::DOUBLE);
        item.setDefault( double(-1.000000) );
        item.push_backDimension("SurfaceTension");
        record.addItem(item);
     }
     {
        ParserItem item("GO_SURFACE_TENSION", ParserItem::itype::DOUBLE);
        item.setDefault( double(-1.000000) );
        item.push_backDimension("SurfaceTension");
        record.addItem(item);
     }
     {
        ParserItem item("ALPHA_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.500000) );
        record.addItem(item);
     }
     {
        ParserItem item("BETA_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.500000) );
        record.addItem(item);
     }
     {
        ParserItem item("DIRECTION", ParserItem::itype::STRING);
        item.setDefault( std::string("XY") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string JFUNC::keywordName = "JFUNC";
const std::string JFUNC::FLAG::itemName = "FLAG";
const std::string JFUNC::FLAG::defaultValue = "BOTH";
const std::string JFUNC::OW_SURFACE_TENSION::itemName = "OW_SURFACE_TENSION";
const double JFUNC::OW_SURFACE_TENSION::defaultValue = -1.000000;
const std::string JFUNC::GO_SURFACE_TENSION::itemName = "GO_SURFACE_TENSION";
const double JFUNC::GO_SURFACE_TENSION::defaultValue = -1.000000;
const std::string JFUNC::ALPHA_FACTOR::itemName = "ALPHA_FACTOR";
const double JFUNC::ALPHA_FACTOR::defaultValue = 0.500000;
const std::string JFUNC::BETA_FACTOR::itemName = "BETA_FACTOR";
const double JFUNC::BETA_FACTOR::defaultValue = 0.500000;
const std::string JFUNC::DIRECTION::itemName = "DIRECTION";
const std::string JFUNC::DIRECTION::defaultValue = "XY";


JFUNCR::JFUNCR( ) : ParserKeyword("JFUNCR")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("JFUNCR");
  {
     ParserRecord record;
     {
        ParserItem item("J_FUNCTION", ParserItem::itype::STRING);
        item.setDefault( std::string("BOTH") );
        record.addItem(item);
     }
     {
        ParserItem item("OIL_WAT_SURF_TENSTION", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("OIL_GAS_SURF_TENSTION", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("POROSITY_POWER", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.500000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("PERMEABILITY_POWER", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.500000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("PERM_DIRECTION", ParserItem::itype::STRING);
        item.setDefault( std::string("XY") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string JFUNCR::keywordName = "JFUNCR";
const std::string JFUNCR::J_FUNCTION::itemName = "J_FUNCTION";
const std::string JFUNCR::J_FUNCTION::defaultValue = "BOTH";
const std::string JFUNCR::OIL_WAT_SURF_TENSTION::itemName = "OIL_WAT_SURF_TENSTION";
const std::string JFUNCR::OIL_GAS_SURF_TENSTION::itemName = "OIL_GAS_SURF_TENSTION";
const std::string JFUNCR::POROSITY_POWER::itemName = "POROSITY_POWER";
const double JFUNCR::POROSITY_POWER::defaultValue = 0.500000;
const std::string JFUNCR::PERMEABILITY_POWER::itemName = "PERMEABILITY_POWER";
const double JFUNCR::PERMEABILITY_POWER::defaultValue = 0.500000;
const std::string JFUNCR::PERM_DIRECTION::itemName = "PERM_DIRECTION";
const std::string JFUNCR::PERM_DIRECTION::defaultValue = "XY";


KRNUM::KRNUM( ) : ParserKeyword("KRNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("KRNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string KRNUM::keywordName = "KRNUM";
const std::string KRNUM::data::itemName = "data";


KRNUMMF::KRNUMMF( ) : ParserKeyword("KRNUMMF")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("KRNUMMF");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string KRNUMMF::keywordName = "KRNUMMF";
const std::string KRNUMMF::data::itemName = "data";


LAB::LAB( ) : ParserKeyword("LAB")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("LAB");
}
const std::string LAB::keywordName = "LAB";


LANGMPL::LANGMPL( ) : ParserKeyword("LANGMPL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LANGMPL");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LANGMPL::keywordName = "LANGMPL";
const std::string LANGMPL::data::itemName = "data";


LANGMUIR::LANGMUIR( ) : ParserKeyword("LANGMUIR")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("REGDIMS","NTCREG",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LANGMUIR");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        item.push_backDimension("GasSurfaceVolume/Length*Length*Length");
        item.push_backDimension("GasSurfaceVolume/Length*Length*Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string LANGMUIR::keywordName = "LANGMUIR";
const std::string LANGMUIR::DATA::itemName = "DATA";


LANGSOLV::LANGSOLV( ) : ParserKeyword("LANGSOLV")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("REGDIMS","NTCREG",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LANGSOLV");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        item.push_backDimension("GasSurfaceVolume/Length*Length*Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string LANGSOLV::keywordName = "LANGSOLV";
const std::string LANGSOLV::DATA::itemName = "DATA";


LCUNIT::LCUNIT( ) : ParserKeyword("LCUNIT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LCUNIT");
  {
     ParserRecord record;
     {
        ParserItem item("UNIT", ParserItem::itype::STRING);
        item.setDefault( std::string("UNIT") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string LCUNIT::keywordName = "LCUNIT";
const std::string LCUNIT::UNIT::itemName = "UNIT";
const std::string LCUNIT::UNIT::defaultValue = "UNIT";


LGR::LGR( ) : ParserKeyword("LGR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("LGR");
  {
     ParserRecord record;
     {
        ParserItem item("MAXLGR", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAXCLS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MCOARS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAMALG", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MXLALG", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("LSTACK", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("INTERP", ParserItem::itype::STRING);
        item.setDefault( std::string("INTERP") );
        record.addItem(item);
     }
     {
        ParserItem item("NCHCOR", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string LGR::keywordName = "LGR";
const std::string LGR::MAXLGR::itemName = "MAXLGR";
const int LGR::MAXLGR::defaultValue = 0;
const std::string LGR::MAXCLS::itemName = "MAXCLS";
const int LGR::MAXCLS::defaultValue = 0;
const std::string LGR::MCOARS::itemName = "MCOARS";
const int LGR::MCOARS::defaultValue = 0;
const std::string LGR::MAMALG::itemName = "MAMALG";
const int LGR::MAMALG::defaultValue = 0;
const std::string LGR::MXLALG::itemName = "MXLALG";
const int LGR::MXLALG::defaultValue = 0;
const std::string LGR::LSTACK::itemName = "LSTACK";
const int LGR::LSTACK::defaultValue = 0;
const std::string LGR::INTERP::itemName = "INTERP";
const std::string LGR::INTERP::defaultValue = "INTERP";
const std::string LGR::NCHCOR::itemName = "NCHCOR";
const int LGR::NCHCOR::defaultValue = 0;


LGRCOPY::LGRCOPY( ) : ParserKeyword("LGRCOPY")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("LGRCOPY");
}
const std::string LGRCOPY::keywordName = "LGRCOPY";


LGRFREE::LGRFREE( ) : ParserKeyword("LGRFREE")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("LGRFREE");
  {
     ParserRecord record;
     {
        ParserItem item("LOCAL_GRID_REFINMENT", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string LGRFREE::keywordName = "LGRFREE";
const std::string LGRFREE::LOCAL_GRID_REFINMENT::itemName = "LOCAL_GRID_REFINMENT";


LGRLOCK::LGRLOCK( ) : ParserKeyword("LGRLOCK")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("LGRLOCK");
  {
     ParserRecord record;
     {
        ParserItem item("LOCAL_GRID_REFINMENT", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string LGRLOCK::keywordName = "LGRLOCK";
const std::string LGRLOCK::LOCAL_GRID_REFINMENT::itemName = "LOCAL_GRID_REFINMENT";


LGROFF::LGROFF( ) : ParserKeyword("LGROFF")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("LGROFF");
  {
     ParserRecord record;
     {
        ParserItem item("LOCAL_GRID_REFINMENT", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("ACTIVE_WELLS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string LGROFF::keywordName = "LGROFF";
const std::string LGROFF::LOCAL_GRID_REFINMENT::itemName = "LOCAL_GRID_REFINMENT";
const std::string LGROFF::ACTIVE_WELLS::itemName = "ACTIVE_WELLS";
const int LGROFF::ACTIVE_WELLS::defaultValue = 0;


LGRON::LGRON( ) : ParserKeyword("LGRON")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("LGRON");
  {
     ParserRecord record;
     {
        ParserItem item("LOCAL_GRID_REFINMENT", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("ACTIVE_WELLS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string LGRON::keywordName = "LGRON";
const std::string LGRON::LOCAL_GRID_REFINMENT::itemName = "LOCAL_GRID_REFINMENT";
const std::string LGRON::ACTIVE_WELLS::itemName = "ACTIVE_WELLS";
const int LGRON::ACTIVE_WELLS::defaultValue = 0;


LICENSE::LICENSE( ) : ParserKeyword("LICENSE")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("LICENSE");
  {
     ParserRecord record;
     {
        ParserItem item("FEATURE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string LICENSE::keywordName = "LICENSE";
const std::string LICENSE::FEATURE::itemName = "FEATURE";


LIFTOPT::LIFTOPT( ) : ParserKeyword("LIFTOPT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("LIFTOPT");
  {
     ParserRecord record;
     {
        ParserItem item("INCREMENT_SIZE", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("MIN_ECONOMIC_GRADIENT", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("MIN_INTERVAL_BETWEEN_GAS_LIFT_OPTIMIZATIONS", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("OPTIMISE_GAS_LIFT", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string LIFTOPT::keywordName = "LIFTOPT";
const std::string LIFTOPT::INCREMENT_SIZE::itemName = "INCREMENT_SIZE";
const std::string LIFTOPT::MIN_ECONOMIC_GRADIENT::itemName = "MIN_ECONOMIC_GRADIENT";
const std::string LIFTOPT::MIN_INTERVAL_BETWEEN_GAS_LIFT_OPTIMIZATIONS::itemName = "MIN_INTERVAL_BETWEEN_GAS_LIFT_OPTIMIZATIONS";
const double LIFTOPT::MIN_INTERVAL_BETWEEN_GAS_LIFT_OPTIMIZATIONS::defaultValue = 0.000000;
const std::string LIFTOPT::OPTIMISE_GAS_LIFT::itemName = "OPTIMISE_GAS_LIFT";
const std::string LIFTOPT::OPTIMISE_GAS_LIFT::defaultValue = "YES";


LINCOM::LINCOM( ) : ParserKeyword("LINCOM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("LINCOM");
  {
     ParserRecord record;
     {
        ParserItem item("ALPHA", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        record.addItem(item);
     }
     {
        ParserItem item("BETA", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        record.addItem(item);
     }
     {
        ParserItem item("GAMMA", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string LINCOM::keywordName = "LINCOM";
const std::string LINCOM::ALPHA::itemName = "ALPHA";
const UDAValue LINCOM::ALPHA::defaultValue = UDAValue(0.000000);
const std::string LINCOM::BETA::itemName = "BETA";
const UDAValue LINCOM::BETA::defaultValue = UDAValue(0.000000);
const std::string LINCOM::GAMMA::itemName = "GAMMA";
const UDAValue LINCOM::GAMMA::defaultValue = UDAValue(0.000000);


LINKPERM::LINKPERM( ) : ParserKeyword("LINKPERM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("LINKPERM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LINKPERM::keywordName = "LINKPERM";
const std::string LINKPERM::data::itemName = "data";


LIVEOIL::LIVEOIL( ) : ParserKeyword("LIVEOIL")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("LIVEOIL");
}
const std::string LIVEOIL::keywordName = "LIVEOIL";


LKRO::LKRO( ) : ParserKeyword("LKRO")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LKRO");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LKRO::keywordName = "LKRO";
const std::string LKRO::data::itemName = "data";


LKRORG::LKRORG( ) : ParserKeyword("LKRORG")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LKRORG");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LKRORG::keywordName = "LKRORG";
const std::string LKRORG::data::itemName = "data";


LKRORW::LKRORW( ) : ParserKeyword("LKRORW")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LKRORW");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LKRORW::keywordName = "LKRORW";
const std::string LKRORW::data::itemName = "data";


LKRW::LKRW( ) : ParserKeyword("LKRW")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LKRW");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LKRW::keywordName = "LKRW";
const std::string LKRW::data::itemName = "data";


LKRWR::LKRWR( ) : ParserKeyword("LKRWR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LKRWR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LKRWR::keywordName = "LKRWR";
const std::string LKRWR::data::itemName = "data";


LOAD::LOAD( ) : ParserKeyword("LOAD")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("LOAD");
  {
     ParserRecord record;
     {
        ParserItem item("FILE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("REPORT_STEP", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NOSIM", ParserItem::itype::STRING);
        item.setDefault( std::string("SIM") );
        record.addItem(item);
     }
     {
        ParserItem item("FORMATTED", ParserItem::itype::STRING);
        item.setDefault( std::string("UNFORMATTED") );
        record.addItem(item);
     }
     {
        ParserItem item("REQUEST_SAVE_OUTPUT", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string LOAD::keywordName = "LOAD";
const std::string LOAD::FILE::itemName = "FILE";
const std::string LOAD::REPORT_STEP::itemName = "REPORT_STEP";
const std::string LOAD::NOSIM::itemName = "NOSIM";
const std::string LOAD::NOSIM::defaultValue = "SIM";
const std::string LOAD::FORMATTED::itemName = "FORMATTED";
const std::string LOAD::FORMATTED::defaultValue = "UNFORMATTED";
const std::string LOAD::REQUEST_SAVE_OUTPUT::itemName = "REQUEST_SAVE_OUTPUT";
const std::string LOAD::REQUEST_SAVE_OUTPUT::defaultValue = "NO";


LOWSALT::LOWSALT( ) : ParserKeyword("LOWSALT")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("LOWSALT");
}
const std::string LOWSALT::keywordName = "LOWSALT";


LPCW::LPCW( ) : ParserKeyword("LPCW")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LPCW");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LPCW::keywordName = "LPCW";
const std::string LPCW::data::itemName = "data";


LSALTFNC::LSALTFNC( ) : ParserKeyword("LSALTFNC")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LSALTFNC");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string LSALTFNC::keywordName = "LSALTFNC";
const std::string LSALTFNC::DATA::itemName = "DATA";


LSLTWNUM::LSLTWNUM( ) : ParserKeyword("LSLTWNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("LSLTWNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LSLTWNUM::keywordName = "LSLTWNUM";
const std::string LSLTWNUM::data::itemName = "data";


LSNUM::LSNUM( ) : ParserKeyword("LSNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("LSNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LSNUM::keywordName = "LSNUM";
const std::string LSNUM::data::itemName = "data";


LSOGCR::LSOGCR( ) : ParserKeyword("LSOGCR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LSOGCR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LSOGCR::keywordName = "LSOGCR";
const std::string LSOGCR::data::itemName = "data";


LSOWCR::LSOWCR( ) : ParserKeyword("LSOWCR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LSOWCR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LSOWCR::keywordName = "LSOWCR";
const std::string LSOWCR::data::itemName = "data";


LSWCR::LSWCR( ) : ParserKeyword("LSWCR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LSWCR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LSWCR::keywordName = "LSWCR";
const std::string LSWCR::data::itemName = "data";


LSWL::LSWL( ) : ParserKeyword("LSWL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LSWL");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LSWL::keywordName = "LSWL";
const std::string LSWL::data::itemName = "data";


LSWLPC::LSWLPC( ) : ParserKeyword("LSWLPC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LSWLPC");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LSWLPC::keywordName = "LSWLPC";
const std::string LSWLPC::data::itemName = "data";


LSWU::LSWU( ) : ParserKeyword("LSWU")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LSWU");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LSWU::keywordName = "LSWU";
const std::string LSWU::data::itemName = "data";


LTOSIGMA::LTOSIGMA( ) : ParserKeyword("LTOSIGMA")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("LTOSIGMA");
  {
     ParserRecord record;
     {
        ParserItem item("FX", ParserItem::itype::DOUBLE);
        item.setDefault( double(4.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("FY", ParserItem::itype::DOUBLE);
        item.setDefault( double(4.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("FZ", ParserItem::itype::DOUBLE);
        item.setDefault( double(4.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("FGD", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("OPTION", ParserItem::itype::STRING);
        item.setDefault( std::string("XONLY") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string LTOSIGMA::keywordName = "LTOSIGMA";
const std::string LTOSIGMA::FX::itemName = "FX";
const double LTOSIGMA::FX::defaultValue = 4.000000;
const std::string LTOSIGMA::FY::itemName = "FY";
const double LTOSIGMA::FY::defaultValue = 4.000000;
const std::string LTOSIGMA::FZ::itemName = "FZ";
const double LTOSIGMA::FZ::defaultValue = 4.000000;
const std::string LTOSIGMA::FGD::itemName = "FGD";
const double LTOSIGMA::FGD::defaultValue = 0.000000;
const std::string LTOSIGMA::OPTION::itemName = "OPTION";
const std::string LTOSIGMA::OPTION::defaultValue = "XONLY";


LWKRO::LWKRO( ) : ParserKeyword("LWKRO")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LWKRO");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LWKRO::keywordName = "LWKRO";
const std::string LWKRO::data::itemName = "data";


LWKRORG::LWKRORG( ) : ParserKeyword("LWKRORG")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LWKRORG");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LWKRORG::keywordName = "LWKRORG";
const std::string LWKRORG::data::itemName = "data";


LWKRORW::LWKRORW( ) : ParserKeyword("LWKRORW")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LWKRORW");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LWKRORW::keywordName = "LWKRORW";
const std::string LWKRORW::data::itemName = "data";


LWKRW::LWKRW( ) : ParserKeyword("LWKRW")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LWKRW");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LWKRW::keywordName = "LWKRW";
const std::string LWKRW::data::itemName = "data";


LWKRWR::LWKRWR( ) : ParserKeyword("LWKRWR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LWKRWR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LWKRWR::keywordName = "LWKRWR";
const std::string LWKRWR::data::itemName = "data";


LWPCW::LWPCW( ) : ParserKeyword("LWPCW")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LWPCW");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LWPCW::keywordName = "LWPCW";
const std::string LWPCW::data::itemName = "data";


LWSLTNUM::LWSLTNUM( ) : ParserKeyword("LWSLTNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("LWSLTNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LWSLTNUM::keywordName = "LWSLTNUM";
const std::string LWSLTNUM::data::itemName = "data";


LWSNUM::LWSNUM( ) : ParserKeyword("LWSNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("LWSNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LWSNUM::keywordName = "LWSNUM";
const std::string LWSNUM::data::itemName = "data";


LWSOGCR::LWSOGCR( ) : ParserKeyword("LWSOGCR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LWSOGCR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LWSOGCR::keywordName = "LWSOGCR";
const std::string LWSOGCR::data::itemName = "data";


LWSOWCR::LWSOWCR( ) : ParserKeyword("LWSOWCR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LWSOWCR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LWSOWCR::keywordName = "LWSOWCR";
const std::string LWSOWCR::data::itemName = "data";


LWSWCR::LWSWCR( ) : ParserKeyword("LWSWCR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LWSWCR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LWSWCR::keywordName = "LWSWCR";
const std::string LWSWCR::data::itemName = "data";


LWSWL::LWSWL( ) : ParserKeyword("LWSWL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LWSWL");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LWSWL::keywordName = "LWSWL";
const std::string LWSWL::data::itemName = "data";


LWSWLPC::LWSWLPC( ) : ParserKeyword("LWSWLPC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LWSWLPC");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LWSWLPC::keywordName = "LWSWLPC";
const std::string LWSWLPC::data::itemName = "data";


LWSWU::LWSWU( ) : ParserKeyword("LWSWU")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("LWSWU");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LWSWU::keywordName = "LWSWU";
const std::string LWSWU::data::itemName = "data";


LX::LX( ) : ParserKeyword("LX")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("LX");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LX::keywordName = "LX";
const std::string LX::data::itemName = "data";


LY::LY( ) : ParserKeyword("LY")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("LY");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LY::keywordName = "LY";
const std::string LY::data::itemName = "data";


LZ::LZ( ) : ParserKeyword("LZ")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("LZ");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string LZ::keywordName = "LZ";
const std::string LZ::data::itemName = "data";


MAPAXES::MAPAXES( ) : ParserKeyword("MAPAXES")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("MAPAXES");
  {
     ParserRecord record;
     {
        ParserItem item("X1", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("Y1", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("X2", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("Y2", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("X3", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("Y3", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MAPAXES::keywordName = "MAPAXES";
const std::string MAPAXES::X1::itemName = "X1";
const std::string MAPAXES::Y1::itemName = "Y1";
const std::string MAPAXES::X2::itemName = "X2";
const std::string MAPAXES::Y2::itemName = "Y2";
const std::string MAPAXES::X3::itemName = "X3";
const std::string MAPAXES::Y3::itemName = "Y3";


MAPUNITS::MAPUNITS( ) : ParserKeyword("MAPUNITS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("MAPUNITS");
  {
     ParserRecord record;
     {
        ParserItem item("UNIT", ParserItem::itype::STRING);
        item.setDefault( std::string("METRES") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MAPUNITS::keywordName = "MAPUNITS";
const std::string MAPUNITS::UNIT::itemName = "UNIT";
const std::string MAPUNITS::UNIT::defaultValue = "METRES";


MASSFLOW::MASSFLOW( ) : ParserKeyword("MASSFLOW")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("MASSFLOW");
  {
     ParserRecord record;
     {
        ParserItem item("WORD", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MASSFLOW::keywordName = "MASSFLOW";
const std::string MASSFLOW::WORD::itemName = "WORD";


MATCORR::MATCORR( ) : ParserKeyword("MATCORR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("MATCORR");
  {
     ParserRecord record;
     {
        ParserItem item("NEWTON_IT_NUM", ParserItem::itype::INT);
        item.setDefault( 12 );
        record.addItem(item);
     }
     {
        ParserItem item("NON_LIN_CONV_ERR", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.010000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("MATERIAL_BALANCE_ERR", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-06) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MATCORR::keywordName = "MATCORR";
const std::string MATCORR::NEWTON_IT_NUM::itemName = "NEWTON_IT_NUM";
const int MATCORR::NEWTON_IT_NUM::defaultValue = 12;
const std::string MATCORR::NON_LIN_CONV_ERR::itemName = "NON_LIN_CONV_ERR";
const double MATCORR::NON_LIN_CONV_ERR::defaultValue = 0.010000;
const std::string MATCORR::MATERIAL_BALANCE_ERR::itemName = "MATERIAL_BALANCE_ERR";
const double MATCORR::MATERIAL_BALANCE_ERR::defaultValue = 0.000001;


MAXVALUE::MAXVALUE( ) : ParserKeyword("MAXVALUE")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("MAXVALUE");
  {
     ParserRecord record;
     {
        ParserItem item("field", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("value", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("I1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("I2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MAXVALUE::keywordName = "MAXVALUE";
const std::string MAXVALUE::field::itemName = "field";
const std::string MAXVALUE::value::itemName = "value";
const std::string MAXVALUE::I1::itemName = "I1";
const std::string MAXVALUE::I2::itemName = "I2";
const std::string MAXVALUE::J1::itemName = "J1";
const std::string MAXVALUE::J2::itemName = "J2";
const std::string MAXVALUE::K1::itemName = "K1";
const std::string MAXVALUE::K2::itemName = "K2";


MEMORY::MEMORY( ) : ParserKeyword("MEMORY")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("MEMORY");
  {
     ParserRecord record;
     {
        ParserItem item("UNUSED", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("THOUSANDS_CHAR8", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MEMORY::keywordName = "MEMORY";
const std::string MEMORY::UNUSED::itemName = "UNUSED";
const std::string MEMORY::THOUSANDS_CHAR8::itemName = "THOUSANDS_CHAR8";


MESSAGE::MESSAGE( ) : ParserKeyword("MESSAGE")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("MESSAGE");
  {
     ParserRecord record;
     {
        ParserItem item("MessageText", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MESSAGE::keywordName = "MESSAGE";
const std::string MESSAGE::MessageText::itemName = "MessageText";


MESSAGES::MESSAGES( ) : ParserKeyword("MESSAGES")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("MESSAGES");
  {
     ParserRecord record;
     {
        ParserItem item("MESSAGE_PRINT_LIMIT", ParserItem::itype::INT);
        item.setDefault( 1000000 );
        record.addItem(item);
     }
     {
        ParserItem item("COMMENT_PRINT_LIMIT", ParserItem::itype::INT);
        item.setDefault( 1000000 );
        record.addItem(item);
     }
     {
        ParserItem item("WARNING_PRINT_LIMIT", ParserItem::itype::INT);
        item.setDefault( 10000 );
        record.addItem(item);
     }
     {
        ParserItem item("PROBLEM_PRINT_LIMIT", ParserItem::itype::INT);
        item.setDefault( 100 );
        record.addItem(item);
     }
     {
        ParserItem item("ERROR_PRINT_LIMIT", ParserItem::itype::INT);
        item.setDefault( 100 );
        record.addItem(item);
     }
     {
        ParserItem item("BUG_PRINT_LIMIT", ParserItem::itype::INT);
        item.setDefault( 100 );
        record.addItem(item);
     }
     {
        ParserItem item("MESSAGE_STOP_LIMIT", ParserItem::itype::INT);
        item.setDefault( 1000000 );
        record.addItem(item);
     }
     {
        ParserItem item("COMMENT_STOP_LIMIT", ParserItem::itype::INT);
        item.setDefault( 1000000 );
        record.addItem(item);
     }
     {
        ParserItem item("WARNING_STOP_LIMIT", ParserItem::itype::INT);
        item.setDefault( 10000 );
        record.addItem(item);
     }
     {
        ParserItem item("PROBLEM_STOP_LIMIT", ParserItem::itype::INT);
        item.setDefault( 100 );
        record.addItem(item);
     }
     {
        ParserItem item("ERROR_STOP_LIMIT", ParserItem::itype::INT);
        item.setDefault( 10 );
        record.addItem(item);
     }
     {
        ParserItem item("BUG_STOP_LIMIT", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("GROUP_PRINT_LIMIT", ParserItem::itype::INT);
        item.setDefault( 10 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MESSAGES::keywordName = "MESSAGES";
const std::string MESSAGES::MESSAGE_PRINT_LIMIT::itemName = "MESSAGE_PRINT_LIMIT";
const int MESSAGES::MESSAGE_PRINT_LIMIT::defaultValue = 1000000;
const std::string MESSAGES::COMMENT_PRINT_LIMIT::itemName = "COMMENT_PRINT_LIMIT";
const int MESSAGES::COMMENT_PRINT_LIMIT::defaultValue = 1000000;
const std::string MESSAGES::WARNING_PRINT_LIMIT::itemName = "WARNING_PRINT_LIMIT";
const int MESSAGES::WARNING_PRINT_LIMIT::defaultValue = 10000;
const std::string MESSAGES::PROBLEM_PRINT_LIMIT::itemName = "PROBLEM_PRINT_LIMIT";
const int MESSAGES::PROBLEM_PRINT_LIMIT::defaultValue = 100;
const std::string MESSAGES::ERROR_PRINT_LIMIT::itemName = "ERROR_PRINT_LIMIT";
const int MESSAGES::ERROR_PRINT_LIMIT::defaultValue = 100;
const std::string MESSAGES::BUG_PRINT_LIMIT::itemName = "BUG_PRINT_LIMIT";
const int MESSAGES::BUG_PRINT_LIMIT::defaultValue = 100;
const std::string MESSAGES::MESSAGE_STOP_LIMIT::itemName = "MESSAGE_STOP_LIMIT";
const int MESSAGES::MESSAGE_STOP_LIMIT::defaultValue = 1000000;
const std::string MESSAGES::COMMENT_STOP_LIMIT::itemName = "COMMENT_STOP_LIMIT";
const int MESSAGES::COMMENT_STOP_LIMIT::defaultValue = 1000000;
const std::string MESSAGES::WARNING_STOP_LIMIT::itemName = "WARNING_STOP_LIMIT";
const int MESSAGES::WARNING_STOP_LIMIT::defaultValue = 10000;
const std::string MESSAGES::PROBLEM_STOP_LIMIT::itemName = "PROBLEM_STOP_LIMIT";
const int MESSAGES::PROBLEM_STOP_LIMIT::defaultValue = 100;
const std::string MESSAGES::ERROR_STOP_LIMIT::itemName = "ERROR_STOP_LIMIT";
const int MESSAGES::ERROR_STOP_LIMIT::defaultValue = 10;
const std::string MESSAGES::BUG_STOP_LIMIT::itemName = "BUG_STOP_LIMIT";
const int MESSAGES::BUG_STOP_LIMIT::defaultValue = 1;
const std::string MESSAGES::GROUP_PRINT_LIMIT::itemName = "GROUP_PRINT_LIMIT";
const int MESSAGES::GROUP_PRINT_LIMIT::defaultValue = 10;


MESSOPTS::MESSOPTS( ) : ParserKeyword("MESSOPTS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("MESSOPTS");
  {
     ParserRecord record;
     {
        ParserItem item("MNEMONIC", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SEVERITY", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MESSOPTS::keywordName = "MESSOPTS";
const std::string MESSOPTS::MNEMONIC::itemName = "MNEMONIC";
const std::string MESSOPTS::SEVERITY::itemName = "SEVERITY";


MESSSRVC::MESSSRVC( ) : ParserKeyword("MESSSRVC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("MESSSRVC");
  {
     ParserRecord record;
     {
        ParserItem item("PRODUCE_MESSAGE", ParserItem::itype::STRING);
        item.setDefault( std::string("ON") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MESSSRVC::keywordName = "MESSSRVC";
const std::string MESSSRVC::PRODUCE_MESSAGE::itemName = "PRODUCE_MESSAGE";
const std::string MESSSRVC::PRODUCE_MESSAGE::defaultValue = "ON";


METRIC::METRIC( ) : ParserKeyword("METRIC")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("METRIC");
}
const std::string METRIC::keywordName = "METRIC";


MINNNCT::MINNNCT( ) : ParserKeyword("MINNNCT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("MINNNCT");
  {
     ParserRecord record;
     {
        ParserItem item("CUTOFF_TRANSMISSIBILITY", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Transmissibility");
        record.addItem(item);
     }
     {
        ParserItem item("DIFFUSIVITY", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("CUTOFF_THERMAL_TRANSMISSIBILITY", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Energy/AbsoluteTemperature*Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MINNNCT::keywordName = "MINNNCT";
const std::string MINNNCT::CUTOFF_TRANSMISSIBILITY::itemName = "CUTOFF_TRANSMISSIBILITY";
const double MINNNCT::CUTOFF_TRANSMISSIBILITY::defaultValue = 0.000000;
const std::string MINNNCT::DIFFUSIVITY::itemName = "DIFFUSIVITY";
const double MINNNCT::DIFFUSIVITY::defaultValue = 0.000000;
const std::string MINNNCT::CUTOFF_THERMAL_TRANSMISSIBILITY::itemName = "CUTOFF_THERMAL_TRANSMISSIBILITY";
const double MINNNCT::CUTOFF_THERMAL_TRANSMISSIBILITY::defaultValue = 0.000000;


MINPORV::MINPORV( ) : ParserKeyword("MINPORV")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("MINPORV");
  {
     ParserRecord record;
     {
        ParserItem item("MIN_PORE_VOL", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-06) );
        item.push_backDimension("ReservoirVolume");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MINPORV::keywordName = "MINPORV";
const std::string MINPORV::MIN_PORE_VOL::itemName = "MIN_PORE_VOL";
const double MINPORV::MIN_PORE_VOL::defaultValue = 0.000001;


MINPV::MINPV( ) : ParserKeyword("MINPV")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("MINPV");
  {
     ParserRecord record;
     {
        ParserItem item("VALUE", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-06) );
        item.push_backDimension("ReservoirVolume");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MINPV::keywordName = "MINPV";
const std::string MINPV::VALUE::itemName = "VALUE";
const double MINPV::VALUE::defaultValue = 0.000001;


MINPVFIL::MINPVFIL( ) : ParserKeyword("MINPVFIL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("MINPVFIL");
  {
     ParserRecord record;
     {
        ParserItem item("VALUE", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-06) );
        item.push_backDimension("ReservoirVolume");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MINPVFIL::keywordName = "MINPVFIL";
const std::string MINPVFIL::VALUE::itemName = "VALUE";
const double MINPVFIL::VALUE::defaultValue = 0.000001;


MINPVV::MINPVV( ) : ParserKeyword("MINPVV")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("MINPVV");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(1e-06) );
        item.push_backDimension("ReservoirVolume");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string MINPVV::keywordName = "MINPVV";
const std::string MINPVV::data::itemName = "data";
const double MINPVV::data::defaultValue = 0.000001;


MINVALUE::MINVALUE( ) : ParserKeyword("MINVALUE")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("MINVALUE");
  {
     ParserRecord record;
     {
        ParserItem item("field", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("value", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("I1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("I2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MINVALUE::keywordName = "MINVALUE";
const std::string MINVALUE::field::itemName = "field";
const std::string MINVALUE::value::itemName = "value";
const std::string MINVALUE::I1::itemName = "I1";
const std::string MINVALUE::I2::itemName = "I2";
const std::string MINVALUE::J1::itemName = "J1";
const std::string MINVALUE::J2::itemName = "J2";
const std::string MINVALUE::K1::itemName = "K1";
const std::string MINVALUE::K2::itemName = "K2";


MISC::MISC( ) : ParserKeyword("MISC")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("MISCIBLE","NTMISC",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("MISC");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MISC::keywordName = "MISC";
const std::string MISC::DATA::itemName = "DATA";


MISCIBLE::MISCIBLE( ) : ParserKeyword("MISCIBLE")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("MISCIBLE");
  {
     ParserRecord record;
     {
        ParserItem item("NTMISC", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NSMISC", ParserItem::itype::INT);
        item.setDefault( 20 );
        record.addItem(item);
     }
     {
        ParserItem item("TWOPOINT", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MISCIBLE::keywordName = "MISCIBLE";
const std::string MISCIBLE::NTMISC::itemName = "NTMISC";
const int MISCIBLE::NTMISC::defaultValue = 1;
const std::string MISCIBLE::NSMISC::itemName = "NSMISC";
const int MISCIBLE::NSMISC::defaultValue = 20;
const std::string MISCIBLE::TWOPOINT::itemName = "TWOPOINT";
const std::string MISCIBLE::TWOPOINT::defaultValue = "NONE";


MISCNUM::MISCNUM( ) : ParserKeyword("MISCNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("MISCNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string MISCNUM::keywordName = "MISCNUM";
const std::string MISCNUM::data::itemName = "data";


MLANG::MLANG( ) : ParserKeyword("MLANG")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("MLANG");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("GasSurfaceVolume/Length*Length*Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string MLANG::keywordName = "MLANG";
const std::string MLANG::data::itemName = "data";


MLANGSLV::MLANGSLV( ) : ParserKeyword("MLANGSLV")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("MLANGSLV");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("GasSurfaceVolume/Length*Length*Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string MLANGSLV::keywordName = "MLANGSLV";
const std::string MLANGSLV::data::itemName = "data";


MONITOR::MONITOR( ) : ParserKeyword("MONITOR")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("MONITOR");
}
const std::string MONITOR::keywordName = "MONITOR";


MPFANUM::MPFANUM( ) : ParserKeyword("MPFANUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("MPFANUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string MPFANUM::keywordName = "MPFANUM";
const std::string MPFANUM::data::itemName = "data";


MSFN::MSFN( ) : ParserKeyword("MSFN")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("MSFN");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MSFN::keywordName = "MSFN";
const std::string MSFN::DATA::itemName = "DATA";


MSGFILE::MSGFILE( ) : ParserKeyword("MSGFILE")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("MSGFILE");
  {
     ParserRecord record;
     {
        ParserItem item("ENABLE_FLAG", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MSGFILE::keywordName = "MSGFILE";
const std::string MSGFILE::ENABLE_FLAG::itemName = "ENABLE_FLAG";


MULSGGD::MULSGGD( ) : ParserKeyword("MULSGGD")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("MULSGGD");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string MULSGGD::keywordName = "MULSGGD";
const std::string MULSGGD::data::itemName = "data";


MULSGGDV::MULSGGDV( ) : ParserKeyword("MULSGGDV")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("MULSGGDV");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string MULSGGDV::keywordName = "MULSGGDV";
const std::string MULSGGDV::data::itemName = "data";


MULTFLT::MULTFLT( ) : ParserKeyword("MULTFLT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("MULTFLT");
  {
     ParserRecord record;
     {
        ParserItem item("fault", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("factor", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MULTFLT::keywordName = "MULTFLT";
const std::string MULTFLT::fault::itemName = "fault";
const std::string MULTFLT::factor::itemName = "factor";


MULTIN::MULTIN( ) : ParserKeyword("MULTIN")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("MULTIN");
}
const std::string MULTIN::keywordName = "MULTIN";


MULTIPLY::MULTIPLY( ) : ParserKeyword("MULTIPLY")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("MULTIPLY");
  {
     ParserRecord record;
     {
        ParserItem item("field", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("factor", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("I1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("I2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MULTIPLY::keywordName = "MULTIPLY";
const std::string MULTIPLY::field::itemName = "field";
const std::string MULTIPLY::factor::itemName = "factor";
const std::string MULTIPLY::I1::itemName = "I1";
const std::string MULTIPLY::I2::itemName = "I2";
const std::string MULTIPLY::J1::itemName = "J1";
const std::string MULTIPLY::J2::itemName = "J2";
const std::string MULTIPLY::K1::itemName = "K1";
const std::string MULTIPLY::K2::itemName = "K2";


MULTIREG::MULTIREG( ) : ParserKeyword("MULTIREG")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("MULTIREG");
  {
     ParserRecord record;
     {
        ParserItem item("ARRAY", ParserItem::itype::STRING);
        item.setDescription("The 3D array we will update");
        record.addItem(item);
     }
     {
        ParserItem item("FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.setDescription("The value we will multiply with");
        record.addItem(item);
     }
     {
        ParserItem item("REGION_NUMBER", ParserItem::itype::INT);
        item.setDescription("The region number we are interested in");
        record.addItem(item);
     }
     {
        ParserItem item("REGION_NAME", ParserItem::itype::STRING);
        item.setDefault( std::string("M") );
        item.setDescription("The name of the region we are interested in");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MULTIREG::keywordName = "MULTIREG";
const std::string MULTIREG::ARRAY::itemName = "ARRAY";
const std::string MULTIREG::FACTOR::itemName = "FACTOR";
const double MULTIREG::FACTOR::defaultValue = 0.000000;
const std::string MULTIREG::REGION_NUMBER::itemName = "REGION_NUMBER";
const std::string MULTIREG::REGION_NAME::itemName = "REGION_NAME";
const std::string MULTIREG::REGION_NAME::defaultValue = "M";


MULTNUM::MULTNUM( ) : ParserKeyword("MULTNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("MULTNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string MULTNUM::keywordName = "MULTNUM";
const std::string MULTNUM::data::itemName = "data";


MULTOUT::MULTOUT( ) : ParserKeyword("MULTOUT")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("MULTOUT");
}
const std::string MULTOUT::keywordName = "MULTOUT";


MULTOUTS::MULTOUTS( ) : ParserKeyword("MULTOUTS")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("MULTOUTS");
}
const std::string MULTOUTS::keywordName = "MULTOUTS";


MULTPV::MULTPV( ) : ParserKeyword("MULTPV")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("MULTPV");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string MULTPV::keywordName = "MULTPV";
const std::string MULTPV::data::itemName = "data";


MULTREAL::MULTREAL( ) : ParserKeyword("MULTREAL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("MULTREAL");
  {
     ParserRecord record;
     {
        ParserItem item("SESSION_SPEC", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("STANDARD_LICENCE", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MULTREAL::keywordName = "MULTREAL";
const std::string MULTREAL::SESSION_SPEC::itemName = "SESSION_SPEC";
const std::string MULTREAL::STANDARD_LICENCE::itemName = "STANDARD_LICENCE";
const std::string MULTREAL::STANDARD_LICENCE::defaultValue = "YES";


MULTREGD::MULTREGD( ) : ParserKeyword("MULTREGD")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("MULTREGD");
  {
     ParserRecord record;
     {
        ParserItem item("FROM_REGION", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("TO_REGION", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("MULTIPLIER", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("DIRECTION", ParserItem::itype::STRING);
        item.setDefault( std::string("XYZ") );
        record.addItem(item);
     }
     {
        ParserItem item("FLAG", ParserItem::itype::STRING);
        item.setDefault( std::string("ALL") );
        record.addItem(item);
     }
     {
        ParserItem item("CHOICE", ParserItem::itype::STRING);
        item.setDefault( std::string("M") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MULTREGD::keywordName = "MULTREGD";
const std::string MULTREGD::FROM_REGION::itemName = "FROM_REGION";
const std::string MULTREGD::TO_REGION::itemName = "TO_REGION";
const std::string MULTREGD::MULTIPLIER::itemName = "MULTIPLIER";
const std::string MULTREGD::DIRECTION::itemName = "DIRECTION";
const std::string MULTREGD::DIRECTION::defaultValue = "XYZ";
const std::string MULTREGD::FLAG::itemName = "FLAG";
const std::string MULTREGD::FLAG::defaultValue = "ALL";
const std::string MULTREGD::CHOICE::itemName = "CHOICE";
const std::string MULTREGD::CHOICE::defaultValue = "M";


MULTREGH::MULTREGH( ) : ParserKeyword("MULTREGH")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("MULTREGH");
  {
     ParserRecord record;
     {
        ParserItem item("FROM_REGION", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("TO_REGION", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("MULTIPLIER", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("DIRECTION", ParserItem::itype::STRING);
        item.setDefault( std::string("XYZ") );
        record.addItem(item);
     }
     {
        ParserItem item("FLAG", ParserItem::itype::STRING);
        item.setDefault( std::string("ALL") );
        record.addItem(item);
     }
     {
        ParserItem item("CHOICE", ParserItem::itype::STRING);
        item.setDefault( std::string("M") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MULTREGH::keywordName = "MULTREGH";
const std::string MULTREGH::FROM_REGION::itemName = "FROM_REGION";
const std::string MULTREGH::TO_REGION::itemName = "TO_REGION";
const std::string MULTREGH::MULTIPLIER::itemName = "MULTIPLIER";
const std::string MULTREGH::DIRECTION::itemName = "DIRECTION";
const std::string MULTREGH::DIRECTION::defaultValue = "XYZ";
const std::string MULTREGH::FLAG::itemName = "FLAG";
const std::string MULTREGH::FLAG::defaultValue = "ALL";
const std::string MULTREGH::CHOICE::itemName = "CHOICE";
const std::string MULTREGH::CHOICE::defaultValue = "M";


MULTREGP::MULTREGP( ) : ParserKeyword("MULTREGP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("MULTREGP");
  {
     ParserRecord record;
     {
        ParserItem item("REGION", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("MULTIPLIER", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("REGION_TYPE", ParserItem::itype::STRING);
        item.setDefault( std::string("M") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MULTREGP::keywordName = "MULTREGP";
const std::string MULTREGP::REGION::itemName = "REGION";
const std::string MULTREGP::MULTIPLIER::itemName = "MULTIPLIER";
const std::string MULTREGP::REGION_TYPE::itemName = "REGION_TYPE";
const std::string MULTREGP::REGION_TYPE::defaultValue = "M";


MULTREGT::MULTREGT( ) : ParserKeyword("MULTREGT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("MULTREGT");
  {
     ParserRecord record;
     {
        ParserItem item("SRC_REGION", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("TARGET_REGION", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("TRAN_MULT", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("DIRECTIONS", ParserItem::itype::STRING);
        item.setDefault( std::string("XYZ") );
        record.addItem(item);
     }
     {
        ParserItem item("NNC_MULT", ParserItem::itype::STRING);
        item.setDefault( std::string("ALL") );
        record.addItem(item);
     }
     {
        ParserItem item("REGION_DEF", ParserItem::itype::STRING);
        item.setDefault( std::string("M") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MULTREGT::keywordName = "MULTREGT";
const std::string MULTREGT::SRC_REGION::itemName = "SRC_REGION";
const std::string MULTREGT::TARGET_REGION::itemName = "TARGET_REGION";
const std::string MULTREGT::TRAN_MULT::itemName = "TRAN_MULT";
const std::string MULTREGT::DIRECTIONS::itemName = "DIRECTIONS";
const std::string MULTREGT::DIRECTIONS::defaultValue = "XYZ";
const std::string MULTREGT::NNC_MULT::itemName = "NNC_MULT";
const std::string MULTREGT::NNC_MULT::defaultValue = "ALL";
const std::string MULTREGT::REGION_DEF::itemName = "REGION_DEF";
const std::string MULTREGT::REGION_DEF::defaultValue = "M";


MULTSIG::MULTSIG( ) : ParserKeyword("MULTSIG")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("MULTSIG");
  {
     ParserRecord record;
     {
        ParserItem item("VALUE", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MULTSIG::keywordName = "MULTSIG";
const std::string MULTSIG::VALUE::itemName = "VALUE";


MULTSIGV::MULTSIGV( ) : ParserKeyword("MULTSIGV")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("MULTSIGV");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string MULTSIGV::keywordName = "MULTSIGV";
const std::string MULTSIGV::data::itemName = "data";


MULT_XYZ::MULT_XYZ( ) : ParserKeyword("MULT_XYZ")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("MULTR");
  addDeckName("MULTR-");
  addDeckName("MULTTHT");
  addDeckName("MULTTHT-");
  addDeckName("MULTX");
  addDeckName("MULTX-");
  addDeckName("MULTY");
  addDeckName("MULTY-");
  addDeckName("MULTZ");
  addDeckName("MULTZ-");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string MULT_XYZ::keywordName = "MULT_XYZ";
const std::string MULT_XYZ::data::itemName = "data";


MW::MW( ) : ParserKeyword("MW")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NUM_STATE_EQ",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("MW");
  {
     ParserRecord record;
     {
        ParserItem item("MOLAR_WEIGHT", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MW::keywordName = "MW";
const std::string MW::MOLAR_WEIGHT::itemName = "MOLAR_WEIGHT";


MWS::MWS( ) : ParserKeyword("MWS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NUM_STATE_EQ",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("MWS");
  {
     ParserRecord record;
     {
        ParserItem item("MOLAR_WEIGHT", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string MWS::keywordName = "MWS";
const std::string MWS::MOLAR_WEIGHT::itemName = "MOLAR_WEIGHT";


NARROW::NARROW( ) : ParserKeyword("NARROW")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("NARROW");
}
const std::string NARROW::keywordName = "NARROW";


NCONSUMP::NCONSUMP( ) : ParserKeyword("NCONSUMP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("NCONSUMP");
  {
     ParserRecord record;
     {
        ParserItem item("NODE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("GAS_CONSUMPTION_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("GasSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("REMOVAL_GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string NCONSUMP::keywordName = "NCONSUMP";
const std::string NCONSUMP::NODE::itemName = "NODE";
const std::string NCONSUMP::GAS_CONSUMPTION_RATE::itemName = "GAS_CONSUMPTION_RATE";
const double NCONSUMP::GAS_CONSUMPTION_RATE::defaultValue = 0.000000;
const std::string NCONSUMP::REMOVAL_GROUP::itemName = "REMOVAL_GROUP";


NEFAC::NEFAC( ) : ParserKeyword("NEFAC")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("NEFAC");
  {
     ParserRecord record;
     {
        ParserItem item("NODE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("EFF_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string NEFAC::keywordName = "NEFAC";
const std::string NEFAC::NODE::itemName = "NODE";
const std::string NEFAC::EFF_FACTOR::itemName = "EFF_FACTOR";
const double NEFAC::EFF_FACTOR::defaultValue = 1.000000;


NETBALAN::NETBALAN( ) : ParserKeyword("NETBALAN")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  addValidSectionName("SPECIAL");
  clearDeckNames();
  addDeckName("NETBALAN");
  {
     ParserRecord record;
     {
        ParserItem item("TIME_INTERVAL", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("PRESSURE_CONVERGENCE_LIMT", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-05) );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_ITER", ParserItem::itype::INT);
        item.setDefault( 10 );
        record.addItem(item);
     }
     {
        ParserItem item("THP_CONVERGENCE_LIMIT", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.010000) );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_ITER_THP", ParserItem::itype::INT);
        item.setDefault( 10 );
        record.addItem(item);
     }
     {
        ParserItem item("TARGET_BALANCE_ERROR", ParserItem::itype::DOUBLE);
        item.setDefault( double(100000000000000000000.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_BALANCE_ERROR", ParserItem::itype::DOUBLE);
        item.setDefault( double(100000000000000000000.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("MIN_TIME_STEP", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string NETBALAN::keywordName = "NETBALAN";
const std::string NETBALAN::TIME_INTERVAL::itemName = "TIME_INTERVAL";
const double NETBALAN::TIME_INTERVAL::defaultValue = 0.000000;
const std::string NETBALAN::PRESSURE_CONVERGENCE_LIMT::itemName = "PRESSURE_CONVERGENCE_LIMT";
const double NETBALAN::PRESSURE_CONVERGENCE_LIMT::defaultValue = 0.000010;
const std::string NETBALAN::MAX_ITER::itemName = "MAX_ITER";
const int NETBALAN::MAX_ITER::defaultValue = 10;
const std::string NETBALAN::THP_CONVERGENCE_LIMIT::itemName = "THP_CONVERGENCE_LIMIT";
const double NETBALAN::THP_CONVERGENCE_LIMIT::defaultValue = 0.010000;
const std::string NETBALAN::MAX_ITER_THP::itemName = "MAX_ITER_THP";
const int NETBALAN::MAX_ITER_THP::defaultValue = 10;
const std::string NETBALAN::TARGET_BALANCE_ERROR::itemName = "TARGET_BALANCE_ERROR";
const double NETBALAN::TARGET_BALANCE_ERROR::defaultValue = 100000000000000000000.000000;
const std::string NETBALAN::MAX_BALANCE_ERROR::itemName = "MAX_BALANCE_ERROR";
const double NETBALAN::MAX_BALANCE_ERROR::defaultValue = 100000000000000000000.000000;
const std::string NETBALAN::MIN_TIME_STEP::itemName = "MIN_TIME_STEP";


NETCOMPA::NETCOMPA( ) : ParserKeyword("NETCOMPA")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("NETCOMPA");
  {
     ParserRecord record;
     {
        ParserItem item("INLET", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("OUTLET", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        item.setDefault( std::string("") );
        record.addItem(item);
     }
     {
        ParserItem item("PHASE", ParserItem::itype::STRING);
        item.setDefault( std::string("GAS") );
        record.addItem(item);
     }
     {
        ParserItem item("VFT_TABLE_NUM", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ALQ", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("GAS_CONSUMPTION_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("GasSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("EXTRACTION_GROUP", ParserItem::itype::STRING);
        item.setDefault( std::string("") );
        record.addItem(item);
     }
     {
        ParserItem item("COMPRESSOR_TYPE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("NUM_COMPRESSION_LEVELS", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("ALQ_LEVEL1", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("COMP_SWITCH_SEQ_NUM", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string NETCOMPA::keywordName = "NETCOMPA";
const std::string NETCOMPA::INLET::itemName = "INLET";
const std::string NETCOMPA::OUTLET::itemName = "OUTLET";
const std::string NETCOMPA::GROUP::itemName = "GROUP";
const std::string NETCOMPA::GROUP::defaultValue = "";
const std::string NETCOMPA::PHASE::itemName = "PHASE";
const std::string NETCOMPA::PHASE::defaultValue = "GAS";
const std::string NETCOMPA::VFT_TABLE_NUM::itemName = "VFT_TABLE_NUM";
const int NETCOMPA::VFT_TABLE_NUM::defaultValue = 0;
const std::string NETCOMPA::ALQ::itemName = "ALQ";
const double NETCOMPA::ALQ::defaultValue = 0.000000;
const std::string NETCOMPA::GAS_CONSUMPTION_RATE::itemName = "GAS_CONSUMPTION_RATE";
const double NETCOMPA::GAS_CONSUMPTION_RATE::defaultValue = 0.000000;
const std::string NETCOMPA::EXTRACTION_GROUP::itemName = "EXTRACTION_GROUP";
const std::string NETCOMPA::EXTRACTION_GROUP::defaultValue = "";
const std::string NETCOMPA::COMPRESSOR_TYPE::itemName = "COMPRESSOR_TYPE";
const std::string NETCOMPA::NUM_COMPRESSION_LEVELS::itemName = "NUM_COMPRESSION_LEVELS";
const std::string NETCOMPA::ALQ_LEVEL1::itemName = "ALQ_LEVEL1";
const std::string NETCOMPA::COMP_SWITCH_SEQ_NUM::itemName = "COMP_SWITCH_SEQ_NUM";


NETWORK::NETWORK( ) : ParserKeyword("NETWORK")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("NETWORK");
  {
     ParserRecord record;
     {
        ParserItem item("NODMAX", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NBRMAX", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NBCMAX", ParserItem::itype::INT);
        item.setDefault( 20 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string NETWORK::keywordName = "NETWORK";
const std::string NETWORK::NODMAX::itemName = "NODMAX";
const std::string NETWORK::NBRMAX::itemName = "NBRMAX";
const std::string NETWORK::NBCMAX::itemName = "NBCMAX";
const int NETWORK::NBCMAX::defaultValue = 20;


NEWTRAN::NEWTRAN( ) : ParserKeyword("NEWTRAN")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("NEWTRAN");
}
const std::string NEWTRAN::keywordName = "NEWTRAN";


NEXT::NEXT( ) : ParserKeyword("NEXT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("NEXT");
  {
     ParserRecord record;
     {
        ParserItem item("MAX_STEP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("APPLY_TO_ALL", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string NEXT::keywordName = "NEXT";
const std::string NEXT::MAX_STEP::itemName = "MAX_STEP";
const std::string NEXT::APPLY_TO_ALL::itemName = "APPLY_TO_ALL";
const std::string NEXT::APPLY_TO_ALL::defaultValue = "NO";


NEXTSTEP::NEXTSTEP( ) : ParserKeyword("NEXTSTEP")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("NEXTSTEP");
  {
     ParserRecord record;
     {
        ParserItem item("MAX_STEP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("APPLY_TO_ALL", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string NEXTSTEP::keywordName = "NEXTSTEP";
const std::string NEXTSTEP::MAX_STEP::itemName = "MAX_STEP";
const std::string NEXTSTEP::APPLY_TO_ALL::itemName = "APPLY_TO_ALL";
const std::string NEXTSTEP::APPLY_TO_ALL::defaultValue = "NO";


NEXTSTPL::NEXTSTPL( ) : ParserKeyword("NEXTSTPL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("NEXTSTPL");
  {
     ParserRecord record;
     {
        ParserItem item("MAX_LENGTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("APPLY_TO_ALL", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string NEXTSTPL::keywordName = "NEXTSTPL";
const std::string NEXTSTPL::MAX_LENGTH::itemName = "MAX_LENGTH";
const std::string NEXTSTPL::APPLY_TO_ALL::itemName = "APPLY_TO_ALL";
const std::string NEXTSTPL::APPLY_TO_ALL::defaultValue = "NO";


NINENUM::NINENUM( ) : ParserKeyword("NINENUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("NINENUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string NINENUM::keywordName = "NINENUM";
const std::string NINENUM::data::itemName = "data";


NINEPOIN::NINEPOIN( ) : ParserKeyword("NINEPOIN")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("NINEPOIN");
}
const std::string NINEPOIN::keywordName = "NINEPOIN";


NMATOPTS::NMATOPTS( ) : ParserKeyword("NMATOPTS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("NMATOPTS");
  {
     ParserRecord record;
     {
        ParserItem item("GEOMETRY", ParserItem::itype::STRING);
        item.setDefault( std::string("LINEAR") );
        record.addItem(item);
     }
     {
        ParserItem item("FRACTION_PORE_VOL", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.100000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("METHOD", ParserItem::itype::STRING);
        item.setDefault( std::string("FPORV") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string NMATOPTS::keywordName = "NMATOPTS";
const std::string NMATOPTS::GEOMETRY::itemName = "GEOMETRY";
const std::string NMATOPTS::GEOMETRY::defaultValue = "LINEAR";
const std::string NMATOPTS::FRACTION_PORE_VOL::itemName = "FRACTION_PORE_VOL";
const double NMATOPTS::FRACTION_PORE_VOL::defaultValue = 0.100000;
const std::string NMATOPTS::METHOD::itemName = "METHOD";
const std::string NMATOPTS::METHOD::defaultValue = "FPORV";


NMATRIX::NMATRIX( ) : ParserKeyword("NMATRIX")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("NMATRIX");
  {
     ParserRecord record;
     {
        ParserItem item("NUM_SUB_CELLS", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string NMATRIX::keywordName = "NMATRIX";
const std::string NMATRIX::NUM_SUB_CELLS::itemName = "NUM_SUB_CELLS";


NNC::NNC( ) : ParserKeyword("NNC")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("NNC");
  {
     ParserRecord record;
     {
        ParserItem item("I1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("I2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("TRAN", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Transmissibility");
        record.addItem(item);
     }
     {
        ParserItem item("SIM_DEPENDENT1", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("ContextDependent");
        record.addItem(item);
     }
     {
        ParserItem item("SIM_DEPENDENT2", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("ContextDependent");
        record.addItem(item);
     }
     {
        ParserItem item("PRESSURE_TABLE1", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("PRESSURE_TABLE2", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("VE_FACE1", ParserItem::itype::STRING);
        item.setDefault( std::string("") );
        record.addItem(item);
     }
     {
        ParserItem item("VE_FACE2", ParserItem::itype::STRING);
        item.setDefault( std::string("") );
        record.addItem(item);
     }
     {
        ParserItem item("DIFFUSIVITY", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("SIM_DEPENDENT3", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("ContextDependent");
        record.addItem(item);
     }
     {
        ParserItem item("VDFLOW_AREA", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("VDFLOW_PERM", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Permeability");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string NNC::keywordName = "NNC";
const std::string NNC::I1::itemName = "I1";
const std::string NNC::J1::itemName = "J1";
const std::string NNC::K1::itemName = "K1";
const std::string NNC::I2::itemName = "I2";
const std::string NNC::J2::itemName = "J2";
const std::string NNC::K2::itemName = "K2";
const std::string NNC::TRAN::itemName = "TRAN";
const double NNC::TRAN::defaultValue = 0.000000;
const std::string NNC::SIM_DEPENDENT1::itemName = "SIM_DEPENDENT1";
const double NNC::SIM_DEPENDENT1::defaultValue = 0.000000;
const std::string NNC::SIM_DEPENDENT2::itemName = "SIM_DEPENDENT2";
const double NNC::SIM_DEPENDENT2::defaultValue = 0.000000;
const std::string NNC::PRESSURE_TABLE1::itemName = "PRESSURE_TABLE1";
const int NNC::PRESSURE_TABLE1::defaultValue = 0;
const std::string NNC::PRESSURE_TABLE2::itemName = "PRESSURE_TABLE2";
const int NNC::PRESSURE_TABLE2::defaultValue = 0;
const std::string NNC::VE_FACE1::itemName = "VE_FACE1";
const std::string NNC::VE_FACE1::defaultValue = "";
const std::string NNC::VE_FACE2::itemName = "VE_FACE2";
const std::string NNC::VE_FACE2::defaultValue = "";
const std::string NNC::DIFFUSIVITY::itemName = "DIFFUSIVITY";
const double NNC::DIFFUSIVITY::defaultValue = 0.000000;
const std::string NNC::SIM_DEPENDENT3::itemName = "SIM_DEPENDENT3";
const double NNC::SIM_DEPENDENT3::defaultValue = 0.000000;
const std::string NNC::VDFLOW_AREA::itemName = "VDFLOW_AREA";
const double NNC::VDFLOW_AREA::defaultValue = 0.000000;
const std::string NNC::VDFLOW_PERM::itemName = "VDFLOW_PERM";
const double NNC::VDFLOW_PERM::defaultValue = 0.000000;


NNEWTF::NNEWTF( ) : ParserKeyword("NNEWTF")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("NNEWTF");
  {
     ParserRecord record;
     {
        ParserItem item("NTHRBL", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NLNHBL", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string NNEWTF::keywordName = "NNEWTF";
const std::string NNEWTF::NTHRBL::itemName = "NTHRBL";
const std::string NNEWTF::NLNHBL::itemName = "NLNHBL";


NOCASC::NOCASC( ) : ParserKeyword("NOCASC")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("NOCASC");
}
const std::string NOCASC::keywordName = "NOCASC";


NODEPROP::NODEPROP( ) : ParserKeyword("NODEPROP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("NODEPROP");
  {
     ParserRecord record;
     {
        ParserItem item("NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("PRESSURE", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("AS_CHOKE", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("CHOKE_GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SOURCE_SINK_GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("NETWORK_VALUE_TYPE", ParserItem::itype::STRING);
        item.setDefault( std::string("PROD") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string NODEPROP::keywordName = "NODEPROP";
const std::string NODEPROP::NAME::itemName = "NAME";
const std::string NODEPROP::PRESSURE::itemName = "PRESSURE";
const std::string NODEPROP::AS_CHOKE::itemName = "AS_CHOKE";
const std::string NODEPROP::AS_CHOKE::defaultValue = "NO";
const std::string NODEPROP::CHOKE_GROUP::itemName = "CHOKE_GROUP";
const std::string NODEPROP::SOURCE_SINK_GROUP::itemName = "SOURCE_SINK_GROUP";
const std::string NODEPROP::NETWORK_VALUE_TYPE::itemName = "NETWORK_VALUE_TYPE";
const std::string NODEPROP::NETWORK_VALUE_TYPE::defaultValue = "PROD";


NODPPM::NODPPM( ) : ParserKeyword("NODPPM")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("GRID");
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("NODPPM");
}
const std::string NODPPM::keywordName = "NODPPM";


NOECHO::NOECHO( ) : ParserKeyword("NOECHO")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("NOECHO");
}
const std::string NOECHO::keywordName = "NOECHO";


NOGGF::NOGGF( ) : ParserKeyword("NOGGF")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("NOGGF");
}
const std::string NOGGF::keywordName = "NOGGF";


NOGRAV::NOGRAV( ) : ParserKeyword("NOGRAV")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("NOGRAV");
}
const std::string NOGRAV::keywordName = "NOGRAV";


NOHMD::NOHMD( ) : ParserKeyword("NOHMD")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("NOHMD");
  {
     ParserRecord record;
     {
        ParserItem item("GRAD_PARAMS", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string NOHMD::keywordName = "NOHMD";
const std::string NOHMD::GRAD_PARAMS::itemName = "GRAD_PARAMS";


NOHMO::NOHMO( ) : ParserKeyword("NOHMO")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("NOHMO");
  {
     ParserRecord record;
     {
        ParserItem item("GRAD_PARAMS", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string NOHMO::keywordName = "NOHMO";
const std::string NOHMO::GRAD_PARAMS::itemName = "GRAD_PARAMS";


NOHYST::NOHYST( ) : ParserKeyword("NOHYST")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("NOHYST");
}
const std::string NOHYST::keywordName = "NOHYST";


NOINSPEC::NOINSPEC( ) : ParserKeyword("NOINSPEC")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("NOINSPEC");
}
const std::string NOINSPEC::keywordName = "NOINSPEC";


NOMONITO::NOMONITO( ) : ParserKeyword("NOMONITO")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("NOMONITO");
}
const std::string NOMONITO::keywordName = "NOMONITO";


NONNC::NONNC( ) : ParserKeyword("NONNC")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("NONNC");
}
const std::string NONNC::keywordName = "NONNC";


NORSSPEC::NORSSPEC( ) : ParserKeyword("NORSSPEC")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("NORSSPEC");
}
const std::string NORSSPEC::keywordName = "NORSSPEC";


NOSIM::NOSIM( ) : ParserKeyword("NOSIM")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("NOSIM");
}
const std::string NOSIM::keywordName = "NOSIM";


NOWARN::NOWARN( ) : ParserKeyword("NOWARN")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("NOWARN");
}
const std::string NOWARN::keywordName = "NOWARN";


NOWARNEP::NOWARNEP( ) : ParserKeyword("NOWARNEP")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("NOWARNEP");
}
const std::string NOWARNEP::keywordName = "NOWARNEP";


NRSOUT::NRSOUT( ) : ParserKeyword("NRSOUT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("NRSOUT");
  {
     ParserRecord record;
     {
        ParserItem item("MAX_NUM", ParserItem::itype::INT);
        item.setDefault( 3600 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string NRSOUT::keywordName = "NRSOUT";
const std::string NRSOUT::MAX_NUM::itemName = "MAX_NUM";
const int NRSOUT::MAX_NUM::defaultValue = 3600;


NSTACK::NSTACK( ) : ParserKeyword("NSTACK")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("NSTACK");
  {
     ParserRecord record;
     {
        ParserItem item("LINEAR_SOLVER_SIZE", ParserItem::itype::INT);
        item.setDefault( 10 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string NSTACK::keywordName = "NSTACK";
const std::string NSTACK::LINEAR_SOLVER_SIZE::itemName = "LINEAR_SOLVER_SIZE";
const int NSTACK::LINEAR_SOLVER_SIZE::defaultValue = 10;


NTG::NTG( ) : ParserKeyword("NTG")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("NTG");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string NTG::keywordName = "NTG";
const std::string NTG::data::itemName = "data";


NUMRES::NUMRES( ) : ParserKeyword("NUMRES")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("NUMRES");
  {
     ParserRecord record;
     {
        ParserItem item("num", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string NUMRES::keywordName = "NUMRES";
const std::string NUMRES::num::itemName = "num";
const int NUMRES::num::defaultValue = 1;


NUPCOL::NUPCOL( ) : ParserKeyword("NUPCOL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("NUPCOL");
  {
     ParserRecord record;
     {
        ParserItem item("NUM_ITER", ParserItem::itype::INT);
        item.setDefault( 12 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string NUPCOL::keywordName = "NUPCOL";
const std::string NUPCOL::NUM_ITER::itemName = "NUM_ITER";
const int NUPCOL::NUM_ITER::defaultValue = 12;


NWATREM::NWATREM( ) : ParserKeyword("NWATREM")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("NWATREM");
  {
     ParserRecord record;
     {
        ParserItem item("NODE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("WAX_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(10000000000000000159028911097599180468360808563945281389781327557747838772170381060813469985856815104.000000) );
        item.push_backDimension("LiquidSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("MAX_FRAC_REMOVAL", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string NWATREM::keywordName = "NWATREM";
const std::string NWATREM::NODE::itemName = "NODE";
const std::string NWATREM::WAX_RATE::itemName = "WAX_RATE";
const double NWATREM::WAX_RATE::defaultValue = 10000000000000000159028911097599180468360808563945281389781327557747838772170381060813469985856815104.000000;
const std::string NWATREM::MAX_FRAC_REMOVAL::itemName = "MAX_FRAC_REMOVAL";
const double NWATREM::MAX_FRAC_REMOVAL::defaultValue = 1.000000;


NXFIN::NXFIN( ) : ParserKeyword("NXFIN")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("NXFIN");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string NXFIN::keywordName = "NXFIN";
const std::string NXFIN::data::itemName = "data";


NYFIN::NYFIN( ) : ParserKeyword("NYFIN")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("NYFIN");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string NYFIN::keywordName = "NYFIN";
const std::string NYFIN::data::itemName = "data";


NZFIN::NZFIN( ) : ParserKeyword("NZFIN")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("NZFIN");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string NZFIN::keywordName = "NZFIN";
const std::string NZFIN::data::itemName = "data";


OCOMPIDX::OCOMPIDX( ) : ParserKeyword("OCOMPIDX")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("OCOMPIDX");
  {
     ParserRecord record;
     {
        ParserItem item("OIL_COMPONENT_INDEX", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string OCOMPIDX::keywordName = "OCOMPIDX";
const std::string OCOMPIDX::OIL_COMPONENT_INDEX::itemName = "OIL_COMPONENT_INDEX";


OFM::OFM( ) : ParserKeyword("OFM")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("OFM");
}
const std::string OFM::keywordName = "OFM";


OIL::OIL( ) : ParserKeyword("OIL")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("OIL");
}
const std::string OIL::keywordName = "OIL";


OILAPI::OILAPI( ) : ParserKeyword("OILAPI")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("OILAPI");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string OILAPI::keywordName = "OILAPI";
const std::string OILAPI::data::itemName = "data";


OILCOMPR::OILCOMPR( ) : ParserKeyword("OILCOMPR")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("OILCOMPR");
  {
     ParserRecord record;
     {
        ParserItem item("COMPRESSIBILITY", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("EXPANSION_COEFF_LINEAR", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("1/AbsoluteTemperature");
        record.addItem(item);
     }
     {
        ParserItem item("EXPANSION_COEFF_QUADRATIC", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("1/AbsoluteTemperature*AbsoluteTemperature");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string OILCOMPR::keywordName = "OILCOMPR";
const std::string OILCOMPR::COMPRESSIBILITY::itemName = "COMPRESSIBILITY";
const double OILCOMPR::COMPRESSIBILITY::defaultValue = 0.000000;
const std::string OILCOMPR::EXPANSION_COEFF_LINEAR::itemName = "EXPANSION_COEFF_LINEAR";
const double OILCOMPR::EXPANSION_COEFF_LINEAR::defaultValue = 0.000000;
const std::string OILCOMPR::EXPANSION_COEFF_QUADRATIC::itemName = "EXPANSION_COEFF_QUADRATIC";
const double OILCOMPR::EXPANSION_COEFF_QUADRATIC::defaultValue = 0.000000;


OILDENT::OILDENT( ) : ParserKeyword("OILDENT")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("OILDENT");
  {
     ParserRecord record;
     {
        ParserItem item("REFERENCE_TEMPERATURE", ParserItem::itype::DOUBLE);
        item.setDefault( double(293.150000) );
        item.push_backDimension("AbsoluteTemperature");
        record.addItem(item);
     }
     {
        ParserItem item("EXPANSION_COEFF_LINEAR", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("1/AbsoluteTemperature");
        record.addItem(item);
     }
     {
        ParserItem item("EXPANSION_COEFF_QUADRATIC", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("1/AbsoluteTemperature*AbsoluteTemperature");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string OILDENT::keywordName = "OILDENT";
const std::string OILDENT::REFERENCE_TEMPERATURE::itemName = "REFERENCE_TEMPERATURE";
const double OILDENT::REFERENCE_TEMPERATURE::defaultValue = 293.150000;
const std::string OILDENT::EXPANSION_COEFF_LINEAR::itemName = "EXPANSION_COEFF_LINEAR";
const double OILDENT::EXPANSION_COEFF_LINEAR::defaultValue = 0.000000;
const std::string OILDENT::EXPANSION_COEFF_QUADRATIC::itemName = "EXPANSION_COEFF_QUADRATIC";
const double OILDENT::EXPANSION_COEFF_QUADRATIC::defaultValue = 0.000000;


OILMW::OILMW( ) : ParserKeyword("OILMW")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("OILMW");
  {
     ParserRecord record;
     {
        ParserItem item("MOLAR_WEIGHT", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string OILMW::keywordName = "OILMW";
const std::string OILMW::MOLAR_WEIGHT::itemName = "MOLAR_WEIGHT";


OILVISCT::OILVISCT( ) : ParserKeyword("OILVISCT")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("OILVISCT");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Temperature");
        item.push_backDimension("Viscosity");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string OILVISCT::keywordName = "OILVISCT";
const std::string OILVISCT::DATA::itemName = "DATA";


OILVTIM::OILVTIM( ) : ParserKeyword("OILVTIM")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("OILVTIM");
  {
     ParserRecord record;
     {
        ParserItem item("INTERPOLATION_METHOD", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string OILVTIM::keywordName = "OILVTIM";
const std::string OILVTIM::INTERPOLATION_METHOD::itemName = "INTERPOLATION_METHOD";


OLDTRAN::OLDTRAN( ) : ParserKeyword("OLDTRAN")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("OLDTRAN");
}
const std::string OLDTRAN::keywordName = "OLDTRAN";


OLDTRANR::OLDTRANR( ) : ParserKeyword("OLDTRANR")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("OLDTRANR");
}
const std::string OLDTRANR::keywordName = "OLDTRANR";


OPERATE::OPERATE( ) : ParserKeyword("OPERATE")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("OPERATE");
  {
     ParserRecord record;
     {
        ParserItem item("TARGET_ARRAY", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("I1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("I2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("OPERATION", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("ARRAY", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("PARAM1", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("PARAM2", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string OPERATE::keywordName = "OPERATE";
const std::string OPERATE::TARGET_ARRAY::itemName = "TARGET_ARRAY";
const std::string OPERATE::I1::itemName = "I1";
const std::string OPERATE::I2::itemName = "I2";
const std::string OPERATE::J1::itemName = "J1";
const std::string OPERATE::J2::itemName = "J2";
const std::string OPERATE::K1::itemName = "K1";
const std::string OPERATE::K2::itemName = "K2";
const std::string OPERATE::OPERATION::itemName = "OPERATION";
const std::string OPERATE::ARRAY::itemName = "ARRAY";
const std::string OPERATE::PARAM1::itemName = "PARAM1";
const double OPERATE::PARAM1::defaultValue = 0.000000;
const std::string OPERATE::PARAM2::itemName = "PARAM2";
const double OPERATE::PARAM2::defaultValue = 0.000000;


OPERATER::OPERATER( ) : ParserKeyword("OPERATER")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("OPERATER");
  {
     ParserRecord record;
     {
        ParserItem item("RESULT_ARRAY", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("REGION_NUMBER", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("OPERATION", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("ARRAY_PARAMETER", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("PARAM1", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("PARAM2", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("REGION_NAME", ParserItem::itype::STRING);
        item.setDefault( std::string("OPERNUM") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string OPERATER::keywordName = "OPERATER";
const std::string OPERATER::RESULT_ARRAY::itemName = "RESULT_ARRAY";
const std::string OPERATER::REGION_NUMBER::itemName = "REGION_NUMBER";
const std::string OPERATER::OPERATION::itemName = "OPERATION";
const std::string OPERATER::ARRAY_PARAMETER::itemName = "ARRAY_PARAMETER";
const std::string OPERATER::PARAM1::itemName = "PARAM1";
const double OPERATER::PARAM1::defaultValue = 0.000000;
const std::string OPERATER::PARAM2::itemName = "PARAM2";
const double OPERATER::PARAM2::defaultValue = 0.000000;
const std::string OPERATER::REGION_NAME::itemName = "REGION_NAME";
const std::string OPERATER::REGION_NAME::defaultValue = "OPERNUM";


OPERNUM::OPERNUM( ) : ParserKeyword("OPERNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("OPERNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string OPERNUM::keywordName = "OPERNUM";
const std::string OPERNUM::data::itemName = "data";


OPTIONS::OPTIONS( ) : ParserKeyword("OPTIONS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("OPTIONS");
  {
     ParserRecord record;
     {
        ParserItem item("ITEM1", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM2", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM3", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM4", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM5", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM6", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM7", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM8", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM9", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM10", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM11", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM12", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM13", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM14", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM15", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM16", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM17", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM18", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM19", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM20", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM21", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM22", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM23", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM24", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM25", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM26", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM27", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM28", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM29", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM30", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM31", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM32", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM33", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM34", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM35", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM36", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM37", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM38", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM39", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM40", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM41", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM42", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM43", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM44", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM45", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM46", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM47", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM48", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM49", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM50", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM51", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM52", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM53", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM54", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM55", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM56", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM57", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM58", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM59", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM60", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM61", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM62", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM63", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM64", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM65", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM66", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM67", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM68", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM69", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM70", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM71", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM72", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM73", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM74", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM75", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM76", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM77", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM78", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM79", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM80", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM81", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM82", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM83", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM84", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM85", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM86", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM87", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM88", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM89", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM90", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM91", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM92", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM93", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM94", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM95", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM96", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM97", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM98", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM99", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM100", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM101", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM102", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM103", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM104", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM105", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM106", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM107", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM108", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM109", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM110", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM111", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM112", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM113", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM114", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM115", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM116", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM117", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM118", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM119", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM120", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM121", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM122", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM123", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM124", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM125", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM126", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM127", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM128", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM129", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM130", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM131", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM132", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM133", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM134", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM135", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM136", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM137", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM138", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM139", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM140", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM141", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM142", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM143", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM144", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM145", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM146", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM147", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM148", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM149", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM150", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM151", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM152", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM153", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM154", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM155", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM156", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM157", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM158", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM159", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM160", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM161", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM162", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM163", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM164", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM165", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM166", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM167", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM168", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM169", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM170", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM171", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM172", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM173", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM174", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM175", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM176", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM177", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM178", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM179", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM180", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM181", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM182", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM183", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM184", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM185", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM186", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM187", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM188", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM189", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM190", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM191", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM192", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM193", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM194", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM195", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM196", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM197", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string OPTIONS::keywordName = "OPTIONS";
const std::string OPTIONS::ITEM1::itemName = "ITEM1";
const int OPTIONS::ITEM1::defaultValue = 0;
const std::string OPTIONS::ITEM2::itemName = "ITEM2";
const int OPTIONS::ITEM2::defaultValue = 0;
const std::string OPTIONS::ITEM3::itemName = "ITEM3";
const int OPTIONS::ITEM3::defaultValue = 0;
const std::string OPTIONS::ITEM4::itemName = "ITEM4";
const int OPTIONS::ITEM4::defaultValue = 0;
const std::string OPTIONS::ITEM5::itemName = "ITEM5";
const int OPTIONS::ITEM5::defaultValue = 0;
const std::string OPTIONS::ITEM6::itemName = "ITEM6";
const int OPTIONS::ITEM6::defaultValue = 0;
const std::string OPTIONS::ITEM7::itemName = "ITEM7";
const int OPTIONS::ITEM7::defaultValue = 0;
const std::string OPTIONS::ITEM8::itemName = "ITEM8";
const int OPTIONS::ITEM8::defaultValue = 0;
const std::string OPTIONS::ITEM9::itemName = "ITEM9";
const int OPTIONS::ITEM9::defaultValue = 0;
const std::string OPTIONS::ITEM10::itemName = "ITEM10";
const int OPTIONS::ITEM10::defaultValue = 0;
const std::string OPTIONS::ITEM11::itemName = "ITEM11";
const int OPTIONS::ITEM11::defaultValue = 0;
const std::string OPTIONS::ITEM12::itemName = "ITEM12";
const int OPTIONS::ITEM12::defaultValue = 0;
const std::string OPTIONS::ITEM13::itemName = "ITEM13";
const int OPTIONS::ITEM13::defaultValue = 0;
const std::string OPTIONS::ITEM14::itemName = "ITEM14";
const int OPTIONS::ITEM14::defaultValue = 0;
const std::string OPTIONS::ITEM15::itemName = "ITEM15";
const int OPTIONS::ITEM15::defaultValue = 0;
const std::string OPTIONS::ITEM16::itemName = "ITEM16";
const int OPTIONS::ITEM16::defaultValue = 0;
const std::string OPTIONS::ITEM17::itemName = "ITEM17";
const int OPTIONS::ITEM17::defaultValue = 0;
const std::string OPTIONS::ITEM18::itemName = "ITEM18";
const int OPTIONS::ITEM18::defaultValue = 0;
const std::string OPTIONS::ITEM19::itemName = "ITEM19";
const int OPTIONS::ITEM19::defaultValue = 0;
const std::string OPTIONS::ITEM20::itemName = "ITEM20";
const int OPTIONS::ITEM20::defaultValue = 0;
const std::string OPTIONS::ITEM21::itemName = "ITEM21";
const int OPTIONS::ITEM21::defaultValue = 0;
const std::string OPTIONS::ITEM22::itemName = "ITEM22";
const int OPTIONS::ITEM22::defaultValue = 0;
const std::string OPTIONS::ITEM23::itemName = "ITEM23";
const int OPTIONS::ITEM23::defaultValue = 0;
const std::string OPTIONS::ITEM24::itemName = "ITEM24";
const int OPTIONS::ITEM24::defaultValue = 0;
const std::string OPTIONS::ITEM25::itemName = "ITEM25";
const int OPTIONS::ITEM25::defaultValue = 0;
const std::string OPTIONS::ITEM26::itemName = "ITEM26";
const int OPTIONS::ITEM26::defaultValue = 0;
const std::string OPTIONS::ITEM27::itemName = "ITEM27";
const int OPTIONS::ITEM27::defaultValue = 0;
const std::string OPTIONS::ITEM28::itemName = "ITEM28";
const int OPTIONS::ITEM28::defaultValue = 0;
const std::string OPTIONS::ITEM29::itemName = "ITEM29";
const int OPTIONS::ITEM29::defaultValue = 0;
const std::string OPTIONS::ITEM30::itemName = "ITEM30";
const int OPTIONS::ITEM30::defaultValue = 0;
const std::string OPTIONS::ITEM31::itemName = "ITEM31";
const int OPTIONS::ITEM31::defaultValue = 0;
const std::string OPTIONS::ITEM32::itemName = "ITEM32";
const int OPTIONS::ITEM32::defaultValue = 0;
const std::string OPTIONS::ITEM33::itemName = "ITEM33";
const int OPTIONS::ITEM33::defaultValue = 0;
const std::string OPTIONS::ITEM34::itemName = "ITEM34";
const int OPTIONS::ITEM34::defaultValue = 0;
const std::string OPTIONS::ITEM35::itemName = "ITEM35";
const int OPTIONS::ITEM35::defaultValue = 0;
const std::string OPTIONS::ITEM36::itemName = "ITEM36";
const int OPTIONS::ITEM36::defaultValue = 0;
const std::string OPTIONS::ITEM37::itemName = "ITEM37";
const int OPTIONS::ITEM37::defaultValue = 0;
const std::string OPTIONS::ITEM38::itemName = "ITEM38";
const int OPTIONS::ITEM38::defaultValue = 0;
const std::string OPTIONS::ITEM39::itemName = "ITEM39";
const int OPTIONS::ITEM39::defaultValue = 0;
const std::string OPTIONS::ITEM40::itemName = "ITEM40";
const int OPTIONS::ITEM40::defaultValue = 0;
const std::string OPTIONS::ITEM41::itemName = "ITEM41";
const int OPTIONS::ITEM41::defaultValue = 0;
const std::string OPTIONS::ITEM42::itemName = "ITEM42";
const int OPTIONS::ITEM42::defaultValue = 0;
const std::string OPTIONS::ITEM43::itemName = "ITEM43";
const int OPTIONS::ITEM43::defaultValue = 0;
const std::string OPTIONS::ITEM44::itemName = "ITEM44";
const int OPTIONS::ITEM44::defaultValue = 0;
const std::string OPTIONS::ITEM45::itemName = "ITEM45";
const int OPTIONS::ITEM45::defaultValue = 0;
const std::string OPTIONS::ITEM46::itemName = "ITEM46";
const int OPTIONS::ITEM46::defaultValue = 0;
const std::string OPTIONS::ITEM47::itemName = "ITEM47";
const int OPTIONS::ITEM47::defaultValue = 0;
const std::string OPTIONS::ITEM48::itemName = "ITEM48";
const int OPTIONS::ITEM48::defaultValue = 0;
const std::string OPTIONS::ITEM49::itemName = "ITEM49";
const int OPTIONS::ITEM49::defaultValue = 0;
const std::string OPTIONS::ITEM50::itemName = "ITEM50";
const int OPTIONS::ITEM50::defaultValue = 0;
const std::string OPTIONS::ITEM51::itemName = "ITEM51";
const int OPTIONS::ITEM51::defaultValue = 0;
const std::string OPTIONS::ITEM52::itemName = "ITEM52";
const int OPTIONS::ITEM52::defaultValue = 0;
const std::string OPTIONS::ITEM53::itemName = "ITEM53";
const int OPTIONS::ITEM53::defaultValue = 0;
const std::string OPTIONS::ITEM54::itemName = "ITEM54";
const int OPTIONS::ITEM54::defaultValue = 0;
const std::string OPTIONS::ITEM55::itemName = "ITEM55";
const int OPTIONS::ITEM55::defaultValue = 0;
const std::string OPTIONS::ITEM56::itemName = "ITEM56";
const int OPTIONS::ITEM56::defaultValue = 0;
const std::string OPTIONS::ITEM57::itemName = "ITEM57";
const int OPTIONS::ITEM57::defaultValue = 0;
const std::string OPTIONS::ITEM58::itemName = "ITEM58";
const int OPTIONS::ITEM58::defaultValue = 0;
const std::string OPTIONS::ITEM59::itemName = "ITEM59";
const int OPTIONS::ITEM59::defaultValue = 0;
const std::string OPTIONS::ITEM60::itemName = "ITEM60";
const int OPTIONS::ITEM60::defaultValue = 0;
const std::string OPTIONS::ITEM61::itemName = "ITEM61";
const int OPTIONS::ITEM61::defaultValue = 0;
const std::string OPTIONS::ITEM62::itemName = "ITEM62";
const int OPTIONS::ITEM62::defaultValue = 0;
const std::string OPTIONS::ITEM63::itemName = "ITEM63";
const int OPTIONS::ITEM63::defaultValue = 0;
const std::string OPTIONS::ITEM64::itemName = "ITEM64";
const int OPTIONS::ITEM64::defaultValue = 0;
const std::string OPTIONS::ITEM65::itemName = "ITEM65";
const int OPTIONS::ITEM65::defaultValue = 0;
const std::string OPTIONS::ITEM66::itemName = "ITEM66";
const int OPTIONS::ITEM66::defaultValue = 0;
const std::string OPTIONS::ITEM67::itemName = "ITEM67";
const int OPTIONS::ITEM67::defaultValue = 0;
const std::string OPTIONS::ITEM68::itemName = "ITEM68";
const int OPTIONS::ITEM68::defaultValue = 0;
const std::string OPTIONS::ITEM69::itemName = "ITEM69";
const int OPTIONS::ITEM69::defaultValue = 0;
const std::string OPTIONS::ITEM70::itemName = "ITEM70";
const int OPTIONS::ITEM70::defaultValue = 0;
const std::string OPTIONS::ITEM71::itemName = "ITEM71";
const int OPTIONS::ITEM71::defaultValue = 0;
const std::string OPTIONS::ITEM72::itemName = "ITEM72";
const int OPTIONS::ITEM72::defaultValue = 0;
const std::string OPTIONS::ITEM73::itemName = "ITEM73";
const int OPTIONS::ITEM73::defaultValue = 0;
const std::string OPTIONS::ITEM74::itemName = "ITEM74";
const int OPTIONS::ITEM74::defaultValue = 0;
const std::string OPTIONS::ITEM75::itemName = "ITEM75";
const int OPTIONS::ITEM75::defaultValue = 0;
const std::string OPTIONS::ITEM76::itemName = "ITEM76";
const int OPTIONS::ITEM76::defaultValue = 0;
const std::string OPTIONS::ITEM77::itemName = "ITEM77";
const int OPTIONS::ITEM77::defaultValue = 0;
const std::string OPTIONS::ITEM78::itemName = "ITEM78";
const int OPTIONS::ITEM78::defaultValue = 0;
const std::string OPTIONS::ITEM79::itemName = "ITEM79";
const int OPTIONS::ITEM79::defaultValue = 0;
const std::string OPTIONS::ITEM80::itemName = "ITEM80";
const int OPTIONS::ITEM80::defaultValue = 0;
const std::string OPTIONS::ITEM81::itemName = "ITEM81";
const int OPTIONS::ITEM81::defaultValue = 0;
const std::string OPTIONS::ITEM82::itemName = "ITEM82";
const int OPTIONS::ITEM82::defaultValue = 0;
const std::string OPTIONS::ITEM83::itemName = "ITEM83";
const int OPTIONS::ITEM83::defaultValue = 0;
const std::string OPTIONS::ITEM84::itemName = "ITEM84";
const int OPTIONS::ITEM84::defaultValue = 0;
const std::string OPTIONS::ITEM85::itemName = "ITEM85";
const int OPTIONS::ITEM85::defaultValue = 0;
const std::string OPTIONS::ITEM86::itemName = "ITEM86";
const int OPTIONS::ITEM86::defaultValue = 0;
const std::string OPTIONS::ITEM87::itemName = "ITEM87";
const int OPTIONS::ITEM87::defaultValue = 0;
const std::string OPTIONS::ITEM88::itemName = "ITEM88";
const int OPTIONS::ITEM88::defaultValue = 0;
const std::string OPTIONS::ITEM89::itemName = "ITEM89";
const int OPTIONS::ITEM89::defaultValue = 0;
const std::string OPTIONS::ITEM90::itemName = "ITEM90";
const int OPTIONS::ITEM90::defaultValue = 0;
const std::string OPTIONS::ITEM91::itemName = "ITEM91";
const int OPTIONS::ITEM91::defaultValue = 0;
const std::string OPTIONS::ITEM92::itemName = "ITEM92";
const int OPTIONS::ITEM92::defaultValue = 0;
const std::string OPTIONS::ITEM93::itemName = "ITEM93";
const int OPTIONS::ITEM93::defaultValue = 0;
const std::string OPTIONS::ITEM94::itemName = "ITEM94";
const int OPTIONS::ITEM94::defaultValue = 0;
const std::string OPTIONS::ITEM95::itemName = "ITEM95";
const int OPTIONS::ITEM95::defaultValue = 0;
const std::string OPTIONS::ITEM96::itemName = "ITEM96";
const int OPTIONS::ITEM96::defaultValue = 0;
const std::string OPTIONS::ITEM97::itemName = "ITEM97";
const int OPTIONS::ITEM97::defaultValue = 0;
const std::string OPTIONS::ITEM98::itemName = "ITEM98";
const int OPTIONS::ITEM98::defaultValue = 0;
const std::string OPTIONS::ITEM99::itemName = "ITEM99";
const int OPTIONS::ITEM99::defaultValue = 0;
const std::string OPTIONS::ITEM100::itemName = "ITEM100";
const int OPTIONS::ITEM100::defaultValue = 0;
const std::string OPTIONS::ITEM101::itemName = "ITEM101";
const int OPTIONS::ITEM101::defaultValue = 0;
const std::string OPTIONS::ITEM102::itemName = "ITEM102";
const int OPTIONS::ITEM102::defaultValue = 0;
const std::string OPTIONS::ITEM103::itemName = "ITEM103";
const int OPTIONS::ITEM103::defaultValue = 0;
const std::string OPTIONS::ITEM104::itemName = "ITEM104";
const int OPTIONS::ITEM104::defaultValue = 0;
const std::string OPTIONS::ITEM105::itemName = "ITEM105";
const int OPTIONS::ITEM105::defaultValue = 0;
const std::string OPTIONS::ITEM106::itemName = "ITEM106";
const int OPTIONS::ITEM106::defaultValue = 0;
const std::string OPTIONS::ITEM107::itemName = "ITEM107";
const int OPTIONS::ITEM107::defaultValue = 0;
const std::string OPTIONS::ITEM108::itemName = "ITEM108";
const int OPTIONS::ITEM108::defaultValue = 0;
const std::string OPTIONS::ITEM109::itemName = "ITEM109";
const int OPTIONS::ITEM109::defaultValue = 0;
const std::string OPTIONS::ITEM110::itemName = "ITEM110";
const int OPTIONS::ITEM110::defaultValue = 0;
const std::string OPTIONS::ITEM111::itemName = "ITEM111";
const int OPTIONS::ITEM111::defaultValue = 0;
const std::string OPTIONS::ITEM112::itemName = "ITEM112";
const int OPTIONS::ITEM112::defaultValue = 0;
const std::string OPTIONS::ITEM113::itemName = "ITEM113";
const int OPTIONS::ITEM113::defaultValue = 0;
const std::string OPTIONS::ITEM114::itemName = "ITEM114";
const int OPTIONS::ITEM114::defaultValue = 0;
const std::string OPTIONS::ITEM115::itemName = "ITEM115";
const int OPTIONS::ITEM115::defaultValue = 0;
const std::string OPTIONS::ITEM116::itemName = "ITEM116";
const int OPTIONS::ITEM116::defaultValue = 0;
const std::string OPTIONS::ITEM117::itemName = "ITEM117";
const int OPTIONS::ITEM117::defaultValue = 0;
const std::string OPTIONS::ITEM118::itemName = "ITEM118";
const int OPTIONS::ITEM118::defaultValue = 0;
const std::string OPTIONS::ITEM119::itemName = "ITEM119";
const int OPTIONS::ITEM119::defaultValue = 0;
const std::string OPTIONS::ITEM120::itemName = "ITEM120";
const int OPTIONS::ITEM120::defaultValue = 0;
const std::string OPTIONS::ITEM121::itemName = "ITEM121";
const int OPTIONS::ITEM121::defaultValue = 0;
const std::string OPTIONS::ITEM122::itemName = "ITEM122";
const int OPTIONS::ITEM122::defaultValue = 0;
const std::string OPTIONS::ITEM123::itemName = "ITEM123";
const int OPTIONS::ITEM123::defaultValue = 0;
const std::string OPTIONS::ITEM124::itemName = "ITEM124";
const int OPTIONS::ITEM124::defaultValue = 0;
const std::string OPTIONS::ITEM125::itemName = "ITEM125";
const int OPTIONS::ITEM125::defaultValue = 0;
const std::string OPTIONS::ITEM126::itemName = "ITEM126";
const int OPTIONS::ITEM126::defaultValue = 0;
const std::string OPTIONS::ITEM127::itemName = "ITEM127";
const int OPTIONS::ITEM127::defaultValue = 0;
const std::string OPTIONS::ITEM128::itemName = "ITEM128";
const int OPTIONS::ITEM128::defaultValue = 0;
const std::string OPTIONS::ITEM129::itemName = "ITEM129";
const int OPTIONS::ITEM129::defaultValue = 0;
const std::string OPTIONS::ITEM130::itemName = "ITEM130";
const int OPTIONS::ITEM130::defaultValue = 0;
const std::string OPTIONS::ITEM131::itemName = "ITEM131";
const int OPTIONS::ITEM131::defaultValue = 0;
const std::string OPTIONS::ITEM132::itemName = "ITEM132";
const int OPTIONS::ITEM132::defaultValue = 0;
const std::string OPTIONS::ITEM133::itemName = "ITEM133";
const int OPTIONS::ITEM133::defaultValue = 0;
const std::string OPTIONS::ITEM134::itemName = "ITEM134";
const int OPTIONS::ITEM134::defaultValue = 0;
const std::string OPTIONS::ITEM135::itemName = "ITEM135";
const int OPTIONS::ITEM135::defaultValue = 0;
const std::string OPTIONS::ITEM136::itemName = "ITEM136";
const int OPTIONS::ITEM136::defaultValue = 0;
const std::string OPTIONS::ITEM137::itemName = "ITEM137";
const int OPTIONS::ITEM137::defaultValue = 0;
const std::string OPTIONS::ITEM138::itemName = "ITEM138";
const int OPTIONS::ITEM138::defaultValue = 0;
const std::string OPTIONS::ITEM139::itemName = "ITEM139";
const int OPTIONS::ITEM139::defaultValue = 0;
const std::string OPTIONS::ITEM140::itemName = "ITEM140";
const int OPTIONS::ITEM140::defaultValue = 0;
const std::string OPTIONS::ITEM141::itemName = "ITEM141";
const int OPTIONS::ITEM141::defaultValue = 0;
const std::string OPTIONS::ITEM142::itemName = "ITEM142";
const int OPTIONS::ITEM142::defaultValue = 0;
const std::string OPTIONS::ITEM143::itemName = "ITEM143";
const int OPTIONS::ITEM143::defaultValue = 0;
const std::string OPTIONS::ITEM144::itemName = "ITEM144";
const int OPTIONS::ITEM144::defaultValue = 0;
const std::string OPTIONS::ITEM145::itemName = "ITEM145";
const int OPTIONS::ITEM145::defaultValue = 0;
const std::string OPTIONS::ITEM146::itemName = "ITEM146";
const int OPTIONS::ITEM146::defaultValue = 0;
const std::string OPTIONS::ITEM147::itemName = "ITEM147";
const int OPTIONS::ITEM147::defaultValue = 0;
const std::string OPTIONS::ITEM148::itemName = "ITEM148";
const int OPTIONS::ITEM148::defaultValue = 0;
const std::string OPTIONS::ITEM149::itemName = "ITEM149";
const int OPTIONS::ITEM149::defaultValue = 0;
const std::string OPTIONS::ITEM150::itemName = "ITEM150";
const int OPTIONS::ITEM150::defaultValue = 0;
const std::string OPTIONS::ITEM151::itemName = "ITEM151";
const int OPTIONS::ITEM151::defaultValue = 0;
const std::string OPTIONS::ITEM152::itemName = "ITEM152";
const int OPTIONS::ITEM152::defaultValue = 0;
const std::string OPTIONS::ITEM153::itemName = "ITEM153";
const int OPTIONS::ITEM153::defaultValue = 0;
const std::string OPTIONS::ITEM154::itemName = "ITEM154";
const int OPTIONS::ITEM154::defaultValue = 0;
const std::string OPTIONS::ITEM155::itemName = "ITEM155";
const int OPTIONS::ITEM155::defaultValue = 0;
const std::string OPTIONS::ITEM156::itemName = "ITEM156";
const int OPTIONS::ITEM156::defaultValue = 0;
const std::string OPTIONS::ITEM157::itemName = "ITEM157";
const int OPTIONS::ITEM157::defaultValue = 0;
const std::string OPTIONS::ITEM158::itemName = "ITEM158";
const int OPTIONS::ITEM158::defaultValue = 0;
const std::string OPTIONS::ITEM159::itemName = "ITEM159";
const int OPTIONS::ITEM159::defaultValue = 0;
const std::string OPTIONS::ITEM160::itemName = "ITEM160";
const int OPTIONS::ITEM160::defaultValue = 0;
const std::string OPTIONS::ITEM161::itemName = "ITEM161";
const int OPTIONS::ITEM161::defaultValue = 0;
const std::string OPTIONS::ITEM162::itemName = "ITEM162";
const int OPTIONS::ITEM162::defaultValue = 0;
const std::string OPTIONS::ITEM163::itemName = "ITEM163";
const int OPTIONS::ITEM163::defaultValue = 0;
const std::string OPTIONS::ITEM164::itemName = "ITEM164";
const int OPTIONS::ITEM164::defaultValue = 0;
const std::string OPTIONS::ITEM165::itemName = "ITEM165";
const int OPTIONS::ITEM165::defaultValue = 0;
const std::string OPTIONS::ITEM166::itemName = "ITEM166";
const int OPTIONS::ITEM166::defaultValue = 0;
const std::string OPTIONS::ITEM167::itemName = "ITEM167";
const int OPTIONS::ITEM167::defaultValue = 0;
const std::string OPTIONS::ITEM168::itemName = "ITEM168";
const int OPTIONS::ITEM168::defaultValue = 0;
const std::string OPTIONS::ITEM169::itemName = "ITEM169";
const int OPTIONS::ITEM169::defaultValue = 0;
const std::string OPTIONS::ITEM170::itemName = "ITEM170";
const int OPTIONS::ITEM170::defaultValue = 0;
const std::string OPTIONS::ITEM171::itemName = "ITEM171";
const int OPTIONS::ITEM171::defaultValue = 0;
const std::string OPTIONS::ITEM172::itemName = "ITEM172";
const int OPTIONS::ITEM172::defaultValue = 0;
const std::string OPTIONS::ITEM173::itemName = "ITEM173";
const int OPTIONS::ITEM173::defaultValue = 0;
const std::string OPTIONS::ITEM174::itemName = "ITEM174";
const int OPTIONS::ITEM174::defaultValue = 0;
const std::string OPTIONS::ITEM175::itemName = "ITEM175";
const int OPTIONS::ITEM175::defaultValue = 0;
const std::string OPTIONS::ITEM176::itemName = "ITEM176";
const int OPTIONS::ITEM176::defaultValue = 0;
const std::string OPTIONS::ITEM177::itemName = "ITEM177";
const int OPTIONS::ITEM177::defaultValue = 0;
const std::string OPTIONS::ITEM178::itemName = "ITEM178";
const int OPTIONS::ITEM178::defaultValue = 0;
const std::string OPTIONS::ITEM179::itemName = "ITEM179";
const int OPTIONS::ITEM179::defaultValue = 0;
const std::string OPTIONS::ITEM180::itemName = "ITEM180";
const int OPTIONS::ITEM180::defaultValue = 0;
const std::string OPTIONS::ITEM181::itemName = "ITEM181";
const int OPTIONS::ITEM181::defaultValue = 0;
const std::string OPTIONS::ITEM182::itemName = "ITEM182";
const int OPTIONS::ITEM182::defaultValue = 0;
const std::string OPTIONS::ITEM183::itemName = "ITEM183";
const int OPTIONS::ITEM183::defaultValue = 0;
const std::string OPTIONS::ITEM184::itemName = "ITEM184";
const int OPTIONS::ITEM184::defaultValue = 0;
const std::string OPTIONS::ITEM185::itemName = "ITEM185";
const int OPTIONS::ITEM185::defaultValue = 0;
const std::string OPTIONS::ITEM186::itemName = "ITEM186";
const int OPTIONS::ITEM186::defaultValue = 0;
const std::string OPTIONS::ITEM187::itemName = "ITEM187";
const int OPTIONS::ITEM187::defaultValue = 0;
const std::string OPTIONS::ITEM188::itemName = "ITEM188";
const int OPTIONS::ITEM188::defaultValue = 0;
const std::string OPTIONS::ITEM189::itemName = "ITEM189";
const int OPTIONS::ITEM189::defaultValue = 0;
const std::string OPTIONS::ITEM190::itemName = "ITEM190";
const int OPTIONS::ITEM190::defaultValue = 0;
const std::string OPTIONS::ITEM191::itemName = "ITEM191";
const int OPTIONS::ITEM191::defaultValue = 0;
const std::string OPTIONS::ITEM192::itemName = "ITEM192";
const int OPTIONS::ITEM192::defaultValue = 0;
const std::string OPTIONS::ITEM193::itemName = "ITEM193";
const int OPTIONS::ITEM193::defaultValue = 0;
const std::string OPTIONS::ITEM194::itemName = "ITEM194";
const int OPTIONS::ITEM194::defaultValue = 0;
const std::string OPTIONS::ITEM195::itemName = "ITEM195";
const int OPTIONS::ITEM195::defaultValue = 0;
const std::string OPTIONS::ITEM196::itemName = "ITEM196";
const int OPTIONS::ITEM196::defaultValue = 0;
const std::string OPTIONS::ITEM197::itemName = "ITEM197";
const int OPTIONS::ITEM197::defaultValue = 0;


OUTRAD::OUTRAD( ) : ParserKeyword("OUTRAD")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("OUTRAD");
  {
     ParserRecord record;
     {
        ParserItem item("RADIUS", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string OUTRAD::keywordName = "OUTRAD";
const std::string OUTRAD::RADIUS::itemName = "RADIUS";


OVERBURD::OVERBURD( ) : ParserKeyword("OVERBURD")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("ROCKCOMP","NTROCC",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("OVERBURD");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string OVERBURD::keywordName = "OVERBURD";
const std::string OVERBURD::DATA::itemName = "DATA";


PARALLEL::PARALLEL( ) : ParserKeyword("PARALLEL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("PARALLEL");
  {
     ParserRecord record;
     {
        ParserItem item("NDMAIN", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("MACHINE_TYPE", ParserItem::itype::STRING);
        item.setDefault( std::string("DISTRIBUTED") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PARALLEL::keywordName = "PARALLEL";
const std::string PARALLEL::NDMAIN::itemName = "NDMAIN";
const int PARALLEL::NDMAIN::defaultValue = 1;
const std::string PARALLEL::MACHINE_TYPE::itemName = "MACHINE_TYPE";
const std::string PARALLEL::MACHINE_TYPE::defaultValue = "DISTRIBUTED";


PARAOPTS::PARAOPTS( ) : ParserKeyword("PARAOPTS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("PARAOPTS");
  {
     ParserRecord record;
     {
        ParserItem item("METHOD", ParserItem::itype::STRING);
        item.setDefault( std::string("TREE") );
        record.addItem(item);
     }
     {
        ParserItem item("SET_PRINT", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("SIZE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("NUM_BUFFERS", ParserItem::itype::INT);
        item.setDefault( 2 );
        record.addItem(item);
     }
     {
        ParserItem item("VALUE_MEM", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("VALUE_COARSE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("VALUE_NNC", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("VALUE_PRT_FILE", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("RESERVED", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PARAOPTS::keywordName = "PARAOPTS";
const std::string PARAOPTS::METHOD::itemName = "METHOD";
const std::string PARAOPTS::METHOD::defaultValue = "TREE";
const std::string PARAOPTS::SET_PRINT::itemName = "SET_PRINT";
const int PARAOPTS::SET_PRINT::defaultValue = 0;
const std::string PARAOPTS::SIZE::itemName = "SIZE";
const int PARAOPTS::SIZE::defaultValue = 0;
const std::string PARAOPTS::NUM_BUFFERS::itemName = "NUM_BUFFERS";
const int PARAOPTS::NUM_BUFFERS::defaultValue = 2;
const std::string PARAOPTS::VALUE_MEM::itemName = "VALUE_MEM";
const int PARAOPTS::VALUE_MEM::defaultValue = 0;
const std::string PARAOPTS::VALUE_COARSE::itemName = "VALUE_COARSE";
const int PARAOPTS::VALUE_COARSE::defaultValue = 0;
const std::string PARAOPTS::VALUE_NNC::itemName = "VALUE_NNC";
const int PARAOPTS::VALUE_NNC::defaultValue = 0;
const std::string PARAOPTS::VALUE_PRT_FILE::itemName = "VALUE_PRT_FILE";
const int PARAOPTS::VALUE_PRT_FILE::defaultValue = 1;
const std::string PARAOPTS::RESERVED::itemName = "RESERVED";


PARTTRAC::PARTTRAC( ) : ParserKeyword("PARTTRAC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("PARTTRAC");
  {
     ParserRecord record;
     {
        ParserItem item("NPARTT", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("NKPTMX", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("NPKPMX", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PARTTRAC::keywordName = "PARTTRAC";
const std::string PARTTRAC::NPARTT::itemName = "NPARTT";
const int PARTTRAC::NPARTT::defaultValue = 0;
const std::string PARTTRAC::NKPTMX::itemName = "NKPTMX";
const int PARTTRAC::NKPTMX::defaultValue = 0;
const std::string PARTTRAC::NPKPMX::itemName = "NPKPMX";
const int PARTTRAC::NPKPMX::defaultValue = 0;


PATHS::PATHS( ) : ParserKeyword("PATHS")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("PATHS");
  {
     ParserRecord record;
     {
        ParserItem item("PathName", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("PathValue", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PATHS::keywordName = "PATHS";
const std::string PATHS::PathName::itemName = "PathName";
const std::string PATHS::PathValue::itemName = "PathValue";


PBUB::PBUB( ) : ParserKeyword("PBUB")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("PBUB");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PBUB::keywordName = "PBUB";
const std::string PBUB::data::itemName = "data";


PBVD::PBVD( ) : ParserKeyword("PBVD")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("EQLDIMS","NTEQUL",0);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("PBVD");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PBVD::keywordName = "PBVD";
const std::string PBVD::DATA::itemName = "DATA";


PCG::PCG( ) : ParserKeyword("PCG")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PCG");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PCG::keywordName = "PCG";
const std::string PCG::data::itemName = "data";


PCG32D::PCG32D( ) : ParserKeyword("PCG32D")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  setTableCollection( true );
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PCG32D");
  {
     ParserRecord record;
     {
        ParserItem item("SOME_DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PCG32D::keywordName = "PCG32D";
const std::string PCG32D::SOME_DATA::itemName = "SOME_DATA";


PCW::PCW( ) : ParserKeyword("PCW")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PCW");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PCW::keywordName = "PCW";
const std::string PCW::data::itemName = "data";


PCW32D::PCW32D( ) : ParserKeyword("PCW32D")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  setTableCollection( true );
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PCW32D");
  {
     ParserRecord record;
     {
        ParserItem item("SOME_DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PCW32D::keywordName = "PCW32D";
const std::string PCW32D::SOME_DATA::itemName = "SOME_DATA";


PDEW::PDEW( ) : ParserKeyword("PDEW")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("PDEW");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PDEW::keywordName = "PDEW";
const std::string PDEW::data::itemName = "data";


PDVD::PDVD( ) : ParserKeyword("PDVD")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("EQLDIMS","NTEQUL",0);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("PDVD");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PDVD::keywordName = "PDVD";
const std::string PDVD::DATA::itemName = "DATA";


PEBI::PEBI( ) : ParserKeyword("PEBI")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("PEBI");
  {
     ParserRecord record;
     {
        ParserItem item("NEG_TRANSMISSIBILITIES", ParserItem::itype::STRING);
        item.setDefault( std::string("No") );
        record.addItem(item);
     }
     {
        ParserItem item("AVOID_GRID_CALC", ParserItem::itype::STRING);
        item.setDefault( std::string("No") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PEBI::keywordName = "PEBI";
const std::string PEBI::NEG_TRANSMISSIBILITIES::itemName = "NEG_TRANSMISSIBILITIES";
const std::string PEBI::NEG_TRANSMISSIBILITIES::defaultValue = "No";
const std::string PEBI::AVOID_GRID_CALC::itemName = "AVOID_GRID_CALC";
const std::string PEBI::AVOID_GRID_CALC::defaultValue = "No";


PECOEFS::PECOEFS( ) : ParserKeyword("PECOEFS")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PECOEFS");
  {
     ParserRecord record;
     {
        ParserItem item("WAT_SALINITY", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("TEMP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Temperature");
        record.addItem(item);
     }
     {
        ParserItem item("MINERAL_DENSITY", ParserItem::itype::DOUBLE);
        item.push_backDimension("Density");
        record.addItem(item);
     }
     {
        ParserItem item("PHI_EFF_0", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("PHI_EFF_1", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("C_0", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("C_K", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("SHEAR_MOD", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("ALPHA", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("E", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("METHOD", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PECOEFS::keywordName = "PECOEFS";
const std::string PECOEFS::WAT_SALINITY::itemName = "WAT_SALINITY";
const std::string PECOEFS::TEMP::itemName = "TEMP";
const std::string PECOEFS::MINERAL_DENSITY::itemName = "MINERAL_DENSITY";
const std::string PECOEFS::PHI_EFF_0::itemName = "PHI_EFF_0";
const std::string PECOEFS::PHI_EFF_1::itemName = "PHI_EFF_1";
const std::string PECOEFS::C_0::itemName = "C_0";
const std::string PECOEFS::C_K::itemName = "C_K";
const std::string PECOEFS::SHEAR_MOD::itemName = "SHEAR_MOD";
const std::string PECOEFS::ALPHA::itemName = "ALPHA";
const double PECOEFS::ALPHA::defaultValue = 1.000000;
const std::string PECOEFS::E::itemName = "E";
const double PECOEFS::E::defaultValue = 1.000000;
const std::string PECOEFS::METHOD::itemName = "METHOD";
const int PECOEFS::METHOD::defaultValue = 0;


PEDIMS::PEDIMS( ) : ParserKeyword("PEDIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("PEDIMS");
  {
     ParserRecord record;
     {
        ParserItem item("NUM_REGIONS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_PRESSURE_POINTS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PEDIMS::keywordName = "PEDIMS";
const std::string PEDIMS::NUM_REGIONS::itemName = "NUM_REGIONS";
const int PEDIMS::NUM_REGIONS::defaultValue = 0;
const std::string PEDIMS::MAX_PRESSURE_POINTS::itemName = "MAX_PRESSURE_POINTS";
const int PEDIMS::MAX_PRESSURE_POINTS::defaultValue = 0;


PEGTABX::PEGTABX( ) : ParserKeyword("PEGTABX")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("PEDIMS","NUM_REGIONS",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PEGTAB0");
  addDeckName("PEGTAB1");
  addDeckName("PEGTAB2");
  addDeckName("PEGTAB3");
  addDeckName("PEGTAB4");
  addDeckName("PEGTAB5");
  addDeckName("PEGTAB6");
  addDeckName("PEGTAB7");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PEGTABX::keywordName = "PEGTABX";
const std::string PEGTABX::DATA::itemName = "DATA";


PEKTABX::PEKTABX( ) : ParserKeyword("PEKTABX")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("PEDIMS","NUM_REGIONS",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PEKTAB0");
  addDeckName("PEKTAB1");
  addDeckName("PEKTAB2");
  addDeckName("PEKTAB3");
  addDeckName("PEKTAB4");
  addDeckName("PEKTAB5");
  addDeckName("PEKTAB6");
  addDeckName("PEKTAB7");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PEKTABX::keywordName = "PEKTABX";
const std::string PEKTABX::DATA::itemName = "DATA";


PENUM::PENUM( ) : ParserKeyword("PENUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("PENUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PENUM::keywordName = "PENUM";
const std::string PENUM::data::itemName = "data";


PERFORMANCE_PROBE::PERFORMANCE_PROBE( ) : ParserKeyword("PERFORMANCE_PROBE")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("ELAPSED");
  addDeckName("HLINEARS");
  addDeckName("HSUMLINS");
  addDeckName("MAXDPR");
  addDeckName("MAXDSG");
  addDeckName("MAXDSO");
  addDeckName("MAXDSW");
  addDeckName("MEMORYTS");
  addDeckName("MLINEARS");
  addDeckName("MSUMLINS");
  addDeckName("MSUMNEWT");
  addDeckName("NBYTOT");
  addDeckName("NEWTON");
  addDeckName("NLINEARS");
  addDeckName("NLINSMAX");
  addDeckName("NLINSMIN");
  addDeckName("PERFORMA");
  addDeckName("STEPTYPE");
  addDeckName("TCPU");
  addDeckName("TCPUDAY");
  addDeckName("TCPUH");
  addDeckName("TCPUHT");
  addDeckName("TCPUSCH");
  addDeckName("TCPUTS");
  addDeckName("TCPUTSH");
  addDeckName("TCPUTSHT");
  addDeckName("TELAPDAY");
  addDeckName("TELAPLIN");
  addDeckName("TELAPTS");
  addDeckName("TIMESTEP");
  addDeckName("WNEWTON");
  addDeckName("ZIPEFF");
  addDeckName("ZIPEFFC");
}
const std::string PERFORMANCE_PROBE::keywordName = "PERFORMANCE_PROBE";


PERMAVE::PERMAVE( ) : ParserKeyword("PERMAVE")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("PERMAVE");
  {
     ParserRecord record;
     {
        ParserItem item("EXPO_0", ParserItem::itype::INT);
        item.setDefault( -1 );
        record.addItem(item);
     }
     {
        ParserItem item("EXPO_1", ParserItem::itype::INT);
        item.setDefault( -1 );
        record.addItem(item);
     }
     {
        ParserItem item("EXPO_2", ParserItem::itype::INT);
        item.setDefault( -1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PERMAVE::keywordName = "PERMAVE";
const std::string PERMAVE::EXPO_0::itemName = "EXPO_0";
const int PERMAVE::EXPO_0::defaultValue = -1;
const std::string PERMAVE::EXPO_1::itemName = "EXPO_1";
const int PERMAVE::EXPO_1::defaultValue = -1;
const std::string PERMAVE::EXPO_2::itemName = "EXPO_2";
const int PERMAVE::EXPO_2::defaultValue = -1;


PERMR::PERMR( ) : ParserKeyword("PERMR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("PERMR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Permeability");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PERMR::keywordName = "PERMR";
const std::string PERMR::data::itemName = "data";


PERMTHT::PERMTHT( ) : ParserKeyword("PERMTHT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("PERMTHT");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Permeability");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PERMTHT::keywordName = "PERMTHT";
const std::string PERMTHT::data::itemName = "data";


PERMX::PERMX( ) : ParserKeyword("PERMX")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("PERMX");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Permeability");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PERMX::keywordName = "PERMX";
const std::string PERMX::data::itemName = "data";


PERMXY::PERMXY( ) : ParserKeyword("PERMXY")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("PERMXY");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Permeability");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PERMXY::keywordName = "PERMXY";
const std::string PERMXY::data::itemName = "data";


PERMY::PERMY( ) : ParserKeyword("PERMY")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("PERMY");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(0) );
        item.push_backDimension("Permeability");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PERMY::keywordName = "PERMY";
const std::string PERMY::data::itemName = "data";
const double PERMY::data::defaultValue = 0.000000;


PERMYZ::PERMYZ( ) : ParserKeyword("PERMYZ")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("PERMYZ");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Permeability");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PERMYZ::keywordName = "PERMYZ";
const std::string PERMYZ::data::itemName = "data";


PERMZ::PERMZ( ) : ParserKeyword("PERMZ")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("PERMZ");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(0) );
        item.push_backDimension("Permeability");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PERMZ::keywordName = "PERMZ";
const std::string PERMZ::data::itemName = "data";
const double PERMZ::data::defaultValue = 0.000000;


PERMZX::PERMZX( ) : ParserKeyword("PERMZX")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("PERMZX");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Permeability");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PERMZX::keywordName = "PERMZX";
const std::string PERMZX::data::itemName = "data";


PETGRID::PETGRID( ) : ParserKeyword("PETGRID")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("PETGRID");
  {
     ParserRecord record;
     {
        ParserItem item("FILE_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PETGRID::keywordName = "PETGRID";
const std::string PETGRID::FILE_NAME::itemName = "FILE_NAME";


PETOPTS::PETOPTS( ) : ParserKeyword("PETOPTS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("PETOPTS");
  {
     ParserRecord record;
     {
        ParserItem item("OPTIONS", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PETOPTS::keywordName = "PETOPTS";
const std::string PETOPTS::OPTIONS::itemName = "OPTIONS";


PICOND::PICOND( ) : ParserKeyword("PICOND")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("PICOND");
  {
     ParserRecord record;
     {
        ParserItem item("MAX_INTERVAL_BELOW_DEWPOINT", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("MAX_INTERVAL_ABOVE_DEWPOINT", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("D_F", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("INCLUDE", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("F_L", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("F_U", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.100000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("DELTA_WAT_SAT", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("DELTA_PRESSURE", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("DELTA_FRAC_COMP", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.010000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("MAX_DELTA_TIME", ParserItem::itype::DOUBLE);
        item.setDefault( double(-1.000000) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("ADAPTIVE_ORD_CONTROL", ParserItem::itype::DOUBLE);
        item.setDefault( double(-1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("ADAPTIVE_ORD_MIN_SPACING", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PICOND::keywordName = "PICOND";
const std::string PICOND::MAX_INTERVAL_BELOW_DEWPOINT::itemName = "MAX_INTERVAL_BELOW_DEWPOINT";
const std::string PICOND::MAX_INTERVAL_ABOVE_DEWPOINT::itemName = "MAX_INTERVAL_ABOVE_DEWPOINT";
const std::string PICOND::D_F::itemName = "D_F";
const double PICOND::D_F::defaultValue = 1.000000;
const std::string PICOND::INCLUDE::itemName = "INCLUDE";
const std::string PICOND::INCLUDE::defaultValue = "NO";
const std::string PICOND::F_L::itemName = "F_L";
const double PICOND::F_L::defaultValue = 0.000000;
const std::string PICOND::F_U::itemName = "F_U";
const double PICOND::F_U::defaultValue = 1.100000;
const std::string PICOND::DELTA_WAT_SAT::itemName = "DELTA_WAT_SAT";
const std::string PICOND::DELTA_PRESSURE::itemName = "DELTA_PRESSURE";
const std::string PICOND::DELTA_FRAC_COMP::itemName = "DELTA_FRAC_COMP";
const double PICOND::DELTA_FRAC_COMP::defaultValue = 0.010000;
const std::string PICOND::MAX_DELTA_TIME::itemName = "MAX_DELTA_TIME";
const double PICOND::MAX_DELTA_TIME::defaultValue = -1.000000;
const std::string PICOND::ADAPTIVE_ORD_CONTROL::itemName = "ADAPTIVE_ORD_CONTROL";
const double PICOND::ADAPTIVE_ORD_CONTROL::defaultValue = -1.000000;
const std::string PICOND::ADAPTIVE_ORD_MIN_SPACING::itemName = "ADAPTIVE_ORD_MIN_SPACING";


PIMTDIMS::PIMTDIMS( ) : ParserKeyword("PIMTDIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("PIMTDIMS");
  {
     ParserRecord record;
     {
        ParserItem item("NTPIMT", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("NPPIMT", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PIMTDIMS::keywordName = "PIMTDIMS";
const std::string PIMTDIMS::NTPIMT::itemName = "NTPIMT";
const int PIMTDIMS::NTPIMT::defaultValue = 0;
const std::string PIMTDIMS::NPPIMT::itemName = "NPPIMT";
const int PIMTDIMS::NPPIMT::defaultValue = 0;


PIMULTAB::PIMULTAB( ) : ParserKeyword("PIMULTAB")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("PIMTDIMS","NTPIMT",0);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("PIMULTAB");
  {
     ParserRecord record;
     {
        ParserItem item("TABLE", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PIMULTAB::keywordName = "PIMULTAB";
const std::string PIMULTAB::TABLE::itemName = "TABLE";


PINCH::PINCH( ) : ParserKeyword("PINCH")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("PINCH");
  {
     ParserRecord record;
     {
        ParserItem item("THRESHOLD_THICKNESS", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.001000) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("CONTROL_OPTION", ParserItem::itype::STRING);
        item.setDefault( std::string("GAP") );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_EMPTY_GAP", ParserItem::itype::DOUBLE);
        item.setDefault( double(100000000000000000000.000000) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("PINCHOUT_OPTION", ParserItem::itype::STRING);
        item.setDefault( std::string("TOPBOT") );
        record.addItem(item);
     }
     {
        ParserItem item("MULTZ_OPTION", ParserItem::itype::STRING);
        item.setDefault( std::string("TOP") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PINCH::keywordName = "PINCH";
const std::string PINCH::THRESHOLD_THICKNESS::itemName = "THRESHOLD_THICKNESS";
const double PINCH::THRESHOLD_THICKNESS::defaultValue = 0.001000;
const std::string PINCH::CONTROL_OPTION::itemName = "CONTROL_OPTION";
const std::string PINCH::CONTROL_OPTION::defaultValue = "GAP";
const std::string PINCH::MAX_EMPTY_GAP::itemName = "MAX_EMPTY_GAP";
const double PINCH::MAX_EMPTY_GAP::defaultValue = 100000000000000000000.000000;
const std::string PINCH::PINCHOUT_OPTION::itemName = "PINCHOUT_OPTION";
const std::string PINCH::PINCHOUT_OPTION::defaultValue = "TOPBOT";
const std::string PINCH::MULTZ_OPTION::itemName = "MULTZ_OPTION";
const std::string PINCH::MULTZ_OPTION::defaultValue = "TOP";


PINCHNUM::PINCHNUM( ) : ParserKeyword("PINCHNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("PINCHNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PINCHNUM::keywordName = "PINCHNUM";
const std::string PINCHNUM::data::itemName = "data";


PINCHOUT::PINCHOUT( ) : ParserKeyword("PINCHOUT")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("PINCHOUT");
}
const std::string PINCHOUT::keywordName = "PINCHOUT";


PINCHREG::PINCHREG( ) : ParserKeyword("PINCHREG")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("PINCHREG");
  {
     ParserRecord record;
     {
        ParserItem item("THRESHOLD_THICKNESS", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.001000) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("OPTION1", ParserItem::itype::STRING);
        item.setDefault( std::string("GAP") );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_GAP", ParserItem::itype::DOUBLE);
        item.setDefault( double(100000000000000000000.000000) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("OPTION2", ParserItem::itype::STRING);
        item.setDefault( std::string("TOPBOT") );
        record.addItem(item);
     }
     {
        ParserItem item("OPTION3", ParserItem::itype::STRING);
        item.setDefault( std::string("TOP") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PINCHREG::keywordName = "PINCHREG";
const std::string PINCHREG::THRESHOLD_THICKNESS::itemName = "THRESHOLD_THICKNESS";
const double PINCHREG::THRESHOLD_THICKNESS::defaultValue = 0.001000;
const std::string PINCHREG::OPTION1::itemName = "OPTION1";
const std::string PINCHREG::OPTION1::defaultValue = "GAP";
const std::string PINCHREG::MAX_GAP::itemName = "MAX_GAP";
const double PINCHREG::MAX_GAP::defaultValue = 100000000000000000000.000000;
const std::string PINCHREG::OPTION2::itemName = "OPTION2";
const std::string PINCHREG::OPTION2::defaultValue = "TOPBOT";
const std::string PINCHREG::OPTION3::itemName = "OPTION3";
const std::string PINCHREG::OPTION3::defaultValue = "TOP";


PINCHXY::PINCHXY( ) : ParserKeyword("PINCHXY")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("PINCHXY");
  {
     ParserRecord record;
     {
        ParserItem item("THRESHOLD_XR", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.001000) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("THRESHOLD_YTHETA", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.001000) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PINCHXY::keywordName = "PINCHXY";
const std::string PINCHXY::THRESHOLD_XR::itemName = "THRESHOLD_XR";
const double PINCHXY::THRESHOLD_XR::defaultValue = 0.001000;
const std::string PINCHXY::THRESHOLD_YTHETA::itemName = "THRESHOLD_YTHETA";
const double PINCHXY::THRESHOLD_YTHETA::defaultValue = 0.001000;


PINTDIMS::PINTDIMS( ) : ParserKeyword("PINTDIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("PINTDIMS");
  {
     ParserRecord record;
     {
        ParserItem item("NTSKWAT", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NTSKPOLY", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NTPMWINJ", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PINTDIMS::keywordName = "PINTDIMS";
const std::string PINTDIMS::NTSKWAT::itemName = "NTSKWAT";
const int PINTDIMS::NTSKWAT::defaultValue = 1;
const std::string PINTDIMS::NTSKPOLY::itemName = "NTSKPOLY";
const int PINTDIMS::NTSKPOLY::defaultValue = 1;
const std::string PINTDIMS::NTPMWINJ::itemName = "NTPMWINJ";
const int PINTDIMS::NTPMWINJ::defaultValue = 1;


PLMIXNUM::PLMIXNUM( ) : ParserKeyword("PLMIXNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("PLMIXNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PLMIXNUM::keywordName = "PLMIXNUM";
const std::string PLMIXNUM::data::itemName = "data";


PLMIXPAR::PLMIXPAR( ) : ParserKeyword("PLMIXPAR")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("REGDIMS","NPLMIX",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PLMIXPAR");
  {
     ParserRecord record;
     {
        ParserItem item("TODD_LONGSTAFF", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PLMIXPAR::keywordName = "PLMIXPAR";
const std::string PLMIXPAR::TODD_LONGSTAFF::itemName = "TODD_LONGSTAFF";


PLYADS::PLYADS( ) : ParserKeyword("PLYADS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  addValidSectionName("SPECIAL");
  clearDeckNames();
  addDeckName("PLYADS");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("PolymerDensity");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PLYADS::keywordName = "PLYADS";
const std::string PLYADS::DATA::itemName = "DATA";


PLYADSS::PLYADSS( ) : ParserKeyword("PLYADSS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  setTableCollection( true );
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PLYADSS");
  {
     ParserRecord record;
     {
        ParserItem item("POLYMER_C", ParserItem::itype::DOUBLE);
        item.push_backDimension("PolymerDensity");
        record.addItem(item);
     }
     {
        ParserItem item("POLYMER_ADS_C", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PLYADSS::keywordName = "PLYADSS";
const std::string PLYADSS::POLYMER_C::itemName = "POLYMER_C";
const std::string PLYADSS::POLYMER_ADS_C::itemName = "POLYMER_ADS_C";
const std::string PLYADSS::DATA::itemName = "DATA";


PLYATEMP::PLYATEMP( ) : ParserKeyword("PLYATEMP")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PLYATEMP");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PLYATEMP::keywordName = "PLYATEMP";
const std::string PLYATEMP::data::itemName = "data";


PLYCAMAX::PLYCAMAX( ) : ParserKeyword("PLYCAMAX")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PLYCAMAX");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PLYCAMAX::keywordName = "PLYCAMAX";
const std::string PLYCAMAX::data::itemName = "data";


PLYDHFLF::PLYDHFLF( ) : ParserKeyword("PLYDHFLF")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SPECIAL");
  clearDeckNames();
  addDeckName("PLYDHFLF");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Temperature");
        item.push_backDimension("Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PLYDHFLF::keywordName = "PLYDHFLF";
const std::string PLYDHFLF::DATA::itemName = "DATA";


PLYMAX::PLYMAX( ) : ParserKeyword("PLYMAX")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("REGDIMS","NPLMIX",0);
  addValidSectionName("PROPS");
  addValidSectionName("SPECIAL");
  clearDeckNames();
  addDeckName("PLYMAX");
  {
     ParserRecord record;
     {
        ParserItem item("MAX_POLYMER_CONCENTRATION", ParserItem::itype::DOUBLE);
        item.push_backDimension("PolymerDensity");
        record.addItem(item);
     }
     {
        ParserItem item("MAX_SALT_CONCENTRATION", ParserItem::itype::DOUBLE);
        item.push_backDimension("PolymerDensity");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PLYMAX::keywordName = "PLYMAX";
const std::string PLYMAX::MAX_POLYMER_CONCENTRATION::itemName = "MAX_POLYMER_CONCENTRATION";
const std::string PLYMAX::MAX_SALT_CONCENTRATION::itemName = "MAX_SALT_CONCENTRATION";


PLYMWINJ::PLYMWINJ( ) : ParserKeyword("PLYMWINJ")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PLYMWINJ");
  {
     ParserRecord record;
     {
        ParserItem item("TABLE_NUMBER", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("THROUGHPUT", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("VELOCITY", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length/Time");
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("MOLECULARWEIGHT", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PLYMWINJ::keywordName = "PLYMWINJ";
const std::string PLYMWINJ::TABLE_NUMBER::itemName = "TABLE_NUMBER";
const std::string PLYMWINJ::THROUGHPUT::itemName = "THROUGHPUT";
const std::string PLYMWINJ::VELOCITY::itemName = "VELOCITY";
const std::string PLYMWINJ::MOLECULARWEIGHT::itemName = "MOLECULARWEIGHT";


PLYOPTS::PLYOPTS( ) : ParserKeyword("PLYOPTS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PLYOPTS");
  {
     ParserRecord record;
     {
        ParserItem item("MIN_SWAT", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-06) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PLYOPTS::keywordName = "PLYOPTS";
const std::string PLYOPTS::MIN_SWAT::itemName = "MIN_SWAT";
const double PLYOPTS::MIN_SWAT::defaultValue = 0.000001;


PLYRMDEN::PLYRMDEN( ) : ParserKeyword("PLYRMDEN")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("PLYRMDEN");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Mass/ReservoirVolume");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PLYRMDEN::keywordName = "PLYRMDEN";
const std::string PLYRMDEN::data::itemName = "data";


PLYROCK::PLYROCK( ) : ParserKeyword("PLYROCK")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PLYROCK");
  {
     ParserRecord record;
     {
        ParserItem item("IPV", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("RRF", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("ROCK_DENSITY", ParserItem::itype::DOUBLE);
        item.push_backDimension("Density");
        record.addItem(item);
     }
     {
        ParserItem item("AI", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("MAX_ADSORPTION", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PLYROCK::keywordName = "PLYROCK";
const std::string PLYROCK::IPV::itemName = "IPV";
const std::string PLYROCK::RRF::itemName = "RRF";
const std::string PLYROCK::ROCK_DENSITY::itemName = "ROCK_DENSITY";
const std::string PLYROCK::AI::itemName = "AI";
const double PLYROCK::AI::defaultValue = 1.000000;
const std::string PLYROCK::MAX_ADSORPTION::itemName = "MAX_ADSORPTION";


PLYROCKM::PLYROCKM( ) : ParserKeyword("PLYROCKM")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("PLYROCKM");
  {
     ParserRecord record;
     {
        ParserItem item("IPV", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("RRF", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("ROCK_DENSITY", ParserItem::itype::DOUBLE);
        item.push_backDimension("Density");
        record.addItem(item);
     }
     {
        ParserItem item("AI", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("MAX_ADSORPTION", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PLYROCKM::keywordName = "PLYROCKM";
const std::string PLYROCKM::IPV::itemName = "IPV";
const std::string PLYROCKM::RRF::itemName = "RRF";
const std::string PLYROCKM::ROCK_DENSITY::itemName = "ROCK_DENSITY";
const std::string PLYROCKM::AI::itemName = "AI";
const double PLYROCKM::AI::defaultValue = 1.000000;
const std::string PLYROCKM::MAX_ADSORPTION::itemName = "MAX_ADSORPTION";


PLYSHEAR::PLYSHEAR( ) : ParserKeyword("PLYSHEAR")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  addValidSectionName("SPECIAL");
  clearDeckNames();
  addDeckName("PLYSHEAR");
  {
     ParserRecord record;
     {
        ParserItem item("WATER_VELOCITY", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length/Time");
        record.addItem(item);
     }
     {
        ParserItem item("VRF", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PLYSHEAR::keywordName = "PLYSHEAR";
const std::string PLYSHEAR::WATER_VELOCITY::itemName = "WATER_VELOCITY";
const std::string PLYSHEAR::VRF::itemName = "VRF";


PLYSHLOG::PLYSHLOG( ) : ParserKeyword("PLYSHLOG")
{
  setFixedSize( (size_t) 2);
  addValidSectionName("PROPS");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SPECIAL");
  clearDeckNames();
  addDeckName("PLYSHLOG");
  {
     ParserRecord record;
     {
        ParserItem item("REF_POLYMER_CONCENTRATION", ParserItem::itype::DOUBLE);
        item.push_backDimension("PolymerDensity");
        record.addItem(item);
     }
     {
        ParserItem item("REF_SALINITY", ParserItem::itype::DOUBLE);
        item.push_backDimension("Salinity");
        record.addItem(item);
     }
     {
        ParserItem item("REF_TEMPERATURE", ParserItem::itype::DOUBLE);
        item.push_backDimension("Temperature");
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PLYSHLOG::keywordName = "PLYSHLOG";
const std::string PLYSHLOG::REF_POLYMER_CONCENTRATION::itemName = "REF_POLYMER_CONCENTRATION";
const std::string PLYSHLOG::REF_SALINITY::itemName = "REF_SALINITY";
const std::string PLYSHLOG::REF_TEMPERATURE::itemName = "REF_TEMPERATURE";
const std::string PLYSHLOG::DATA::itemName = "DATA";


PLYTRRF::PLYTRRF( ) : ParserKeyword("PLYTRRF")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PLYTRRF");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Temperature");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PLYTRRF::keywordName = "PLYTRRF";
const std::string PLYTRRF::DATA::itemName = "DATA";


PLYTRRFA::PLYTRRFA( ) : ParserKeyword("PLYTRRFA")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PLYTRRFA");
  {
     ParserRecord record;
     {
        ParserItem item("NBTRRF", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PLYTRRFA::keywordName = "PLYTRRFA";
const std::string PLYTRRFA::NBTRRF::itemName = "NBTRRF";


PLYVISC::PLYVISC( ) : ParserKeyword("PLYVISC")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SPECIAL");
  clearDeckNames();
  addDeckName("PLYVISC");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("PolymerDensity");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PLYVISC::keywordName = "PLYVISC";
const std::string PLYVISC::DATA::itemName = "DATA";


PLYVISCS::PLYVISCS( ) : ParserKeyword("PLYVISCS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("PLYVISCS");
  {
     ParserRecord record;
     {
        ParserItem item("PC", ParserItem::itype::DOUBLE);
        item.push_backDimension("Mass/LiquidSurfaceVolume");
        record.addItem(item);
     }
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PLYVISCS::keywordName = "PLYVISCS";
const std::string PLYVISCS::PC::itemName = "PC";
const std::string PLYVISCS::DATA::itemName = "DATA";


PLYVISCT::PLYVISCT( ) : ParserKeyword("PLYVISCT")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("PLYVISCT");
  {
     ParserRecord record;
     {
        ParserItem item("PC", ParserItem::itype::DOUBLE);
        item.push_backDimension("Mass/LiquidSurfaceVolume");
        record.addItem(item);
     }
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PLYVISCT::keywordName = "PLYVISCT";
const std::string PLYVISCT::PC::itemName = "PC";
const std::string PLYVISCT::DATA::itemName = "DATA";


PLYVMH::PLYVMH( ) : ParserKeyword("PLYVMH")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("REGDIMS","NPLMIX",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PLYVMH");
  {
     ParserRecord record;
     {
        ParserItem item("K_MH", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("A_MH", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("GAMMA", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("KAPPA", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PLYVMH::keywordName = "PLYVMH";
const std::string PLYVMH::K_MH::itemName = "K_MH";
const std::string PLYVMH::A_MH::itemName = "A_MH";
const std::string PLYVMH::GAMMA::itemName = "GAMMA";
const std::string PLYVMH::KAPPA::itemName = "KAPPA";


PLYVSCST::PLYVSCST( ) : ParserKeyword("PLYVSCST")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  setTableCollection( true );
  addValidSectionName("PROPS");
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("PLYVSCST");
  {
     ParserRecord record;
     {
        ParserItem item("PC1", ParserItem::itype::DOUBLE);
        item.push_backDimension("Mass/LiquidSurfaceVolume");
        record.addItem(item);
     }
     {
        ParserItem item("MULT", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PLYVSCST::keywordName = "PLYVSCST";
const std::string PLYVSCST::PC1::itemName = "PC1";
const std::string PLYVSCST::MULT::itemName = "MULT";


PMAX::PMAX( ) : ParserKeyword("PMAX")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PMAX");
  {
     ParserRecord record;
     {
        ParserItem item("MAX_PRESSURE", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("MAX_PRESSURE_CHECK", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("MIN_PRESSURE_CHECK", ParserItem::itype::DOUBLE);
        item.setDefault( double(100000000000000000000.000000) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("NUM_NODES", ParserItem::itype::INT);
        item.setDefault( 30 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PMAX::keywordName = "PMAX";
const std::string PMAX::MAX_PRESSURE::itemName = "MAX_PRESSURE";
const std::string PMAX::MAX_PRESSURE_CHECK::itemName = "MAX_PRESSURE_CHECK";
const double PMAX::MAX_PRESSURE_CHECK::defaultValue = 0.000000;
const std::string PMAX::MIN_PRESSURE_CHECK::itemName = "MIN_PRESSURE_CHECK";
const double PMAX::MIN_PRESSURE_CHECK::defaultValue = 100000000000000000000.000000;
const std::string PMAX::NUM_NODES::itemName = "NUM_NODES";
const int PMAX::NUM_NODES::defaultValue = 30;


PMISC::PMISC( ) : ParserKeyword("PMISC")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("MISCIBLE","NTMISC",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PMISC");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PMISC::keywordName = "PMISC";
const std::string PMISC::DATA::itemName = "DATA";


POLYMER::POLYMER( ) : ParserKeyword("POLYMER")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("POLYMER");
}
const std::string POLYMER::keywordName = "POLYMER";


POLYMW::POLYMW( ) : ParserKeyword("POLYMW")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("POLYMW");
}
const std::string POLYMW::keywordName = "POLYMW";


PORO::PORO( ) : ParserKeyword("PORO")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("PORO");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(0) );
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PORO::keywordName = "PORO";
const std::string PORO::data::itemName = "data";
const double PORO::data::defaultValue = 0.000000;


PORV::PORV( ) : ParserKeyword("PORV")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  clearDeckNames();
  addDeckName("PORV");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("ReservoirVolume");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PORV::keywordName = "PORV";
const std::string PORV::data::itemName = "data";


PPCWMAX::PPCWMAX( ) : ParserKeyword("PPCWMAX")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PPCWMAX");
  {
     ParserRecord record;
     {
        ParserItem item("MAXIMUM_CAPILLARY_PRESSURE", ParserItem::itype::DOUBLE);
        item.setDefault( double(100000000000000000000.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("MODIFY_CONNATE_SATURATION", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PPCWMAX::keywordName = "PPCWMAX";
const std::string PPCWMAX::MAXIMUM_CAPILLARY_PRESSURE::itemName = "MAXIMUM_CAPILLARY_PRESSURE";
const double PPCWMAX::MAXIMUM_CAPILLARY_PRESSURE::defaultValue = 100000000000000000000.000000;
const std::string PPCWMAX::MODIFY_CONNATE_SATURATION::itemName = "MODIFY_CONNATE_SATURATION";
const std::string PPCWMAX::MODIFY_CONNATE_SATURATION::defaultValue = "NO";


PREF::PREF( ) : ParserKeyword("PREF")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NUM_STATE_EQ",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PREF");
  {
     ParserRecord record;
     {
        ParserItem item("PRESSURE", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PREF::keywordName = "PREF";
const std::string PREF::PRESSURE::itemName = "PRESSURE";


PREFS::PREFS( ) : ParserKeyword("PREFS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NUM_STATE_EQ",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PREFS");
  {
     ParserRecord record;
     {
        ParserItem item("PRESSURE", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PREFS::keywordName = "PREFS";
const std::string PREFS::PRESSURE::itemName = "PRESSURE";


PRESSURE::PRESSURE( ) : ParserKeyword("PRESSURE")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("PRESSURE");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PRESSURE::keywordName = "PRESSURE";
const std::string PRESSURE::data::itemName = "data";


PRIORITY::PRIORITY( ) : ParserKeyword("PRIORITY")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("PRIORITY");
  {
     ParserRecord record;
     {
        ParserItem item("MIN_CALC_TIME", ParserItem::itype::DOUBLE);
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("A1", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("B1", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("C1", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("D1", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("E1", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("F1", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("G1", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("H1", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("A2", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("B2", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("C2", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("D2", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("E2", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("F2", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("G2", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("H2", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PRIORITY::keywordName = "PRIORITY";
const std::string PRIORITY::MIN_CALC_TIME::itemName = "MIN_CALC_TIME";
const std::string PRIORITY::A1::itemName = "A1";
const double PRIORITY::A1::defaultValue = 0.000000;
const std::string PRIORITY::B1::itemName = "B1";
const double PRIORITY::B1::defaultValue = 0.000000;
const std::string PRIORITY::C1::itemName = "C1";
const double PRIORITY::C1::defaultValue = 0.000000;
const std::string PRIORITY::D1::itemName = "D1";
const double PRIORITY::D1::defaultValue = 0.000000;
const std::string PRIORITY::E1::itemName = "E1";
const double PRIORITY::E1::defaultValue = 0.000000;
const std::string PRIORITY::F1::itemName = "F1";
const double PRIORITY::F1::defaultValue = 0.000000;
const std::string PRIORITY::G1::itemName = "G1";
const double PRIORITY::G1::defaultValue = 0.000000;
const std::string PRIORITY::H1::itemName = "H1";
const double PRIORITY::H1::defaultValue = 0.000000;
const std::string PRIORITY::A2::itemName = "A2";
const double PRIORITY::A2::defaultValue = 0.000000;
const std::string PRIORITY::B2::itemName = "B2";
const double PRIORITY::B2::defaultValue = 0.000000;
const std::string PRIORITY::C2::itemName = "C2";
const double PRIORITY::C2::defaultValue = 0.000000;
const std::string PRIORITY::D2::itemName = "D2";
const double PRIORITY::D2::defaultValue = 0.000000;
const std::string PRIORITY::E2::itemName = "E2";
const double PRIORITY::E2::defaultValue = 0.000000;
const std::string PRIORITY::F2::itemName = "F2";
const double PRIORITY::F2::defaultValue = 0.000000;
const std::string PRIORITY::G2::itemName = "G2";
const double PRIORITY::G2::defaultValue = 0.000000;
const std::string PRIORITY::H2::itemName = "H2";
const double PRIORITY::H2::defaultValue = 0.000000;


PROPS::PROPS( ) : ParserKeyword("PROPS")
{
  setFixedSize( (size_t) 0);
  clearDeckNames();
  addDeckName("PROPS");
}
const std::string PROPS::keywordName = "PROPS";


PRORDER::PRORDER( ) : ParserKeyword("PRORDER")
{
  setFixedSize( (size_t) 2);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("PRORDER");
  {
     ParserRecord record;
     {
        ParserItem item("NO1", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("NO2", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("NO3", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("NO4", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("NO5", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("OPT1", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     {
        ParserItem item("OPT2", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     {
        ParserItem item("OPT3", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     {
        ParserItem item("OPT4", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     {
        ParserItem item("OPT5", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PRORDER::keywordName = "PRORDER";
const std::string PRORDER::NO1::itemName = "NO1";
const std::string PRORDER::NO2::itemName = "NO2";
const std::string PRORDER::NO3::itemName = "NO3";
const std::string PRORDER::NO4::itemName = "NO4";
const std::string PRORDER::NO5::itemName = "NO5";
const std::string PRORDER::OPT1::itemName = "OPT1";
const std::string PRORDER::OPT1::defaultValue = "YES";
const std::string PRORDER::OPT2::itemName = "OPT2";
const std::string PRORDER::OPT2::defaultValue = "YES";
const std::string PRORDER::OPT3::itemName = "OPT3";
const std::string PRORDER::OPT3::defaultValue = "YES";
const std::string PRORDER::OPT4::itemName = "OPT4";
const std::string PRORDER::OPT4::defaultValue = "YES";
const std::string PRORDER::OPT5::itemName = "OPT5";
const std::string PRORDER::OPT5::defaultValue = "YES";


PSTEADY::PSTEADY( ) : ParserKeyword("PSTEADY")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("PSTEADY");
  {
     ParserRecord record;
     {
        ParserItem item("DAY", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("MONTH", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("YEAR", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("DIFF", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("PRESSURE_TOL", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("OIL_TOL", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("WATER_TOL", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("GAS_TOL", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("BRINE_TOL", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("MAX_TIME", ParserItem::itype::DOUBLE);
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("MIN_TIME", ParserItem::itype::DOUBLE);
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("PIM_AQUIFERS", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PSTEADY::keywordName = "PSTEADY";
const std::string PSTEADY::DAY::itemName = "DAY";
const std::string PSTEADY::MONTH::itemName = "MONTH";
const std::string PSTEADY::YEAR::itemName = "YEAR";
const std::string PSTEADY::DIFF::itemName = "DIFF";
const std::string PSTEADY::PRESSURE_TOL::itemName = "PRESSURE_TOL";
const std::string PSTEADY::OIL_TOL::itemName = "OIL_TOL";
const std::string PSTEADY::WATER_TOL::itemName = "WATER_TOL";
const std::string PSTEADY::GAS_TOL::itemName = "GAS_TOL";
const std::string PSTEADY::BRINE_TOL::itemName = "BRINE_TOL";
const std::string PSTEADY::MAX_TIME::itemName = "MAX_TIME";
const std::string PSTEADY::MIN_TIME::itemName = "MIN_TIME";
const std::string PSTEADY::PIM_AQUIFERS::itemName = "PIM_AQUIFERS";
const std::string PSTEADY::PIM_AQUIFERS::defaultValue = "NO";


PSWRG::PSWRG( ) : ParserKeyword("PSWRG")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PSWRG");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PSWRG::keywordName = "PSWRG";
const std::string PSWRG::data::itemName = "data";


PSWRO::PSWRO( ) : ParserKeyword("PSWRO")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PSWRO");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PSWRO::keywordName = "PSWRO";
const std::string PSWRO::data::itemName = "data";


PVCDO::PVCDO( ) : ParserKeyword("PVCDO")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PVCDO");
  {
     ParserRecord record;
     {
        ParserItem item("P_REF", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("OIL_VOL_FACTOR", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("OIL_COMPRESSIBILITY", ParserItem::itype::DOUBLE);
        item.push_backDimension("1/Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("OIL_VISCOSITY", ParserItem::itype::DOUBLE);
        item.push_backDimension("Viscosity");
        record.addItem(item);
     }
     {
        ParserItem item("OIL_VISCOSIBILITY", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("1/Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PVCDO::keywordName = "PVCDO";
const std::string PVCDO::P_REF::itemName = "P_REF";
const std::string PVCDO::OIL_VOL_FACTOR::itemName = "OIL_VOL_FACTOR";
const std::string PVCDO::OIL_COMPRESSIBILITY::itemName = "OIL_COMPRESSIBILITY";
const std::string PVCDO::OIL_VISCOSITY::itemName = "OIL_VISCOSITY";
const std::string PVCDO::OIL_VISCOSIBILITY::itemName = "OIL_VISCOSIBILITY";
const double PVCDO::OIL_VISCOSIBILITY::defaultValue = 0.000000;


PVCO::PVCO( ) : ParserKeyword("PVCO")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PVCO");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        item.push_backDimension("GasSurfaceVolume/LiquidSurfaceVolume");
        item.push_backDimension("ReservoirVolume/LiquidSurfaceVolume");
        item.push_backDimension("Viscosity");
        item.push_backDimension("1/Pressure");
        item.push_backDimension("1/Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PVCO::keywordName = "PVCO";
const std::string PVCO::DATA::itemName = "DATA";


PVDG::PVDG( ) : ParserKeyword("PVDG")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PVDG");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        item.push_backDimension("OilDissolutionFactor");
        item.push_backDimension("Viscosity");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PVDG::keywordName = "PVDG";
const std::string PVDG::DATA::itemName = "DATA";


PVDO::PVDO( ) : ParserKeyword("PVDO")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PVDO");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        item.push_backDimension("1");
        item.push_backDimension("Viscosity");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PVDO::keywordName = "PVDO";
const std::string PVDO::DATA::itemName = "DATA";


PVDS::PVDS( ) : ParserKeyword("PVDS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PVDS");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        item.push_backDimension("OilDissolutionFactor");
        item.push_backDimension("Viscosity");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PVDS::keywordName = "PVDS";
const std::string PVDS::DATA::itemName = "DATA";


PVTG::PVTG( ) : ParserKeyword("PVTG")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  setTableCollection( true );
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PVTG");
  {
     ParserRecord record;
     {
        ParserItem item("GAS_PRESSURE", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("OilDissolutionFactor");
        item.push_backDimension("OilDissolutionFactor");
        item.push_backDimension("Viscosity");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PVTG::keywordName = "PVTG";
const std::string PVTG::GAS_PRESSURE::itemName = "GAS_PRESSURE";
const std::string PVTG::DATA::itemName = "DATA";


PVTNUM::PVTNUM( ) : ParserKeyword("PVTNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("PVTNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string PVTNUM::keywordName = "PVTNUM";
const std::string PVTNUM::data::itemName = "data";


PVTO::PVTO( ) : ParserKeyword("PVTO")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  setTableCollection( true );
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PVTO");
  {
     ParserRecord record;
     {
        ParserItem item("RS", ParserItem::itype::DOUBLE);
        item.push_backDimension("GasDissolutionFactor");
        record.addItem(item);
     }
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        item.push_backDimension("1");
        item.push_backDimension("Viscosity");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PVTO::keywordName = "PVTO";
const std::string PVTO::RS::itemName = "RS";
const std::string PVTO::DATA::itemName = "DATA";


PVTW::PVTW( ) : ParserKeyword("PVTW")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("PVTW");
  {
     ParserRecord record;
     {
        ParserItem item("P_REF", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("WATER_VOL_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("WATER_COMPRESSIBILITY", ParserItem::itype::DOUBLE);
        item.setDefault( double(4e-05) );
        item.push_backDimension("1/Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("WATER_VISCOSITY", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.500000) );
        item.push_backDimension("Viscosity");
        record.addItem(item);
     }
     {
        ParserItem item("WATER_VISCOSIBILITY", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("1/Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PVTW::keywordName = "PVTW";
const std::string PVTW::P_REF::itemName = "P_REF";
const std::string PVTW::WATER_VOL_FACTOR::itemName = "WATER_VOL_FACTOR";
const double PVTW::WATER_VOL_FACTOR::defaultValue = 1.000000;
const std::string PVTW::WATER_COMPRESSIBILITY::itemName = "WATER_COMPRESSIBILITY";
const double PVTW::WATER_COMPRESSIBILITY::defaultValue = 0.000040;
const std::string PVTW::WATER_VISCOSITY::itemName = "WATER_VISCOSITY";
const double PVTW::WATER_VISCOSITY::defaultValue = 0.500000;
const std::string PVTW::WATER_VISCOSIBILITY::itemName = "WATER_VISCOSIBILITY";
const double PVTW::WATER_VISCOSIBILITY::defaultValue = 0.000000;


PVT_M::PVT_M( ) : ParserKeyword("PVT_M")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("PVT-M");
}
const std::string PVT_M::keywordName = "PVT_M";


PYACTION::PYACTION( ) : ParserKeyword("PYACTION")
{
  setSizeType(FIXED_CODE);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("PYACTION");
  setCodeEnd("<<<");
  {
     ParserRecord record;
     {
        ParserItem item("code", ParserItem::itype::RAW_STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PYACTION::keywordName = "PYACTION";
const std::string PYACTION::code::itemName = "code";


PYINPUT::PYINPUT( ) : ParserKeyword("PYINPUT")
{
  setSizeType(FIXED_CODE);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("PYINPUT");
  setCodeEnd("<<<");
  {
     ParserRecord record;
     {
        ParserItem item("code", ParserItem::itype::RAW_STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string PYINPUT::keywordName = "PYINPUT";
const std::string PYINPUT::code::itemName = "code";


QDRILL::QDRILL( ) : ParserKeyword("QDRILL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("QDRILL");
  {
     ParserRecord record;
     {
        ParserItem item("WELL_NAME", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string QDRILL::keywordName = "QDRILL";
const std::string QDRILL::WELL_NAME::itemName = "WELL_NAME";


QHRATING::QHRATING( ) : ParserKeyword("QHRATING")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("RIVRDIMS","NRATTA",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("QHRATING");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length*Length*Length/Time");
        item.push_backDimension("Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string QHRATING::keywordName = "QHRATING";
const std::string QHRATING::DATA::itemName = "DATA";


QMOBIL::QMOBIL( ) : ParserKeyword("QMOBIL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("QMOBIL");
  {
     ParserRecord record;
     {
        ParserItem item("MOBILE_END_POINT_CORRECTION", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string QMOBIL::keywordName = "QMOBIL";
const std::string QMOBIL::MOBILE_END_POINT_CORRECTION::itemName = "MOBILE_END_POINT_CORRECTION";


RADFIN4::RADFIN4( ) : ParserKeyword("RADFIN4")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  addValidSectionName("SPECIAL");
  clearDeckNames();
  addDeckName("RADFIN4");
  {
     ParserRecord record;
     {
        ParserItem item("NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("I1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("I2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NR", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NTHETA", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NZ", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NWMAX", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RADFIN4::keywordName = "RADFIN4";
const std::string RADFIN4::NAME::itemName = "NAME";
const std::string RADFIN4::I1::itemName = "I1";
const std::string RADFIN4::I2::itemName = "I2";
const std::string RADFIN4::J1::itemName = "J1";
const std::string RADFIN4::J2::itemName = "J2";
const std::string RADFIN4::K1::itemName = "K1";
const std::string RADFIN4::K2::itemName = "K2";
const std::string RADFIN4::NR::itemName = "NR";
const std::string RADFIN4::NTHETA::itemName = "NTHETA";
const std::string RADFIN4::NZ::itemName = "NZ";
const std::string RADFIN4::NWMAX::itemName = "NWMAX";
const int RADFIN4::NWMAX::defaultValue = 1;


RADIAL::RADIAL( ) : ParserKeyword("RADIAL")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("RADIAL");
}
const std::string RADIAL::keywordName = "RADIAL";


RAINFALL::RAINFALL( ) : ParserKeyword("RAINFALL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("RAINFALL");
  {
     ParserRecord record;
     {
        ParserItem item("AQUIFER_ID", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JAN_FLUX", ParserItem::itype::DOUBLE);
        item.push_backDimension("LiquidSurfaceVolume/Time*Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("FEB_FLUX", ParserItem::itype::DOUBLE);
        item.push_backDimension("LiquidSurfaceVolume/Time*Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("MAR_FLUX", ParserItem::itype::DOUBLE);
        item.push_backDimension("LiquidSurfaceVolume/Time*Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("APR_FLUX", ParserItem::itype::DOUBLE);
        item.push_backDimension("LiquidSurfaceVolume/Time*Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("MAI_FLUX", ParserItem::itype::DOUBLE);
        item.push_backDimension("LiquidSurfaceVolume/Time*Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("JUN_FLUX", ParserItem::itype::DOUBLE);
        item.push_backDimension("LiquidSurfaceVolume/Time*Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("JUL_FLUX", ParserItem::itype::DOUBLE);
        item.push_backDimension("LiquidSurfaceVolume/Time*Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("AUG_FLUX", ParserItem::itype::DOUBLE);
        item.push_backDimension("LiquidSurfaceVolume/Time*Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("SEP_FLUX", ParserItem::itype::DOUBLE);
        item.push_backDimension("LiquidSurfaceVolume/Time*Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("OCT_FLUX", ParserItem::itype::DOUBLE);
        item.push_backDimension("LiquidSurfaceVolume/Time*Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("NOV_FLUX", ParserItem::itype::DOUBLE);
        item.push_backDimension("LiquidSurfaceVolume/Time*Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("DES_FLUX", ParserItem::itype::DOUBLE);
        item.push_backDimension("LiquidSurfaceVolume/Time*Length*Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RAINFALL::keywordName = "RAINFALL";
const std::string RAINFALL::AQUIFER_ID::itemName = "AQUIFER_ID";
const std::string RAINFALL::JAN_FLUX::itemName = "JAN_FLUX";
const std::string RAINFALL::FEB_FLUX::itemName = "FEB_FLUX";
const std::string RAINFALL::MAR_FLUX::itemName = "MAR_FLUX";
const std::string RAINFALL::APR_FLUX::itemName = "APR_FLUX";
const std::string RAINFALL::MAI_FLUX::itemName = "MAI_FLUX";
const std::string RAINFALL::JUN_FLUX::itemName = "JUN_FLUX";
const std::string RAINFALL::JUL_FLUX::itemName = "JUL_FLUX";
const std::string RAINFALL::AUG_FLUX::itemName = "AUG_FLUX";
const std::string RAINFALL::SEP_FLUX::itemName = "SEP_FLUX";
const std::string RAINFALL::OCT_FLUX::itemName = "OCT_FLUX";
const std::string RAINFALL::NOV_FLUX::itemName = "NOV_FLUX";
const std::string RAINFALL::DES_FLUX::itemName = "DES_FLUX";


RBEDCONT::RBEDCONT( ) : ParserKeyword("RBEDCONT")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("RIVRDIMS","MXTBGR",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("RBEDCONT");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        item.push_backDimension("Length*Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RBEDCONT::keywordName = "RBEDCONT";
const std::string RBEDCONT::DATA::itemName = "DATA";


RCMASTS::RCMASTS( ) : ParserKeyword("RCMASTS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("RCMASTS");
  {
     ParserRecord record;
     {
        ParserItem item("MIN_TSTEP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RCMASTS::keywordName = "RCMASTS";
const std::string RCMASTS::MIN_TSTEP::itemName = "MIN_TSTEP";


REACHES::REACHES( ) : ParserKeyword("REACHES")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("REACHES");
  {
     ParserRecord record;
     {
        ParserItem item("RIVER", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("XPOS", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("YPOS", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("ZPOS", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("LENGTH1", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("INPUT_TYPE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("START_REACH", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("END_REACH", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("OUTLET_REACH", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("BRANCH", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("LENGTH2", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("DEPTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("ROUGHNESS", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("XLENGTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("YLENGTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("REACH_LENGTH", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("NUM_REACHES", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("DEPTH_SOMETHING", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string REACHES::keywordName = "REACHES";
const std::string REACHES::RIVER::itemName = "RIVER";
const std::string REACHES::XPOS::itemName = "XPOS";
const std::string REACHES::YPOS::itemName = "YPOS";
const std::string REACHES::ZPOS::itemName = "ZPOS";
const std::string REACHES::LENGTH1::itemName = "LENGTH1";
const std::string REACHES::INPUT_TYPE::itemName = "INPUT_TYPE";
const std::string REACHES::START_REACH::itemName = "START_REACH";
const std::string REACHES::END_REACH::itemName = "END_REACH";
const std::string REACHES::OUTLET_REACH::itemName = "OUTLET_REACH";
const std::string REACHES::BRANCH::itemName = "BRANCH";
const std::string REACHES::LENGTH2::itemName = "LENGTH2";
const std::string REACHES::DEPTH::itemName = "DEPTH";
const std::string REACHES::PROFILE::itemName = "PROFILE";
const int REACHES::PROFILE::defaultValue = 1;
const std::string REACHES::ROUGHNESS::itemName = "ROUGHNESS";
const std::string REACHES::XLENGTH::itemName = "XLENGTH";
const std::string REACHES::YLENGTH::itemName = "YLENGTH";
const std::string REACHES::REACH_LENGTH::itemName = "REACH_LENGTH";
const double REACHES::REACH_LENGTH::defaultValue = 0.000000;
const std::string REACHES::NUM_REACHES::itemName = "NUM_REACHES";
const int REACHES::NUM_REACHES::defaultValue = 1;
const std::string REACHES::DEPTH_SOMETHING::itemName = "DEPTH_SOMETHING";
const int REACHES::DEPTH_SOMETHING::defaultValue = 1;


READDATA::READDATA( ) : ParserKeyword("READDATA")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("READDATA");
  {
     ParserRecord record;
     {
        ParserItem item("INPUT_METHOD", ParserItem::itype::STRING);
        item.setDefault( std::string("FILE") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string READDATA::keywordName = "READDATA";
const std::string READDATA::INPUT_METHOD::itemName = "INPUT_METHOD";
const std::string READDATA::INPUT_METHOD::defaultValue = "FILE";


REFINE::REFINE( ) : ParserKeyword("REFINE")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("REFINE");
  {
     ParserRecord record;
     {
        ParserItem item("LGR", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string REFINE::keywordName = "REFINE";
const std::string REFINE::LGR::itemName = "LGR";


REGDIMS::REGDIMS( ) : ParserKeyword("REGDIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("REGDIMS");
  {
     ParserRecord record;
     {
        ParserItem item("NTFIP", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NMFIPR", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NRFREG", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("NTFREG", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_ETRACK", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("NTCREG", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_OPERNUM", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_OPERATE_DWORK", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_OPERATE_IWORK", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("NPLMIX", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string REGDIMS::keywordName = "REGDIMS";
const std::string REGDIMS::NTFIP::itemName = "NTFIP";
const int REGDIMS::NTFIP::defaultValue = 1;
const std::string REGDIMS::NMFIPR::itemName = "NMFIPR";
const int REGDIMS::NMFIPR::defaultValue = 1;
const std::string REGDIMS::NRFREG::itemName = "NRFREG";
const int REGDIMS::NRFREG::defaultValue = 0;
const std::string REGDIMS::NTFREG::itemName = "NTFREG";
const int REGDIMS::NTFREG::defaultValue = 0;
const std::string REGDIMS::MAX_ETRACK::itemName = "MAX_ETRACK";
const int REGDIMS::MAX_ETRACK::defaultValue = 0;
const std::string REGDIMS::NTCREG::itemName = "NTCREG";
const int REGDIMS::NTCREG::defaultValue = 1;
const std::string REGDIMS::MAX_OPERNUM::itemName = "MAX_OPERNUM";
const int REGDIMS::MAX_OPERNUM::defaultValue = 0;
const std::string REGDIMS::MAX_OPERATE_DWORK::itemName = "MAX_OPERATE_DWORK";
const int REGDIMS::MAX_OPERATE_DWORK::defaultValue = 0;
const std::string REGDIMS::MAX_OPERATE_IWORK::itemName = "MAX_OPERATE_IWORK";
const int REGDIMS::MAX_OPERATE_IWORK::defaultValue = 0;
const std::string REGDIMS::NPLMIX::itemName = "NPLMIX";
const int REGDIMS::NPLMIX::defaultValue = 1;


REGION2REGION_PROBE::REGION2REGION_PROBE( ) : ParserKeyword("REGION2REGION_PROBE")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("RGFT");
  addDeckName("ROFT");
  addDeckName("RWFT");
  {
     ParserRecord record;
     {
        ParserItem item("REGION1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("REGION2", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string REGION2REGION_PROBE::keywordName = "REGION2REGION_PROBE";
const std::string REGION2REGION_PROBE::REGION1::itemName = "REGION1";
const std::string REGION2REGION_PROBE::REGION2::itemName = "REGION2";


REGIONS::REGIONS( ) : ParserKeyword("REGIONS")
{
  setFixedSize( (size_t) 0);
  clearDeckNames();
  addDeckName("REGIONS");
}
const std::string REGIONS::keywordName = "REGIONS";


REGION_PROBE::REGION_PROBE( ) : ParserKeyword("REGION_PROBE")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("RAPI");
  addDeckName("RCAD");
  addDeckName("RCFT");
  addDeckName("RCGC");
  addDeckName("RCIP");
  addDeckName("RCSC");
  addDeckName("RGDEN");
  addDeckName("RGFTG");
  addDeckName("RGFTL");
  addDeckName("RGIP");
  addDeckName("RGIPG");
  addDeckName("RGIPL");
  addDeckName("RGIR");
  addDeckName("RGIT");
  addDeckName("RGP");
  addDeckName("RGPR");
  addDeckName("RGPRF");
  addDeckName("RGPRS");
  addDeckName("RGPT");
  addDeckName("RGPTF");
  addDeckName("RGPTS");
  addDeckName("RGPV");
  addDeckName("RGSAT");
  addDeckName("RGVIS");
  addDeckName("RHPV");
  addDeckName("RNFT");
  addDeckName("RNIP");
  addDeckName("RODEN");
  addDeckName("ROE");
  addDeckName("ROEIG");
  addDeckName("ROEIW");
  addDeckName("ROEW");
  addDeckName("ROEWG");
  addDeckName("ROEWW");
  addDeckName("ROIP");
  addDeckName("ROIPG");
  addDeckName("ROIPL");
  addDeckName("ROIR");
  addDeckName("ROIT");
  addDeckName("ROP");
  addDeckName("ROPR");
  addDeckName("ROPT");
  addDeckName("ROPV");
  addDeckName("RORFE");
  addDeckName("RORFF");
  addDeckName("RORFG");
  addDeckName("RORFR");
  addDeckName("RORFS");
  addDeckName("RORFW");
  addDeckName("RORFX");
  addDeckName("RORFY");
  addDeckName("RORME");
  addDeckName("RORMF");
  addDeckName("RORMG");
  addDeckName("RORMR");
  addDeckName("RORMS");
  addDeckName("RORMW");
  addDeckName("RORMX");
  addDeckName("RORMY");
  addDeckName("ROSAT");
  addDeckName("ROVIS");
  addDeckName("RPPC");
  addDeckName("RPPG");
  addDeckName("RPPO");
  addDeckName("RPPW");
  addDeckName("RPR");
  addDeckName("RPRGZ");
  addDeckName("RPRH");
  addDeckName("RPRP");
  addDeckName("RRPV");
  addDeckName("RRS");
  addDeckName("RRTM");
  addDeckName("RRV");
  addDeckName("RSFT");
  addDeckName("RSIP");
  addDeckName("RTADSFOA");
  addDeckName("RTADSUR");
  addDeckName("RTDCYFOA");
  addDeckName("RTFTTFOA");
  addDeckName("RTFTTSUR");
  addDeckName("RTIPT");
  addDeckName("RTIPTFOA");
  addDeckName("RTIPTHEA");
  addDeckName("RTIPTSUR");
  addDeckName("RTMOBFOA");
  addDeckName("RWDEN");
  addDeckName("RWIP");
  addDeckName("RWIR");
  addDeckName("RWIT");
  addDeckName("RWP");
  addDeckName("RWPR");
  addDeckName("RWPT");
  addDeckName("RWPV");
  addDeckName("RWSAT");
  addDeckName("RWVIS");
  setMatchRegex("R[OGW]?[IP][PRT]_.+|RU.+|RTIPF.+|RTIPS.+|RTFTF.+|RTFTS.+|RTFTT.+|RTIPT.+|RTIPF.+|RTIPS.+|RTIP[1-9][0-9]*.+|RTFTT.+|RTFTF.+|RTFTS.+|RTFT[1-9][0-9]*.+|RTADS.+|RTDCY.+");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string REGION_PROBE::keywordName = "REGION_PROBE";
const std::string REGION_PROBE::data::itemName = "data";


RESIDNUM::RESIDNUM( ) : ParserKeyword("RESIDNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("RESIDNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string RESIDNUM::keywordName = "RESIDNUM";
const std::string RESIDNUM::data::itemName = "data";


RESTART::RESTART( ) : ParserKeyword("RESTART")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("RESTART");
  {
     ParserRecord record;
     {
        ParserItem item("ROOTNAME", ParserItem::itype::STRING);
        item.setDefault( std::string("BASE") );
        record.addItem(item);
     }
     {
        ParserItem item("REPORTNUMBER", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("SAVEFILE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SAVEFILE_FORMAT", ParserItem::itype::STRING);
        item.setDefault( std::string("UNFORMATTED") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RESTART::keywordName = "RESTART";
const std::string RESTART::ROOTNAME::itemName = "ROOTNAME";
const std::string RESTART::ROOTNAME::defaultValue = "BASE";
const std::string RESTART::REPORTNUMBER::itemName = "REPORTNUMBER";
const std::string RESTART::SAVEFILE::itemName = "SAVEFILE";
const std::string RESTART::SAVEFILE_FORMAT::itemName = "SAVEFILE_FORMAT";
const std::string RESTART::SAVEFILE_FORMAT::defaultValue = "UNFORMATTED";


RESVNUM::RESVNUM( ) : ParserKeyword("RESVNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("RESVNUM");
  {
     ParserRecord record;
     {
        ParserItem item("NEXT_RES", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RESVNUM::keywordName = "RESVNUM";
const std::string RESVNUM::NEXT_RES::itemName = "NEXT_RES";


RHO::RHO( ) : ParserKeyword("RHO")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("RHO");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(0) );
        item.push_backDimension("Density");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string RHO::keywordName = "RHO";
const std::string RHO::data::itemName = "data";
const double RHO::data::defaultValue = 0.000000;


RIVDEBUG::RIVDEBUG( ) : ParserKeyword("RIVDEBUG")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("RIVDEBUG");
  {
     ParserRecord record;
     {
        ParserItem item("RIVER", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("DEBUG_CONTROL", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RIVDEBUG::keywordName = "RIVDEBUG";
const std::string RIVDEBUG::RIVER::itemName = "RIVER";
const std::string RIVDEBUG::DEBUG_CONTROL::itemName = "DEBUG_CONTROL";


RIVERSYS::RIVERSYS( ) : ParserKeyword("RIVERSYS")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("RIVERSYS");
  {
     ParserRecord record;
     {
        ParserItem item("RIVER", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("EQUATION", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("BRANCH_NR", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("BRANCH_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("DOWNSTREAM_BC", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RIVERSYS::keywordName = "RIVERSYS";
const std::string RIVERSYS::RIVER::itemName = "RIVER";
const std::string RIVERSYS::EQUATION::itemName = "EQUATION";
const std::string RIVERSYS::BRANCH_NR::itemName = "BRANCH_NR";
const std::string RIVERSYS::BRANCH_NAME::itemName = "BRANCH_NAME";
const std::string RIVERSYS::DOWNSTREAM_BC::itemName = "DOWNSTREAM_BC";


RIVRDIMS::RIVRDIMS( ) : ParserKeyword("RIVRDIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("RIVRDIMS");
  {
     ParserRecord record;
     {
        ParserItem item("MAX_RIVERS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_REACHES", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_BRANCHES", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_BLOCKS", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("MXTBPR", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("MXDPTB", ParserItem::itype::INT);
        item.setDefault( 2 );
        record.addItem(item);
     }
     {
        ParserItem item("MXTBGR", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NMDEPT", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MXDEPT", ParserItem::itype::INT);
        item.setDefault( 2 );
        record.addItem(item);
     }
     {
        ParserItem item("NMMAST", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MXMAST", ParserItem::itype::INT);
        item.setDefault( 2 );
        record.addItem(item);
     }
     {
        ParserItem item("NRATTA", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MXRATE", ParserItem::itype::INT);
        item.setDefault( 2 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RIVRDIMS::keywordName = "RIVRDIMS";
const std::string RIVRDIMS::MAX_RIVERS::itemName = "MAX_RIVERS";
const int RIVRDIMS::MAX_RIVERS::defaultValue = 0;
const std::string RIVRDIMS::MAX_REACHES::itemName = "MAX_REACHES";
const int RIVRDIMS::MAX_REACHES::defaultValue = 1;
const std::string RIVRDIMS::MAX_BRANCHES::itemName = "MAX_BRANCHES";
const int RIVRDIMS::MAX_BRANCHES::defaultValue = 1;
const std::string RIVRDIMS::MAX_BLOCKS::itemName = "MAX_BLOCKS";
const int RIVRDIMS::MAX_BLOCKS::defaultValue = 1;
const std::string RIVRDIMS::MXTBPR::itemName = "MXTBPR";
const int RIVRDIMS::MXTBPR::defaultValue = 1;
const std::string RIVRDIMS::MXDPTB::itemName = "MXDPTB";
const int RIVRDIMS::MXDPTB::defaultValue = 2;
const std::string RIVRDIMS::MXTBGR::itemName = "MXTBGR";
const int RIVRDIMS::MXTBGR::defaultValue = 1;
const std::string RIVRDIMS::NMDEPT::itemName = "NMDEPT";
const int RIVRDIMS::NMDEPT::defaultValue = 0;
const std::string RIVRDIMS::MXDEPT::itemName = "MXDEPT";
const int RIVRDIMS::MXDEPT::defaultValue = 2;
const std::string RIVRDIMS::NMMAST::itemName = "NMMAST";
const int RIVRDIMS::NMMAST::defaultValue = 0;
const std::string RIVRDIMS::MXMAST::itemName = "MXMAST";
const int RIVRDIMS::MXMAST::defaultValue = 2;
const std::string RIVRDIMS::NRATTA::itemName = "NRATTA";
const int RIVRDIMS::NRATTA::defaultValue = 0;
const std::string RIVRDIMS::MXRATE::itemName = "MXRATE";
const int RIVRDIMS::MXRATE::defaultValue = 2;


RIVRPROP::RIVRPROP( ) : ParserKeyword("RIVRPROP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("RIVRPROP");
  {
     ParserRecord record;
     {
        ParserItem item("RIVER", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("REACH1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("REACH2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("ROUGHNESS", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RIVRPROP::keywordName = "RIVRPROP";
const std::string RIVRPROP::RIVER::itemName = "RIVER";
const std::string RIVRPROP::REACH1::itemName = "REACH1";
const std::string RIVRPROP::REACH2::itemName = "REACH2";
const std::string RIVRPROP::ROUGHNESS::itemName = "ROUGHNESS";


RIVRXSEC::RIVRXSEC( ) : ParserKeyword("RIVRXSEC")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("RIVRDIMS","MXDPTB",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("RIVRXSEC");
  {
     ParserRecord record;
     {
        ParserItem item("DEPTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("WET_PERIMTER", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("AREA", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RIVRXSEC::keywordName = "RIVRXSEC";
const std::string RIVRXSEC::DEPTH::itemName = "DEPTH";
const std::string RIVRXSEC::WET_PERIMTER::itemName = "WET_PERIMTER";
const std::string RIVRXSEC::AREA::itemName = "AREA";


RIVSALT::RIVSALT( ) : ParserKeyword("RIVSALT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("RIVSALT");
  {
     ParserRecord record;
     {
        ParserItem item("RIVER", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SALINITY", ParserItem::itype::DOUBLE);
        item.push_backDimension("Mass/LiquidSurfaceVolume");
        record.addItem(item);
     }
     {
        ParserItem item("BRANCH", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("REACH", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RIVSALT::keywordName = "RIVSALT";
const std::string RIVSALT::RIVER::itemName = "RIVER";
const std::string RIVSALT::SALINITY::itemName = "SALINITY";
const std::string RIVSALT::BRANCH::itemName = "BRANCH";
const std::string RIVSALT::REACH::itemName = "REACH";


RIVTRACE::RIVTRACE( ) : ParserKeyword("RIVTRACE")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("RIVTRACE");
  {
     ParserRecord record;
     {
        ParserItem item("RIVER", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TRACER", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TC", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("TCUM", ParserItem::itype::DOUBLE);
        item.push_backDimension("1/LiquidSurfaceVolume");
        record.addItem(item);
     }
     {
        ParserItem item("BRANCH", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("REACH", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RIVTRACE::keywordName = "RIVTRACE";
const std::string RIVTRACE::RIVER::itemName = "RIVER";
const std::string RIVTRACE::TRACER::itemName = "TRACER";
const std::string RIVTRACE::TC::itemName = "TC";
const std::string RIVTRACE::TCUM::itemName = "TCUM";
const std::string RIVTRACE::BRANCH::itemName = "BRANCH";
const std::string RIVTRACE::REACH::itemName = "REACH";


RKTRMDIR::RKTRMDIR( ) : ParserKeyword("RKTRMDIR")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("RKTRMDIR");
}
const std::string RKTRMDIR::keywordName = "RKTRMDIR";


ROCK::ROCK( ) : ParserKeyword("ROCK")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ROCK");
  {
     ParserRecord record;
     {
        ParserItem item("PREF", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.013200) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("COMPRESSIBILITY", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("1/Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ROCK::keywordName = "ROCK";
const std::string ROCK::PREF::itemName = "PREF";
const double ROCK::PREF::defaultValue = 1.013200;
const std::string ROCK::COMPRESSIBILITY::itemName = "COMPRESSIBILITY";
const double ROCK::COMPRESSIBILITY::defaultValue = 0.000000;


ROCK2D::ROCK2D( ) : ParserKeyword("ROCK2D")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("ROCKCOMP","NTROCC",0);
  setTableCollection( true );
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ROCK2D");
  {
     ParserRecord record;
     {
        ParserItem item("PRESSURE", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("PVMULT", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ROCK2D::keywordName = "ROCK2D";
const std::string ROCK2D::PRESSURE::itemName = "PRESSURE";
const std::string ROCK2D::PVMULT::itemName = "PVMULT";


ROCK2DTR::ROCK2DTR( ) : ParserKeyword("ROCK2DTR")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("ROCKCOMP","NTROCC",0);
  setTableCollection( true );
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ROCK2DTR");
  {
     ParserRecord record;
     {
        ParserItem item("PRESSURE", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("TRANSMULT", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ROCK2DTR::keywordName = "ROCK2DTR";
const std::string ROCK2DTR::PRESSURE::itemName = "PRESSURE";
const std::string ROCK2DTR::TRANSMULT::itemName = "TRANSMULT";


ROCKCOMP::ROCKCOMP( ) : ParserKeyword("ROCKCOMP")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("ROCKCOMP");
  {
     ParserRecord record;
     {
        ParserItem item("HYSTERESIS", ParserItem::itype::STRING);
        item.setDefault( std::string("REVERS") );
        record.addItem(item);
     }
     {
        ParserItem item("NTROCC", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("WATER_COMPACTION", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ROCKCOMP::keywordName = "ROCKCOMP";
const std::string ROCKCOMP::HYSTERESIS::itemName = "HYSTERESIS";
const std::string ROCKCOMP::HYSTERESIS::defaultValue = "REVERS";
const std::string ROCKCOMP::NTROCC::itemName = "NTROCC";
const int ROCKCOMP::NTROCC::defaultValue = 1;
const std::string ROCKCOMP::WATER_COMPACTION::itemName = "WATER_COMPACTION";
const std::string ROCKCOMP::WATER_COMPACTION::defaultValue = "NO";


ROCKFRAC::ROCKFRAC( ) : ParserKeyword("ROCKFRAC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("ROCKFRAC");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string ROCKFRAC::keywordName = "ROCKFRAC";
const std::string ROCKFRAC::data::itemName = "data";


ROCKNUM::ROCKNUM( ) : ParserKeyword("ROCKNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("ROCKNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string ROCKNUM::keywordName = "ROCKNUM";
const std::string ROCKNUM::data::itemName = "data";


ROCKOPTS::ROCKOPTS( ) : ParserKeyword("ROCKOPTS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ROCKOPTS");
  {
     ParserRecord record;
     {
        ParserItem item("METHOD", ParserItem::itype::STRING);
        item.setDefault( std::string("PRESSURE") );
        record.addItem(item);
     }
     {
        ParserItem item("REF_PRESSURE", ParserItem::itype::STRING);
        item.setDefault( std::string("NOSTORE") );
        record.addItem(item);
     }
     {
        ParserItem item("TABLE_TYPE", ParserItem::itype::STRING);
        item.setDefault( std::string("PVTNUM") );
        record.addItem(item);
     }
     {
        ParserItem item("HYST_TYPE", ParserItem::itype::STRING);
        item.setDefault( std::string("DEFLATION") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ROCKOPTS::keywordName = "ROCKOPTS";
const std::string ROCKOPTS::METHOD::itemName = "METHOD";
const std::string ROCKOPTS::METHOD::defaultValue = "PRESSURE";
const std::string ROCKOPTS::REF_PRESSURE::itemName = "REF_PRESSURE";
const std::string ROCKOPTS::REF_PRESSURE::defaultValue = "NOSTORE";
const std::string ROCKOPTS::TABLE_TYPE::itemName = "TABLE_TYPE";
const std::string ROCKOPTS::TABLE_TYPE::defaultValue = "PVTNUM";
const std::string ROCKOPTS::HYST_TYPE::itemName = "HYST_TYPE";
const std::string ROCKOPTS::HYST_TYPE::defaultValue = "DEFLATION";


ROCKPAMA::ROCKPAMA( ) : ParserKeyword("ROCKPAMA")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ROCKPAMA");
  {
     ParserRecord record;
     {
        ParserItem item("K", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("M", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("G", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("B", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("E1", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("f", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.500000) );
        record.addItem(item);
     }
     {
        ParserItem item("n", ParserItem::itype::DOUBLE);
        item.setDefault( double(3.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("g", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("Bs", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("Es", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ROCKPAMA::keywordName = "ROCKPAMA";
const std::string ROCKPAMA::K::itemName = "K";
const std::string ROCKPAMA::M::itemName = "M";
const std::string ROCKPAMA::G::itemName = "G";
const double ROCKPAMA::G::defaultValue = 0.000000;
const std::string ROCKPAMA::B::itemName = "B";
const double ROCKPAMA::B::defaultValue = 0.000000;
const std::string ROCKPAMA::E1::itemName = "E1";
const double ROCKPAMA::E1::defaultValue = 0.000000;
const std::string ROCKPAMA::f::itemName = "f";
const double ROCKPAMA::f::defaultValue = 0.500000;
const std::string ROCKPAMA::n::itemName = "n";
const double ROCKPAMA::n::defaultValue = 3.000000;
const std::string ROCKPAMA::g::itemName = "g";
const double ROCKPAMA::g::defaultValue = 1.000000;
const std::string ROCKPAMA::Bs::itemName = "Bs";
const double ROCKPAMA::Bs::defaultValue = 0.000000;
const std::string ROCKPAMA::Es::itemName = "Es";
const double ROCKPAMA::Es::defaultValue = 0.000000;


ROCKTAB::ROCKTAB( ) : ParserKeyword("ROCKTAB")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("ROCKCOMP","NTROCC",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ROCKTAB");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ROCKTAB::keywordName = "ROCKTAB";
const std::string ROCKTAB::DATA::itemName = "DATA";


ROCKTABH::ROCKTABH( ) : ParserKeyword("ROCKTABH")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("ROCKCOMP","NTROCC",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ROCKTABH");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ROCKTABH::keywordName = "ROCKTABH";
const std::string ROCKTABH::DATA::itemName = "DATA";


ROCKTABW::ROCKTABW( ) : ParserKeyword("ROCKTABW")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("ROCKCOMP","NTROCC",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ROCKTABW");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ROCKTABW::keywordName = "ROCKTABW";
const std::string ROCKTABW::DATA::itemName = "DATA";


ROCKTHSG::ROCKTHSG( ) : ParserKeyword("ROCKTHSG")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("ROCKCOMP","NTROCC",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ROCKTHSG");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ROCKTHSG::keywordName = "ROCKTHSG";
const std::string ROCKTHSG::DATA::itemName = "DATA";


ROCKTSIG::ROCKTSIG( ) : ParserKeyword("ROCKTSIG")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("ROCKCOMP","NTROCC",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ROCKTSIG");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ROCKTSIG::keywordName = "ROCKTSIG";
const std::string ROCKTSIG::DATA::itemName = "DATA";


ROCKV::ROCKV( ) : ParserKeyword("ROCKV")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  clearDeckNames();
  addDeckName("ROCKV");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("ReservoirVolume");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string ROCKV::keywordName = "ROCKV";
const std::string ROCKV::data::itemName = "data";


ROCKWNOD::ROCKWNOD( ) : ParserKeyword("ROCKWNOD")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("ROCKCOMP","NTROCC",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ROCKWNOD");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ROCKWNOD::keywordName = "ROCKWNOD";
const std::string ROCKWNOD::DATA::itemName = "DATA";


RPTCPL::RPTCPL( ) : ParserKeyword("RPTCPL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("RPTCPL");
}
const std::string RPTCPL::keywordName = "RPTCPL";


RPTGRID::RPTGRID( ) : ParserKeyword("RPTGRID")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("RPTGRID");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RPTGRID::keywordName = "RPTGRID";
const std::string RPTGRID::DATA::itemName = "DATA";


RPTGRIDL::RPTGRIDL( ) : ParserKeyword("RPTGRIDL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("RPTGRIDL");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RPTGRIDL::keywordName = "RPTGRIDL";
const std::string RPTGRIDL::DATA::itemName = "DATA";


RPTHMD::RPTHMD( ) : ParserKeyword("RPTHMD")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("RPTHMD");
  {
     ParserRecord record;
     {
        ParserItem item("ITEM1", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM2", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM3", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM4", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM5", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM6", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RPTHMD::keywordName = "RPTHMD";
const std::string RPTHMD::ITEM1::itemName = "ITEM1";
const int RPTHMD::ITEM1::defaultValue = 0;
const std::string RPTHMD::ITEM2::itemName = "ITEM2";
const int RPTHMD::ITEM2::defaultValue = 0;
const std::string RPTHMD::ITEM3::itemName = "ITEM3";
const int RPTHMD::ITEM3::defaultValue = 0;
const std::string RPTHMD::ITEM4::itemName = "ITEM4";
const int RPTHMD::ITEM4::defaultValue = 0;
const std::string RPTHMD::ITEM5::itemName = "ITEM5";
const int RPTHMD::ITEM5::defaultValue = 0;
const std::string RPTHMD::ITEM6::itemName = "ITEM6";
const int RPTHMD::ITEM6::defaultValue = 0;


RPTHMG::RPTHMG( ) : ParserKeyword("RPTHMG")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("RPTHMG");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("INCLUDE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RPTHMG::keywordName = "RPTHMG";
const std::string RPTHMG::GROUP::itemName = "GROUP";
const std::string RPTHMG::INCLUDE::itemName = "INCLUDE";


RPTHMW::RPTHMW( ) : ParserKeyword("RPTHMW")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("RPTHMW");
  {
     ParserRecord record;
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("INCLUDE", ParserItem::itype::STRING);
        item.setDefault( std::string("ON") );
        record.addItem(item);
     }
     {
        ParserItem item("INCLUDE_RFT", ParserItem::itype::STRING);
        item.setDefault( std::string("OFF") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RPTHMW::keywordName = "RPTHMW";
const std::string RPTHMW::GROUP::itemName = "GROUP";
const std::string RPTHMW::INCLUDE::itemName = "INCLUDE";
const std::string RPTHMW::INCLUDE::defaultValue = "ON";
const std::string RPTHMW::INCLUDE_RFT::itemName = "INCLUDE_RFT";
const std::string RPTHMW::INCLUDE_RFT::defaultValue = "OFF";


RPTINIT::RPTINIT( ) : ParserKeyword("RPTINIT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("RPTINIT");
  {
     ParserRecord record;
     {
        ParserItem item("MNEMONICS_LIST", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RPTINIT::keywordName = "RPTINIT";
const std::string RPTINIT::MNEMONICS_LIST::itemName = "MNEMONICS_LIST";


RPTISOL::RPTISOL( ) : ParserKeyword("RPTISOL")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("RPTISOL");
}
const std::string RPTISOL::keywordName = "RPTISOL";


RPTONLY::RPTONLY( ) : ParserKeyword("RPTONLY")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SCHEDULE");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("RPTONLY");
}
const std::string RPTONLY::keywordName = "RPTONLY";


RPTONLYO::RPTONLYO( ) : ParserKeyword("RPTONLYO")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SCHEDULE");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("RPTONLYO");
}
const std::string RPTONLYO::keywordName = "RPTONLYO";


RPTPROPS::RPTPROPS( ) : ParserKeyword("RPTPROPS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("RPTPROPS");
  {
     ParserRecord record;
     {
        ParserItem item("mnemonics", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RPTPROPS::keywordName = "RPTPROPS";
const std::string RPTPROPS::mnemonics::itemName = "mnemonics";


RPTREGS::RPTREGS( ) : ParserKeyword("RPTREGS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("RPTREGS");
  {
     ParserRecord record;
     {
        ParserItem item("MNEMONIC_LIST", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RPTREGS::keywordName = "RPTREGS";
const std::string RPTREGS::MNEMONIC_LIST::itemName = "MNEMONIC_LIST";


RPTRST::RPTRST( ) : ParserKeyword("RPTRST")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("RPTRST");
  {
     ParserRecord record;
     {
        ParserItem item("MNEMONIC_LIST", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RPTRST::keywordName = "RPTRST";
const std::string RPTRST::MNEMONIC_LIST::itemName = "MNEMONIC_LIST";


RPTRUNSP::RPTRUNSP( ) : ParserKeyword("RPTRUNSP")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("RPTRUNSP");
}
const std::string RPTRUNSP::keywordName = "RPTRUNSP";


RPTSCHED::RPTSCHED( ) : ParserKeyword("RPTSCHED")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("RPTSCHED");
  {
     ParserRecord record;
     {
        ParserItem item("MNEMONIC_LIST", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RPTSCHED::keywordName = "RPTSCHED";
const std::string RPTSCHED::MNEMONIC_LIST::itemName = "MNEMONIC_LIST";


RPTSMRY::RPTSMRY( ) : ParserKeyword("RPTSMRY")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("RPTSMRY");
  {
     ParserRecord record;
     {
        ParserItem item("WRITE", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RPTSMRY::keywordName = "RPTSMRY";
const std::string RPTSMRY::WRITE::itemName = "WRITE";


RPTSOL::RPTSOL( ) : ParserKeyword("RPTSOL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("RPTSOL");
  {
     ParserRecord record;
     {
        ParserItem item("mnemonics", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RPTSOL::keywordName = "RPTSOL";
const std::string RPTSOL::mnemonics::itemName = "mnemonics";


RS::RS( ) : ParserKeyword("RS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("RS");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("GasDissolutionFactor");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string RS::keywordName = "RS";
const std::string RS::data::itemName = "data";


RSCONST::RSCONST( ) : ParserKeyword("RSCONST")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("RSCONST");
  {
     ParserRecord record;
     {
        ParserItem item("RS", ParserItem::itype::DOUBLE);
        item.push_backDimension("GasDissolutionFactor");
        record.addItem(item);
     }
     {
        ParserItem item("PB", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RSCONST::keywordName = "RSCONST";
const std::string RSCONST::RS::itemName = "RS";
const std::string RSCONST::PB::itemName = "PB";


RSCONSTT::RSCONSTT( ) : ParserKeyword("RSCONSTT")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("RSCONSTT");
  {
     ParserRecord record;
     {
        ParserItem item("RS_CONSTT", ParserItem::itype::DOUBLE);
        item.push_backDimension("GasDissolutionFactor");
        record.addItem(item);
     }
     {
        ParserItem item("PB_CONSTT", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RSCONSTT::keywordName = "RSCONSTT";
const std::string RSCONSTT::RS_CONSTT::itemName = "RS_CONSTT";
const std::string RSCONSTT::PB_CONSTT::itemName = "PB_CONSTT";


RSGI::RSGI( ) : ParserKeyword("RSGI")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("RSGI");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RSGI::keywordName = "RSGI";
const std::string RSGI::DATA::itemName = "DATA";


RSSPEC::RSSPEC( ) : ParserKeyword("RSSPEC")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("RSSPEC");
}
const std::string RSSPEC::keywordName = "RSSPEC";


RSVD::RSVD( ) : ParserKeyword("RSVD")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("EQLDIMS","NTEQUL",0);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("RSVD");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        item.push_backDimension("GasDissolutionFactor");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RSVD::keywordName = "RSVD";
const std::string RSVD::DATA::itemName = "DATA";


RTEMP::RTEMP( ) : ParserKeyword("RTEMP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("PROPS");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("RTEMP");
  {
     ParserRecord record;
     {
        ParserItem item("TEMP", ParserItem::itype::DOUBLE);
        item.setDefault( double(15.555000) );
        item.push_backDimension("Temperature");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RTEMP::keywordName = "RTEMP";
const std::string RTEMP::TEMP::itemName = "TEMP";
const double RTEMP::TEMP::defaultValue = 15.555000;


RTEMPA::RTEMPA( ) : ParserKeyword("RTEMPA")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("PROPS");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("RTEMPA");
  {
     ParserRecord record;
     {
        ParserItem item("TEMP", ParserItem::itype::DOUBLE);
        item.setDefault( double(15.555000) );
        item.push_backDimension("Temperature");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RTEMPA::keywordName = "RTEMPA";
const std::string RTEMPA::TEMP::itemName = "TEMP";
const double RTEMPA::TEMP::defaultValue = 15.555000;


RTEMPVD::RTEMPVD( ) : ParserKeyword("RTEMPVD")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("EQLDIMS","NTEQUL",0);
  addValidSectionName("PROPS");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("RTEMPVD");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        item.push_backDimension("Temperature");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RTEMPVD::keywordName = "RTEMPVD";
const std::string RTEMPVD::DATA::itemName = "DATA";


RUNSPEC::RUNSPEC( ) : ParserKeyword("RUNSPEC")
{
  setFixedSize( (size_t) 0);
  clearDeckNames();
  addDeckName("RUNSPEC");
}
const std::string RUNSPEC::keywordName = "RUNSPEC";


RUNSUM::RUNSUM( ) : ParserKeyword("RUNSUM")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("RUNSUM");
}
const std::string RUNSUM::keywordName = "RUNSUM";


RV::RV( ) : ParserKeyword("RV")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("RV");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("OilDissolutionFactor");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string RV::keywordName = "RV";
const std::string RV::data::itemName = "data";


RVCONST::RVCONST( ) : ParserKeyword("RVCONST")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("RVCONST");
  {
     ParserRecord record;
     {
        ParserItem item("RV", ParserItem::itype::DOUBLE);
        item.push_backDimension("OilDissolutionFactor");
        record.addItem(item);
     }
     {
        ParserItem item("DEWP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RVCONST::keywordName = "RVCONST";
const std::string RVCONST::RV::itemName = "RV";
const std::string RVCONST::DEWP::itemName = "DEWP";


RVCONSTT::RVCONSTT( ) : ParserKeyword("RVCONSTT")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("RVCONSTT");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("OilDissolutionFactor");
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RVCONSTT::keywordName = "RVCONSTT";
const std::string RVCONSTT::DATA::itemName = "DATA";


RVGI::RVGI( ) : ParserKeyword("RVGI")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("RVGI");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RVGI::keywordName = "RVGI";
const std::string RVGI::DATA::itemName = "DATA";


RVVD::RVVD( ) : ParserKeyword("RVVD")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("EQLDIMS","NTEQUL",0);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("RVVD");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        item.push_backDimension("OilDissolutionFactor");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string RVVD::keywordName = "RVVD";
const std::string RVVD::DATA::itemName = "DATA";


SALT::SALT( ) : ParserKeyword("SALT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("SALT");
  {
     ParserRecord record;
     {
        ParserItem item("SALT_CONCENTRATION", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Mass/Length*Length*Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SALT::keywordName = "SALT";
const std::string SALT::SALT_CONCENTRATION::itemName = "SALT_CONCENTRATION";


SALTNODE::SALTNODE( ) : ParserKeyword("SALTNODE")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SALTNODE");
  {
     ParserRecord record;
     {
        ParserItem item("SALT_CONCENTRATION", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Mass/Length*Length*Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SALTNODE::keywordName = "SALTNODE";
const std::string SALTNODE::SALT_CONCENTRATION::itemName = "SALT_CONCENTRATION";


SALTREST::SALTREST( ) : ParserKeyword("SALTREST")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("SALTREST");
  {
     ParserRecord record;
     {
        ParserItem item("SALT_CONCENTRATION", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Mass/Length*Length*Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SALTREST::keywordName = "SALTREST";
const std::string SALTREST::SALT_CONCENTRATION::itemName = "SALT_CONCENTRATION";


SALTVD::SALTVD( ) : ParserKeyword("SALTVD")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("EQLDIMS","NTEQUL",0);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("SALTVD");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SALTVD::keywordName = "SALTVD";
const std::string SALTVD::DATA::itemName = "DATA";


SATNUM::SATNUM( ) : ParserKeyword("SATNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("SATNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SATNUM::keywordName = "SATNUM";
const std::string SATNUM::data::itemName = "data";


SATOPTS::SATOPTS( ) : ParserKeyword("SATOPTS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("SATOPTS");
  {
     ParserRecord record;
     {
        ParserItem item("options", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SATOPTS::keywordName = "SATOPTS";
const std::string SATOPTS::options::itemName = "options";


SAVE::SAVE( ) : ParserKeyword("SAVE")
{
  setSizeType(UNKNOWN);
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("SAVE");
  {
     ParserRecord record;
     {
        ParserItem item("FILE_TYPE", ParserItem::itype::STRING);
        item.setDefault( std::string("UNFORMATTED") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SAVE::keywordName = "SAVE";
const std::string SAVE::FILE_TYPE::itemName = "FILE_TYPE";
const std::string SAVE::FILE_TYPE::defaultValue = "UNFORMATTED";


SCALECRS::SCALECRS( ) : ParserKeyword("SCALECRS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SCALECRS");
  {
     ParserRecord record;
     {
        ParserItem item("VALUE", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SCALECRS::keywordName = "SCALECRS";
const std::string SCALECRS::VALUE::itemName = "VALUE";
const std::string SCALECRS::VALUE::defaultValue = "NO";


SCALELIM::SCALELIM( ) : ParserKeyword("SCALELIM")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("ENDSCALE","NTENDP",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SCALELIM");
  {
     ParserRecord record;
     {
        ParserItem item("SAT_LIMIT", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SCALELIM::keywordName = "SCALELIM";
const std::string SCALELIM::SAT_LIMIT::itemName = "SAT_LIMIT";
const double SCALELIM::SAT_LIMIT::defaultValue = 0.000000;


SCDATAB::SCDATAB( ) : ParserKeyword("SCDATAB")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("SCDPDIMS","NTSCDA",0);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("SCDATAB");
  {
     ParserRecord record;
     {
        ParserItem item("SCALE_DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(0) );
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SCDATAB::keywordName = "SCDATAB";
const std::string SCDATAB::SCALE_DATA::itemName = "SCALE_DATA";
const double SCDATAB::SCALE_DATA::defaultValue = 0.000000;


SCDETAB::SCDETAB( ) : ParserKeyword("SCDETAB")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("SCDPDIMS","NTSCDE",0);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("SCDETAB");
  {
     ParserRecord record;
     {
        ParserItem item("SCALE_DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(0) );
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SCDETAB::keywordName = "SCDETAB";
const std::string SCDETAB::SCALE_DATA::itemName = "SCALE_DATA";
const double SCDETAB::SCALE_DATA::defaultValue = 0.000000;


SCDPTAB::SCDPTAB( ) : ParserKeyword("SCDPTAB")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("SCDPDIMS","NTSCDP",0);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("SCDPTAB");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SCDPTAB::keywordName = "SCDPTAB";
const std::string SCDPTAB::DATA::itemName = "DATA";


SCDPTRAC::SCDPTRAC( ) : ParserKeyword("SCDPTRAC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("SCDPTRAC");
  {
     ParserRecord record;
     {
        ParserItem item("TRACER", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SCDPTRAC::keywordName = "SCDPTRAC";
const std::string SCDPTRAC::TRACER::itemName = "TRACER";


SCHEDULE::SCHEDULE( ) : ParserKeyword("SCHEDULE")
{
  setFixedSize( (size_t) 0);
  clearDeckNames();
  addDeckName("SCHEDULE");
}
const std::string SCHEDULE::keywordName = "SCHEDULE";


SCPDIMS::SCPDIMS( ) : ParserKeyword("SCPDIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("SCPDIMS");
  {
     ParserRecord record;
     {
        ParserItem item("NTSCDP", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("NPSCDP", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("NTSCDA", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("PSCDA", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("UNUSED1", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("UNUSED2", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("NTSCDE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SCPDIMS::keywordName = "SCPDIMS";
const std::string SCPDIMS::NTSCDP::itemName = "NTSCDP";
const int SCPDIMS::NTSCDP::defaultValue = 0;
const std::string SCPDIMS::NPSCDP::itemName = "NPSCDP";
const int SCPDIMS::NPSCDP::defaultValue = 0;
const std::string SCPDIMS::NTSCDA::itemName = "NTSCDA";
const int SCPDIMS::NTSCDA::defaultValue = 0;
const std::string SCPDIMS::PSCDA::itemName = "PSCDA";
const int SCPDIMS::PSCDA::defaultValue = 0;
const std::string SCPDIMS::UNUSED1::itemName = "UNUSED1";
const int SCPDIMS::UNUSED1::defaultValue = 0;
const std::string SCPDIMS::UNUSED2::itemName = "UNUSED2";
const int SCPDIMS::UNUSED2::defaultValue = 0;
const std::string SCPDIMS::NTSCDE::itemName = "NTSCDE";
const int SCPDIMS::NTSCDE::defaultValue = 0;


SCVD::SCVD( ) : ParserKeyword("SCVD")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("EQLDIMS","NTEQUL",0);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("SCVD");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SCVD::keywordName = "SCVD";
const std::string SCVD::DATA::itemName = "DATA";


SDENSITY::SDENSITY( ) : ParserKeyword("SDENSITY")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SDENSITY");
  {
     ParserRecord record;
     {
        ParserItem item("SOLVENT_DENSITY", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("Density");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SDENSITY::keywordName = "SDENSITY";
const std::string SDENSITY::SOLVENT_DENSITY::itemName = "SOLVENT_DENSITY";
const double SDENSITY::SOLVENT_DENSITY::defaultValue = 1.000000;


SEGMENT_PROBE::SEGMENT_PROBE( ) : ParserKeyword("SEGMENT_PROBE")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("SGFR");
  addDeckName("SOFR");
  addDeckName("SPR");
  addDeckName("SWFR");
  {
     ParserRecord record;
     {
        ParserItem item("Well", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("Segment", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SEGMENT_PROBE::keywordName = "SEGMENT_PROBE";
const std::string SEGMENT_PROBE::Well::itemName = "Well";
const std::string SEGMENT_PROBE::Segment::itemName = "Segment";


SEPARATE::SEPARATE( ) : ParserKeyword("SEPARATE")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("SEPARATE");
}
const std::string SEPARATE::keywordName = "SEPARATE";


SEPVALS::SEPVALS( ) : ParserKeyword("SEPVALS")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("SEPVALS");
  {
     ParserRecord record;
     {
        ParserItem item("SEPARATOR", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("BO", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("RS", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SEPVALS::keywordName = "SEPVALS";
const std::string SEPVALS::SEPARATOR::itemName = "SEPARATOR";
const std::string SEPVALS::BO::itemName = "BO";
const std::string SEPVALS::RS::itemName = "RS";


SFOAM::SFOAM( ) : ParserKeyword("SFOAM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("SFOAM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Mass/Length*Length*Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SFOAM::keywordName = "SFOAM";
const std::string SFOAM::data::itemName = "data";


SGAS::SGAS( ) : ParserKeyword("SGAS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("SGAS");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SGAS::keywordName = "SGAS";
const std::string SGAS::data::itemName = "data";


SGCR::SGCR( ) : ParserKeyword("SGCR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SGCR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SGCR::keywordName = "SGCR";
const std::string SGCR::data::itemName = "data";


SGCWMIS::SGCWMIS( ) : ParserKeyword("SGCWMIS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("MISCIBLE","NTMISC",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SGCWMIS");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SGCWMIS::keywordName = "SGCWMIS";
const std::string SGCWMIS::DATA::itemName = "DATA";


SGF32D::SGF32D( ) : ParserKeyword("SGF32D")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SGF32D");
  {
     ParserRecord record;
     {
        ParserItem item("SOIL", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("SWAT", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("KRG", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SGF32D::keywordName = "SGF32D";
const std::string SGF32D::SOIL::itemName = "SOIL";
const std::string SGF32D::SWAT::itemName = "SWAT";
const std::string SGF32D::KRG::itemName = "KRG";


SGFN::SGFN( ) : ParserKeyword("SGFN")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SGFN");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SGFN::keywordName = "SGFN";
const std::string SGFN::DATA::itemName = "DATA";


SGL::SGL( ) : ParserKeyword("SGL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SGL");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SGL::keywordName = "SGL";
const std::string SGL::data::itemName = "data";


SGLPC::SGLPC( ) : ParserKeyword("SGLPC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SGLPC");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SGLPC::keywordName = "SGLPC";
const std::string SGLPC::data::itemName = "data";


SGOF::SGOF( ) : ParserKeyword("SGOF")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SGOF");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SGOF::keywordName = "SGOF";
const std::string SGOF::DATA::itemName = "DATA";


SGU::SGU( ) : ParserKeyword("SGU")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SGU");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SGU::keywordName = "SGU";
const std::string SGU::data::itemName = "data";


SGWFN::SGWFN( ) : ParserKeyword("SGWFN")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SGWFN");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SGWFN::keywordName = "SGWFN";
const std::string SGWFN::DATA::itemName = "DATA";


SHRATE::SHRATE( ) : ParserKeyword("SHRATE")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SHRATE");
  {
     ParserRecord record;
     {
        ParserItem item("SHEAR_RATE", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SHRATE::keywordName = "SHRATE";
const std::string SHRATE::SHEAR_RATE::itemName = "SHEAR_RATE";


SIGMA::SIGMA( ) : ParserKeyword("SIGMA")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("SIGMA");
  {
     ParserRecord record;
     {
        ParserItem item("COUPLING", ParserItem::itype::DOUBLE);
        item.push_backDimension("1/Length*Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SIGMA::keywordName = "SIGMA";
const std::string SIGMA::COUPLING::itemName = "COUPLING";


SIGMAGD::SIGMAGD( ) : ParserKeyword("SIGMAGD")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("SIGMAGD");
  {
     ParserRecord record;
     {
        ParserItem item("COUPLING", ParserItem::itype::DOUBLE);
        item.push_backDimension("1/Length*Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SIGMAGD::keywordName = "SIGMAGD";
const std::string SIGMAGD::COUPLING::itemName = "COUPLING";


SIGMAGDV::SIGMAGDV( ) : ParserKeyword("SIGMAGDV")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("SIGMAGDV");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SIGMAGDV::keywordName = "SIGMAGDV";
const std::string SIGMAGDV::data::itemName = "data";


SIGMATH::SIGMATH( ) : ParserKeyword("SIGMATH")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("SIGMATH");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SIGMATH::keywordName = "SIGMATH";
const std::string SIGMATH::data::itemName = "data";


SIGMAV::SIGMAV( ) : ParserKeyword("SIGMAV")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("SIGMAV");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SIGMAV::keywordName = "SIGMAV";
const std::string SIGMAV::data::itemName = "data";


SIMULATE::SIMULATE( ) : ParserKeyword("SIMULATE")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("SIMULATE");
}
const std::string SIMULATE::keywordName = "SIMULATE";


SKIP::SKIP( ) : ParserKeyword("SKIP")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("SKIP");
}
const std::string SKIP::keywordName = "SKIP";


SKIP100::SKIP100( ) : ParserKeyword("SKIP100")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("SKIP100");
}
const std::string SKIP100::keywordName = "SKIP100";


SKIP300::SKIP300( ) : ParserKeyword("SKIP300")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("SKIP300");
}
const std::string SKIP300::keywordName = "SKIP300";


SKIPREST::SKIPREST( ) : ParserKeyword("SKIPREST")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("SKIPREST");
}
const std::string SKIPREST::keywordName = "SKIPREST";


SKPRPOLY::SKPRPOLY( ) : ParserKeyword("SKPRPOLY")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SKPRPOLY");
  {
     ParserRecord record;
     {
        ParserItem item("TABLE_NUMBER", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("POLYMERCONCENTRATION", ParserItem::itype::DOUBLE);
        item.push_backDimension("PolymerDensity");
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("THROUGHPUT", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("VELOCITY", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length/Time");
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("SKINPRESSURE", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SKPRPOLY::keywordName = "SKPRPOLY";
const std::string SKPRPOLY::TABLE_NUMBER::itemName = "TABLE_NUMBER";
const std::string SKPRPOLY::POLYMERCONCENTRATION::itemName = "POLYMERCONCENTRATION";
const std::string SKPRPOLY::THROUGHPUT::itemName = "THROUGHPUT";
const std::string SKPRPOLY::VELOCITY::itemName = "VELOCITY";
const std::string SKPRPOLY::SKINPRESSURE::itemName = "SKINPRESSURE";


SKPRWAT::SKPRWAT( ) : ParserKeyword("SKPRWAT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SKPRWAT");
  {
     ParserRecord record;
     {
        ParserItem item("TABLE_NUMBER", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("THROUGHPUT", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("VELOCITY", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length/Time");
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("SKINPRESSURE", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SKPRWAT::keywordName = "SKPRWAT";
const std::string SKPRWAT::TABLE_NUMBER::itemName = "TABLE_NUMBER";
const std::string SKPRWAT::THROUGHPUT::itemName = "THROUGHPUT";
const std::string SKPRWAT::VELOCITY::itemName = "VELOCITY";
const std::string SKPRWAT::SKINPRESSURE::itemName = "SKINPRESSURE";


SKRO::SKRO( ) : ParserKeyword("SKRO")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SKRO");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SKRO::keywordName = "SKRO";
const std::string SKRO::data::itemName = "data";


SKRORG::SKRORG( ) : ParserKeyword("SKRORG")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SKRORG");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SKRORG::keywordName = "SKRORG";
const std::string SKRORG::data::itemName = "data";


SKRORW::SKRORW( ) : ParserKeyword("SKRORW")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SKRORW");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SKRORW::keywordName = "SKRORW";
const std::string SKRORW::data::itemName = "data";


SKRW::SKRW( ) : ParserKeyword("SKRW")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SKRW");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SKRW::keywordName = "SKRW";
const std::string SKRW::data::itemName = "data";


SKRWR::SKRWR( ) : ParserKeyword("SKRWR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SKRWR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SKRWR::keywordName = "SKRWR";
const std::string SKRWR::data::itemName = "data";


SLAVES::SLAVES( ) : ParserKeyword("SLAVES")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("SLAVES");
  {
     ParserRecord record;
     {
        ParserItem item("SLAVE_RESERVOIR", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SLAVE_ECLBASE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("HOST_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("DIRECTORY", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("NUM_PE", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SLAVES::keywordName = "SLAVES";
const std::string SLAVES::SLAVE_RESERVOIR::itemName = "SLAVE_RESERVOIR";
const std::string SLAVES::SLAVE_ECLBASE::itemName = "SLAVE_ECLBASE";
const std::string SLAVES::HOST_NAME::itemName = "HOST_NAME";
const std::string SLAVES::DIRECTORY::itemName = "DIRECTORY";
const std::string SLAVES::NUM_PE::itemName = "NUM_PE";
const int SLAVES::NUM_PE::defaultValue = 1;


SLGOF::SLGOF( ) : ParserKeyword("SLGOF")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SLGOF");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SLGOF::keywordName = "SLGOF";
const std::string SLGOF::DATA::itemName = "DATA";


SMRYDIMS::SMRYDIMS( ) : ParserKeyword("SMRYDIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("SMRYDIMS");
  {
     ParserRecord record;
     {
        ParserItem item("DIMS", ParserItem::itype::INT);
        item.setDefault( 10000 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SMRYDIMS::keywordName = "SMRYDIMS";
const std::string SMRYDIMS::DIMS::itemName = "DIMS";
const int SMRYDIMS::DIMS::defaultValue = 10000;


SMULTX::SMULTX( ) : ParserKeyword("SMULTX")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("SMULTX");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SMULTX::keywordName = "SMULTX";
const std::string SMULTX::data::itemName = "data";


SMULTY::SMULTY( ) : ParserKeyword("SMULTY")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("SMULTY");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SMULTY::keywordName = "SMULTY";
const std::string SMULTY::data::itemName = "data";


SMULTZ::SMULTZ( ) : ParserKeyword("SMULTZ")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("SMULTZ");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SMULTZ::keywordName = "SMULTZ";
const std::string SMULTZ::data::itemName = "data";


SOCRS::SOCRS( ) : ParserKeyword("SOCRS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SOCRS");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SOCRS::keywordName = "SOCRS";
const std::string SOCRS::data::itemName = "data";


SOF2::SOF2( ) : ParserKeyword("SOF2")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SOF2");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SOF2::keywordName = "SOF2";
const std::string SOF2::DATA::itemName = "DATA";


SOF3::SOF3( ) : ParserKeyword("SOF3")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SOF3");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SOF3::keywordName = "SOF3";
const std::string SOF3::DATA::itemName = "DATA";


SOF32D::SOF32D( ) : ParserKeyword("SOF32D")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SOF32D");
  {
     ParserRecord record;
     {
        ParserItem item("SWAT", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("SGAS", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("KRO", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SOF32D::keywordName = "SOF32D";
const std::string SOF32D::SWAT::itemName = "SWAT";
const std::string SOF32D::SGAS::itemName = "SGAS";
const std::string SOF32D::KRO::itemName = "KRO";


SOGCR::SOGCR( ) : ParserKeyword("SOGCR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SOGCR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SOGCR::keywordName = "SOGCR";
const std::string SOGCR::data::itemName = "data";


SOIL::SOIL( ) : ParserKeyword("SOIL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("SOIL");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SOIL::keywordName = "SOIL";
const std::string SOIL::data::itemName = "data";


SOLUTION::SOLUTION( ) : ParserKeyword("SOLUTION")
{
  setFixedSize( (size_t) 0);
  clearDeckNames();
  addDeckName("SOLUTION");
}
const std::string SOLUTION::keywordName = "SOLUTION";


SOLVCONC::SOLVCONC( ) : ParserKeyword("SOLVCONC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("SOLVCONC");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("GasSurfaceVolume/Length*Length*Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SOLVCONC::keywordName = "SOLVCONC";
const std::string SOLVCONC::data::itemName = "data";


SOLVDIMS::SOLVDIMS( ) : ParserKeyword("SOLVDIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("SOLVDIMS");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SOLVDIMS::keywordName = "SOLVDIMS";
const std::string SOLVDIMS::data::itemName = "data";


SOLVDIRS::SOLVDIRS( ) : ParserKeyword("SOLVDIRS")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("SOLVDIRS");
  {
     ParserRecord record;
     {
        ParserItem item("DIRECTION", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SOLVDIRS::keywordName = "SOLVDIRS";
const std::string SOLVDIRS::DIRECTION::itemName = "DIRECTION";


SOLVENT::SOLVENT( ) : ParserKeyword("SOLVENT")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("SOLVENT");
}
const std::string SOLVENT::keywordName = "SOLVENT";


SOLVFRAC::SOLVFRAC( ) : ParserKeyword("SOLVFRAC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("SOLVFRAC");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SOLVFRAC::keywordName = "SOLVFRAC";
const std::string SOLVFRAC::data::itemName = "data";


SOLVNUM::SOLVNUM( ) : ParserKeyword("SOLVNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("SOLVNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SOLVNUM::keywordName = "SOLVNUM";
const std::string SOLVNUM::data::itemName = "data";


SOMGAS::SOMGAS( ) : ParserKeyword("SOMGAS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SOMGAS");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SOMGAS::keywordName = "SOMGAS";
const std::string SOMGAS::DATA::itemName = "DATA";


SOMWAT::SOMWAT( ) : ParserKeyword("SOMWAT")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SOMWAT");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SOMWAT::keywordName = "SOMWAT";
const std::string SOMWAT::DATA::itemName = "DATA";


SORWMIS::SORWMIS( ) : ParserKeyword("SORWMIS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("MISCIBLE","NTMISC",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SORWMIS");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SORWMIS::keywordName = "SORWMIS";
const std::string SORWMIS::DATA::itemName = "DATA";


SOWCR::SOWCR( ) : ParserKeyword("SOWCR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SOWCR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SOWCR::keywordName = "SOWCR";
const std::string SOWCR::data::itemName = "data";


SPECGRID::SPECGRID( ) : ParserKeyword("SPECGRID")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("SPECGRID");
  {
     ParserRecord record;
     {
        ParserItem item("NX", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NY", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NZ", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NUMRES", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("COORD_TYPE", ParserItem::itype::STRING);
        item.setDefault( std::string("F") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SPECGRID::keywordName = "SPECGRID";
const std::string SPECGRID::NX::itemName = "NX";
const int SPECGRID::NX::defaultValue = 1;
const std::string SPECGRID::NY::itemName = "NY";
const int SPECGRID::NY::defaultValue = 1;
const std::string SPECGRID::NZ::itemName = "NZ";
const int SPECGRID::NZ::defaultValue = 1;
const std::string SPECGRID::NUMRES::itemName = "NUMRES";
const int SPECGRID::NUMRES::defaultValue = 1;
const std::string SPECGRID::COORD_TYPE::itemName = "COORD_TYPE";
const std::string SPECGRID::COORD_TYPE::defaultValue = "F";


SPECHEAT::SPECHEAT( ) : ParserKeyword("SPECHEAT")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SPECHEAT");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Temperature");
        item.push_backDimension("Energy/Mass*AbsoluteTemperature");
        item.push_backDimension("Energy/Mass*AbsoluteTemperature");
        item.push_backDimension("Energy/Mass*AbsoluteTemperature");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SPECHEAT::keywordName = "SPECHEAT";
const std::string SPECHEAT::DATA::itemName = "DATA";


SPECROCK::SPECROCK( ) : ParserKeyword("SPECROCK")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SPECROCK");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Temperature");
        item.push_backDimension("Energy/Length*Length*Length*AbsoluteTemperature");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SPECROCK::keywordName = "SPECROCK";
const std::string SPECROCK::DATA::itemName = "DATA";


SPOLY::SPOLY( ) : ParserKeyword("SPOLY")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  addValidSectionName("SPECIAL");
  clearDeckNames();
  addDeckName("SPOLY");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Density");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SPOLY::keywordName = "SPOLY";
const std::string SPOLY::data::itemName = "data";


SPOLYMW::SPOLYMW( ) : ParserKeyword("SPOLYMW")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("SPOLYMW");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SPOLYMW::keywordName = "SPOLYMW";
const std::string SPOLYMW::data::itemName = "data";


SSFN::SSFN( ) : ParserKeyword("SSFN")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SSFN");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SSFN::keywordName = "SSFN";
const std::string SSFN::DATA::itemName = "DATA";


SSGCR::SSGCR( ) : ParserKeyword("SSGCR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SSGCR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SSGCR::keywordName = "SSGCR";
const std::string SSGCR::data::itemName = "data";


SSGL::SSGL( ) : ParserKeyword("SSGL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SSGL");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SSGL::keywordName = "SSGL";
const std::string SSGL::data::itemName = "data";


SSOGCR::SSOGCR( ) : ParserKeyword("SSOGCR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SSOGCR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SSOGCR::keywordName = "SSOGCR";
const std::string SSOGCR::data::itemName = "data";


SSOL::SSOL( ) : ParserKeyword("SSOL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("SSOL");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SSOL::keywordName = "SSOL";
const std::string SSOL::data::itemName = "data";


SSOWCR::SSOWCR( ) : ParserKeyword("SSOWCR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SSOWCR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SSOWCR::keywordName = "SSOWCR";
const std::string SSOWCR::data::itemName = "data";


SSWL::SSWL( ) : ParserKeyword("SSWL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SSWL");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SSWL::keywordName = "SSWL";
const std::string SSWL::data::itemName = "data";


SSWU::SSWU( ) : ParserKeyword("SSWU")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SSWU");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SSWU::keywordName = "SSWU";
const std::string SSWU::data::itemName = "data";


START::START( ) : ParserKeyword("START")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("START");
  {
     ParserRecord record;
     {
        ParserItem item("DAY", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("MONTH", ParserItem::itype::STRING);
        item.setDefault( std::string("JAN") );
        record.addItem(item);
     }
     {
        ParserItem item("YEAR", ParserItem::itype::INT);
        item.setDefault( 1983 );
        record.addItem(item);
     }
     {
        ParserItem item("TIME", ParserItem::itype::STRING);
        item.setDefault( std::string("00:00:00.000") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string START::keywordName = "START";
const std::string START::DAY::itemName = "DAY";
const int START::DAY::defaultValue = 1;
const std::string START::MONTH::itemName = "MONTH";
const std::string START::MONTH::defaultValue = "JAN";
const std::string START::YEAR::itemName = "YEAR";
const int START::YEAR::defaultValue = 1983;
const std::string START::TIME::itemName = "TIME";
const std::string START::TIME::defaultValue = "00:00:00.000";


STCOND::STCOND( ) : ParserKeyword("STCOND")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("STCOND");
  {
     ParserRecord record;
     {
        ParserItem item("TEMPERATURE", ParserItem::itype::DOUBLE);
        item.setDefault( double(15.560000) );
        item.push_backDimension("Temperature");
        record.addItem(item);
     }
     {
        ParserItem item("PRESSURE", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.013250) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string STCOND::keywordName = "STCOND";
const std::string STCOND::TEMPERATURE::itemName = "TEMPERATURE";
const double STCOND::TEMPERATURE::defaultValue = 15.560000;
const std::string STCOND::PRESSURE::itemName = "PRESSURE";
const double STCOND::PRESSURE::defaultValue = 1.013250;


STONE::STONE( ) : ParserKeyword("STONE")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("STONE");
}
const std::string STONE::keywordName = "STONE";


STONE1::STONE1( ) : ParserKeyword("STONE1")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("STONE1");
}
const std::string STONE1::keywordName = "STONE1";


STONE1EX::STONE1EX( ) : ParserKeyword("STONE1EX")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("STONE1EX");
  {
     ParserRecord record;
     {
        ParserItem item("EXP_VALUE", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string STONE1EX::keywordName = "STONE1EX";
const std::string STONE1EX::EXP_VALUE::itemName = "EXP_VALUE";
const double STONE1EX::EXP_VALUE::defaultValue = 1.000000;


STONE2::STONE2( ) : ParserKeyword("STONE2")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("STONE2");
}
const std::string STONE2::keywordName = "STONE2";


SUMMARY::SUMMARY( ) : ParserKeyword("SUMMARY")
{
  setFixedSize( (size_t) 0);
  clearDeckNames();
  addDeckName("SUMMARY");
}
const std::string SUMMARY::keywordName = "SUMMARY";


SUMTHIN::SUMTHIN( ) : ParserKeyword("SUMTHIN")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("SUMTHIN");
  {
     ParserRecord record;
     {
        ParserItem item("TIME", ParserItem::itype::DOUBLE);
        item.push_backDimension("Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SUMTHIN::keywordName = "SUMTHIN";
const std::string SUMTHIN::TIME::itemName = "TIME";


SURF::SURF( ) : ParserKeyword("SURF")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("SURF");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Mass/ReservoirVolume");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SURF::keywordName = "SURF";
const std::string SURF::data::itemName = "data";


SURFACT::SURFACT( ) : ParserKeyword("SURFACT")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("SURFACT");
}
const std::string SURFACT::keywordName = "SURFACT";


SURFACTW::SURFACTW( ) : ParserKeyword("SURFACTW")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("SURFACTW");
}
const std::string SURFACTW::keywordName = "SURFACTW";


SURFADDW::SURFADDW( ) : ParserKeyword("SURFADDW")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SURFADDW");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SURFADDW::keywordName = "SURFADDW";
const std::string SURFADDW::DATA::itemName = "DATA";


SURFADS::SURFADS( ) : ParserKeyword("SURFADS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SURFADS");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SURFADS::keywordName = "SURFADS";
const std::string SURFADS::DATA::itemName = "DATA";


SURFESAL::SURFESAL( ) : ParserKeyword("SURFESAL")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SURFESAL");
  {
     ParserRecord record;
     {
        ParserItem item("COEFF", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SURFESAL::keywordName = "SURFESAL";
const std::string SURFESAL::COEFF::itemName = "COEFF";


SURFNUM::SURFNUM( ) : ParserKeyword("SURFNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("SURFNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SURFNUM::keywordName = "SURFNUM";
const std::string SURFNUM::data::itemName = "data";


SURFOPTS::SURFOPTS( ) : ParserKeyword("SURFOPTS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SURFOPTS");
  {
     ParserRecord record;
     {
        ParserItem item("MIN_SWAT", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-06) );
        record.addItem(item);
     }
     {
        ParserItem item("SMOOTHING", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-06) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SURFOPTS::keywordName = "SURFOPTS";
const std::string SURFOPTS::MIN_SWAT::itemName = "MIN_SWAT";
const double SURFOPTS::MIN_SWAT::defaultValue = 0.000001;
const std::string SURFOPTS::SMOOTHING::itemName = "SMOOTHING";
const double SURFOPTS::SMOOTHING::defaultValue = 0.000001;


SURFROCK::SURFROCK( ) : ParserKeyword("SURFROCK")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SURFROCK");
  {
     ParserRecord record;
     {
        ParserItem item("INDEX", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("MASS_DENSITY", ParserItem::itype::DOUBLE);
        item.push_backDimension("Mass/ReservoirVolume");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SURFROCK::keywordName = "SURFROCK";
const std::string SURFROCK::INDEX::itemName = "INDEX";
const std::string SURFROCK::MASS_DENSITY::itemName = "MASS_DENSITY";


SURFST::SURFST( ) : ParserKeyword("SURFST")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SURFST");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SURFST::keywordName = "SURFST";
const std::string SURFST::DATA::itemName = "DATA";


SURFSTES::SURFSTES( ) : ParserKeyword("SURFSTES")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SURFSTES");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SURFSTES::keywordName = "SURFSTES";
const std::string SURFSTES::DATA::itemName = "DATA";


SURFVISC::SURFVISC( ) : ParserKeyword("SURFVISC")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SURFVISC");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Mass/ReservoirVolume");
        item.push_backDimension("Viscosity");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SURFVISC::keywordName = "SURFVISC";
const std::string SURFVISC::DATA::itemName = "DATA";


SURFWNUM::SURFWNUM( ) : ParserKeyword("SURFWNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("SURFWNUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SURFWNUM::keywordName = "SURFWNUM";
const std::string SURFWNUM::data::itemName = "data";


SWAT::SWAT( ) : ParserKeyword("SWAT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("SWAT");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SWAT::keywordName = "SWAT";
const std::string SWAT::data::itemName = "data";


SWATINIT::SWATINIT( ) : ParserKeyword("SWATINIT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SWATINIT");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SWATINIT::keywordName = "SWATINIT";
const std::string SWATINIT::data::itemName = "data";


SWCR::SWCR( ) : ParserKeyword("SWCR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SWCR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SWCR::keywordName = "SWCR";
const std::string SWCR::data::itemName = "data";


SWFN::SWFN( ) : ParserKeyword("SWFN")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SWFN");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SWFN::keywordName = "SWFN";
const std::string SWFN::DATA::itemName = "DATA";


SWINGFAC::SWINGFAC( ) : ParserKeyword("SWINGFAC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("SWINGFAC");
  {
     ParserRecord record;
     {
        ParserItem item("SWING_FACTOR1", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("SWING_FACTOR2", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("SWING_FACTOR3", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("SWING_FACTOR4", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("SWING_FACTOR5", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("SWING_FACTOR6", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("SWING_FACTOR7", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("SWING_FACTOR8", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("SWING_FACTOR9", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("SWING_FACTOR10", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("SWING_FACTOR11", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("SWING_FACTOR12", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_FACTOR1", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_FACTOR2", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_FACTOR3", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_FACTOR4", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_FACTOR5", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_FACTOR6", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_FACTOR7", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_FACTOR8", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_FACTOR9", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_FACTOR10", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_FACTOR11", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("PROFILE_FACTOR12", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SWINGFAC::keywordName = "SWINGFAC";
const std::string SWINGFAC::SWING_FACTOR1::itemName = "SWING_FACTOR1";
const std::string SWINGFAC::SWING_FACTOR2::itemName = "SWING_FACTOR2";
const std::string SWINGFAC::SWING_FACTOR3::itemName = "SWING_FACTOR3";
const std::string SWINGFAC::SWING_FACTOR4::itemName = "SWING_FACTOR4";
const std::string SWINGFAC::SWING_FACTOR5::itemName = "SWING_FACTOR5";
const std::string SWINGFAC::SWING_FACTOR6::itemName = "SWING_FACTOR6";
const std::string SWINGFAC::SWING_FACTOR7::itemName = "SWING_FACTOR7";
const std::string SWINGFAC::SWING_FACTOR8::itemName = "SWING_FACTOR8";
const std::string SWINGFAC::SWING_FACTOR9::itemName = "SWING_FACTOR9";
const std::string SWINGFAC::SWING_FACTOR10::itemName = "SWING_FACTOR10";
const std::string SWINGFAC::SWING_FACTOR11::itemName = "SWING_FACTOR11";
const std::string SWINGFAC::SWING_FACTOR12::itemName = "SWING_FACTOR12";
const std::string SWINGFAC::PROFILE_FACTOR1::itemName = "PROFILE_FACTOR1";
const std::string SWINGFAC::PROFILE_FACTOR2::itemName = "PROFILE_FACTOR2";
const std::string SWINGFAC::PROFILE_FACTOR3::itemName = "PROFILE_FACTOR3";
const std::string SWINGFAC::PROFILE_FACTOR4::itemName = "PROFILE_FACTOR4";
const std::string SWINGFAC::PROFILE_FACTOR5::itemName = "PROFILE_FACTOR5";
const std::string SWINGFAC::PROFILE_FACTOR6::itemName = "PROFILE_FACTOR6";
const std::string SWINGFAC::PROFILE_FACTOR7::itemName = "PROFILE_FACTOR7";
const std::string SWINGFAC::PROFILE_FACTOR8::itemName = "PROFILE_FACTOR8";
const std::string SWINGFAC::PROFILE_FACTOR9::itemName = "PROFILE_FACTOR9";
const std::string SWINGFAC::PROFILE_FACTOR10::itemName = "PROFILE_FACTOR10";
const std::string SWINGFAC::PROFILE_FACTOR11::itemName = "PROFILE_FACTOR11";
const std::string SWINGFAC::PROFILE_FACTOR12::itemName = "PROFILE_FACTOR12";


SWL::SWL( ) : ParserKeyword("SWL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SWL");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SWL::keywordName = "SWL";
const std::string SWL::data::itemName = "data";


SWLPC::SWLPC( ) : ParserKeyword("SWLPC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SWLPC");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SWLPC::keywordName = "SWLPC";
const std::string SWLPC::data::itemName = "data";


SWOF::SWOF( ) : ParserKeyword("SWOF")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SWOF");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("1");
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string SWOF::keywordName = "SWOF";
const std::string SWOF::DATA::itemName = "DATA";


SWU::SWU( ) : ParserKeyword("SWU")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("SWU");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string SWU::keywordName = "SWU";
const std::string SWU::data::itemName = "data";


TABDIMS::TABDIMS( ) : ParserKeyword("TABDIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("TABDIMS");
  {
     ParserRecord record;
     {
        ParserItem item("NTSFUN", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NTPVT", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NSSFUN", ParserItem::itype::INT);
        item.setDefault( 20 );
        record.addItem(item);
     }
     {
        ParserItem item("NPPVT", ParserItem::itype::INT);
        item.setDefault( 20 );
        record.addItem(item);
     }
     {
        ParserItem item("NTFIP", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NRPVT", ParserItem::itype::INT);
        item.setDefault( 20 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_RV_NODES", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NTENDP", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NUM_STATE_EQ", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NUM_EOS_RES", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NUM_EOS_SURFACE", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("MAX_FLUX_REGIONS", ParserItem::itype::INT);
        item.setDefault( 10 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_THERMAL_REGIONS", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NTROCC", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("MAX_PRESSURE_MAINTAINANCE_REGIONS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_KVALUE_TABLES", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("NTALPHA", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("ASPHALTENE_ASPKDAM_MAX_ROWS", ParserItem::itype::INT);
        item.setDefault( 10 );
        record.addItem(item);
     }
     {
        ParserItem item("ASPHALTENE_ASPREWG_MAX_ROWS", ParserItem::itype::INT);
        item.setDefault( 10 );
        record.addItem(item);
     }
     {
        ParserItem item("ASPHALTENE_ASPVISO_MAX_ROWS", ParserItem::itype::INT);
        item.setDefault( 10 );
        record.addItem(item);
     }
     {
        ParserItem item("ITEM20_NOT_USED", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("ASPHALTENE_ASPPW2D_MAX_COLUMNS", ParserItem::itype::INT);
        item.setDefault( 5 );
        record.addItem(item);
     }
     {
        ParserItem item("ASPHALTENE_ASPPW2D_MAX_ROWS", ParserItem::itype::INT);
        item.setDefault( 5 );
        record.addItem(item);
     }
     {
        ParserItem item("ASPHALTENE_ASPWETF_MAX_ROWS", ParserItem::itype::INT);
        item.setDefault( 5 );
        record.addItem(item);
     }
     {
        ParserItem item("NUM_KVALUE_TABLES", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("RESERVED", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TABDIMS::keywordName = "TABDIMS";
const std::string TABDIMS::NTSFUN::itemName = "NTSFUN";
const int TABDIMS::NTSFUN::defaultValue = 1;
const std::string TABDIMS::NTPVT::itemName = "NTPVT";
const int TABDIMS::NTPVT::defaultValue = 1;
const std::string TABDIMS::NSSFUN::itemName = "NSSFUN";
const int TABDIMS::NSSFUN::defaultValue = 20;
const std::string TABDIMS::NPPVT::itemName = "NPPVT";
const int TABDIMS::NPPVT::defaultValue = 20;
const std::string TABDIMS::NTFIP::itemName = "NTFIP";
const int TABDIMS::NTFIP::defaultValue = 1;
const std::string TABDIMS::NRPVT::itemName = "NRPVT";
const int TABDIMS::NRPVT::defaultValue = 20;
const std::string TABDIMS::MAX_RV_NODES::itemName = "MAX_RV_NODES";
const std::string TABDIMS::NTENDP::itemName = "NTENDP";
const int TABDIMS::NTENDP::defaultValue = 1;
const std::string TABDIMS::NUM_STATE_EQ::itemName = "NUM_STATE_EQ";
const int TABDIMS::NUM_STATE_EQ::defaultValue = 1;
const std::string TABDIMS::NUM_EOS_RES::itemName = "NUM_EOS_RES";
const int TABDIMS::NUM_EOS_RES::defaultValue = 1;
const std::string TABDIMS::NUM_EOS_SURFACE::itemName = "NUM_EOS_SURFACE";
const std::string TABDIMS::MAX_FLUX_REGIONS::itemName = "MAX_FLUX_REGIONS";
const int TABDIMS::MAX_FLUX_REGIONS::defaultValue = 10;
const std::string TABDIMS::MAX_THERMAL_REGIONS::itemName = "MAX_THERMAL_REGIONS";
const int TABDIMS::MAX_THERMAL_REGIONS::defaultValue = 1;
const std::string TABDIMS::NTROCC::itemName = "NTROCC";
const std::string TABDIMS::MAX_PRESSURE_MAINTAINANCE_REGIONS::itemName = "MAX_PRESSURE_MAINTAINANCE_REGIONS";
const int TABDIMS::MAX_PRESSURE_MAINTAINANCE_REGIONS::defaultValue = 0;
const std::string TABDIMS::MAX_KVALUE_TABLES::itemName = "MAX_KVALUE_TABLES";
const int TABDIMS::MAX_KVALUE_TABLES::defaultValue = 0;
const std::string TABDIMS::NTALPHA::itemName = "NTALPHA";
const std::string TABDIMS::ASPHALTENE_ASPKDAM_MAX_ROWS::itemName = "ASPHALTENE_ASPKDAM_MAX_ROWS";
const int TABDIMS::ASPHALTENE_ASPKDAM_MAX_ROWS::defaultValue = 10;
const std::string TABDIMS::ASPHALTENE_ASPREWG_MAX_ROWS::itemName = "ASPHALTENE_ASPREWG_MAX_ROWS";
const int TABDIMS::ASPHALTENE_ASPREWG_MAX_ROWS::defaultValue = 10;
const std::string TABDIMS::ASPHALTENE_ASPVISO_MAX_ROWS::itemName = "ASPHALTENE_ASPVISO_MAX_ROWS";
const int TABDIMS::ASPHALTENE_ASPVISO_MAX_ROWS::defaultValue = 10;
const std::string TABDIMS::ITEM20_NOT_USED::itemName = "ITEM20_NOT_USED";
const std::string TABDIMS::ASPHALTENE_ASPPW2D_MAX_COLUMNS::itemName = "ASPHALTENE_ASPPW2D_MAX_COLUMNS";
const int TABDIMS::ASPHALTENE_ASPPW2D_MAX_COLUMNS::defaultValue = 5;
const std::string TABDIMS::ASPHALTENE_ASPPW2D_MAX_ROWS::itemName = "ASPHALTENE_ASPPW2D_MAX_ROWS";
const int TABDIMS::ASPHALTENE_ASPPW2D_MAX_ROWS::defaultValue = 5;
const std::string TABDIMS::ASPHALTENE_ASPWETF_MAX_ROWS::itemName = "ASPHALTENE_ASPWETF_MAX_ROWS";
const int TABDIMS::ASPHALTENE_ASPWETF_MAX_ROWS::defaultValue = 5;
const std::string TABDIMS::NUM_KVALUE_TABLES::itemName = "NUM_KVALUE_TABLES";
const int TABDIMS::NUM_KVALUE_TABLES::defaultValue = 0;
const std::string TABDIMS::RESERVED::itemName = "RESERVED";


TBLK::TBLK( ) : ParserKeyword("TBLK")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  setMatchRegex("TBLK(F|S).{1,3}");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string TBLK::keywordName = "TBLK";
const std::string TBLK::data::itemName = "data";


TEMP::TEMP( ) : ParserKeyword("TEMP")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("TEMP");
}
const std::string TEMP::keywordName = "TEMP";


TEMPI::TEMPI( ) : ParserKeyword("TEMPI")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("TEMPI");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Temperature");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string TEMPI::keywordName = "TEMPI";
const std::string TEMPI::data::itemName = "data";


TEMPNODE::TEMPNODE( ) : ParserKeyword("TEMPNODE")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NPPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("TEMPNODE");
  {
     ParserRecord record;
     {
        ParserItem item("TABLE_DATA", ParserItem::itype::DOUBLE);
        item.push_backDimension("Temperature");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TEMPNODE::keywordName = "TEMPNODE";
const std::string TEMPNODE::TABLE_DATA::itemName = "TABLE_DATA";


TEMPTVD::TEMPTVD( ) : ParserKeyword("TEMPTVD")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("TEMPTVD");
}
const std::string TEMPTVD::keywordName = "TEMPTVD";


TEMPVD::TEMPVD( ) : ParserKeyword("TEMPVD")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("TEMPVD");
  {
     ParserRecord record;
     {
        ParserItem item("DEPTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("TEMP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Temperature");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TEMPVD::keywordName = "TEMPVD";
const std::string TEMPVD::DEPTH::itemName = "DEPTH";
const std::string TEMPVD::TEMP::itemName = "TEMP";


THCGAS::THCGAS( ) : ParserKeyword("THCGAS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("THCGAS");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Energy/AbsoluteTemperature*Length*Time");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string THCGAS::keywordName = "THCGAS";
const std::string THCGAS::data::itemName = "data";


THCOIL::THCOIL( ) : ParserKeyword("THCOIL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("THCOIL");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Energy/AbsoluteTemperature*Length*Time");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string THCOIL::keywordName = "THCOIL";
const std::string THCOIL::data::itemName = "data";


THCONR::THCONR( ) : ParserKeyword("THCONR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("THCONR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Energy/AbsoluteTemperature*Length*Time");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string THCONR::keywordName = "THCONR";
const std::string THCONR::data::itemName = "data";


THCONSF::THCONSF( ) : ParserKeyword("THCONSF")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("THCONSF");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string THCONSF::keywordName = "THCONSF";
const std::string THCONSF::data::itemName = "data";


THCROCK::THCROCK( ) : ParserKeyword("THCROCK")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("THCROCK");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Energy/AbsoluteTemperature*Length*Time");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string THCROCK::keywordName = "THCROCK";
const std::string THCROCK::data::itemName = "data";


THCWATER::THCWATER( ) : ParserKeyword("THCWATER")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("THCWATER");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Energy/AbsoluteTemperature*Length*Time");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string THCWATER::keywordName = "THCWATER";
const std::string THCWATER::data::itemName = "data";


THERMAL::THERMAL( ) : ParserKeyword("THERMAL")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("THERMAL");
}
const std::string THERMAL::keywordName = "THERMAL";


THERMEX1::THERMEX1( ) : ParserKeyword("THERMEX1")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NUM_STATE_EQ",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("THERMEX1");
  {
     ParserRecord record;
     {
        ParserItem item("EXPANSION_COEFF", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.setDefault( double(0) );
        item.push_backDimension("1/AbsoluteTemperature");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string THERMEX1::keywordName = "THERMEX1";
const std::string THERMEX1::EXPANSION_COEFF::itemName = "EXPANSION_COEFF";
const double THERMEX1::EXPANSION_COEFF::defaultValue = 0.000000;


THPRES::THPRES( ) : ParserKeyword("THPRES")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("THPRES");
  {
     ParserRecord record;
     {
        ParserItem item("REGION1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("REGION2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("VALUE", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string THPRES::keywordName = "THPRES";
const std::string THPRES::REGION1::itemName = "REGION1";
const std::string THPRES::REGION2::itemName = "REGION2";
const std::string THPRES::VALUE::itemName = "VALUE";


THPRESFT::THPRESFT( ) : ParserKeyword("THPRESFT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("THPRESFT");
  {
     ParserRecord record;
     {
        ParserItem item("FAULT_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("VALUE", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string THPRESFT::keywordName = "THPRESFT";
const std::string THPRESFT::FAULT_NAME::itemName = "FAULT_NAME";
const std::string THPRESFT::VALUE::itemName = "VALUE";


TIGHTEN::TIGHTEN( ) : ParserKeyword("TIGHTEN")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("TIGHTEN");
  {
     ParserRecord record;
     {
        ParserItem item("LINEAR_FACTOR", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("MAX_LINEAR", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NONLINEAR_FACTOR", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("MAX_NONLINEAR", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TIGHTEN::keywordName = "TIGHTEN";
const std::string TIGHTEN::LINEAR_FACTOR::itemName = "LINEAR_FACTOR";
const std::string TIGHTEN::MAX_LINEAR::itemName = "MAX_LINEAR";
const std::string TIGHTEN::NONLINEAR_FACTOR::itemName = "NONLINEAR_FACTOR";
const std::string TIGHTEN::MAX_NONLINEAR::itemName = "MAX_NONLINEAR";


TIME::TIME( ) : ParserKeyword("TIME")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("TIME");
  {
     ParserRecord record;
     {
        ParserItem item("step_list", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TIME::keywordName = "TIME";
const std::string TIME::step_list::itemName = "step_list";


TITLE::TITLE( ) : ParserKeyword("TITLE")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("TITLE");
  {
     ParserRecord record;
     {
        ParserItem item("TitleText", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TITLE::keywordName = "TITLE";
const std::string TITLE::TitleText::itemName = "TitleText";


TLMIXPAR::TLMIXPAR( ) : ParserKeyword("TLMIXPAR")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("MISCIBLE","NTMISC",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("TLMIXPAR");
  {
     ParserRecord record;
     {
        ParserItem item("TL_VISCOSITY_PARAMETER", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("TL_DENSITY_PARAMETER", ParserItem::itype::DOUBLE);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TLMIXPAR::keywordName = "TLMIXPAR";
const std::string TLMIXPAR::TL_VISCOSITY_PARAMETER::itemName = "TL_VISCOSITY_PARAMETER";
const std::string TLMIXPAR::TL_DENSITY_PARAMETER::itemName = "TL_DENSITY_PARAMETER";


TLPMIXPA::TLPMIXPA( ) : ParserKeyword("TLPMIXPA")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("MISCIBLE","NTMISC",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("TLPMIXPA");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TLPMIXPA::keywordName = "TLPMIXPA";
const std::string TLPMIXPA::DATA::itemName = "DATA";


TNUM::TNUM( ) : ParserKeyword("TNUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  setMatchRegex("TNUM(F|S).{1,3}");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string TNUM::keywordName = "TNUM";
const std::string TNUM::data::itemName = "data";


TOLCRIT::TOLCRIT( ) : ParserKeyword("TOLCRIT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("TOLCRIT");
  {
     ParserRecord record;
     {
        ParserItem item("VALUE", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-06) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TOLCRIT::keywordName = "TOLCRIT";
const std::string TOLCRIT::VALUE::itemName = "VALUE";
const double TOLCRIT::VALUE::defaultValue = 0.000001;


TOPS::TOPS( ) : ParserKeyword("TOPS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("TOPS");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string TOPS::keywordName = "TOPS";
const std::string TOPS::data::itemName = "data";


TPAMEPS::TPAMEPS( ) : ParserKeyword("TPAMEPS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("REGDIMS","NTCREG",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("TPAMEPS");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TPAMEPS::keywordName = "TPAMEPS";
const std::string TPAMEPS::DATA::itemName = "DATA";


TRACER::TRACER( ) : ParserKeyword("TRACER")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("TRACER");
  {
     ParserRecord record;
     {
        ParserItem item("NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("FLUID", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("UNIT", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SOLUTION_PHASE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("NUM_PART_TABLE", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("ADSORB_PHASE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TRACER::keywordName = "TRACER";
const std::string TRACER::NAME::itemName = "NAME";
const std::string TRACER::FLUID::itemName = "FLUID";
const std::string TRACER::UNIT::itemName = "UNIT";
const std::string TRACER::SOLUTION_PHASE::itemName = "SOLUTION_PHASE";
const std::string TRACER::NUM_PART_TABLE::itemName = "NUM_PART_TABLE";
const std::string TRACER::ADSORB_PHASE::itemName = "ADSORB_PHASE";


TRACERKM::TRACERKM( ) : ParserKeyword("TRACERKM")
{
  setSizeType(UNKNOWN);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("TRACERKM");
  {
     ParserRecord record;
     {
        ParserItem item("TRACER_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("PARTITION_FUNCTION_TYPE", ParserItem::itype::STRING);
        item.setDefault( std::string("STANDARD") );
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("PHASES", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("TABLE", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TRACERKM::keywordName = "TRACERKM";
const std::string TRACERKM::TRACER_NAME::itemName = "TRACER_NAME";
const std::string TRACERKM::PARTITION_FUNCTION_TYPE::itemName = "PARTITION_FUNCTION_TYPE";
const std::string TRACERKM::PARTITION_FUNCTION_TYPE::defaultValue = "STANDARD";
const std::string TRACERKM::PHASES::itemName = "PHASES";
const std::string TRACERKM::TABLE::itemName = "TABLE";


TRACERKP::TRACERKP( ) : ParserKeyword("TRACERKP")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("PARTTRAC","NKPTMX",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("TRACERKP");
  {
     ParserRecord record;
     {
        ParserItem item("TABLE", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Pressure");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TRACERKP::keywordName = "TRACERKP";
const std::string TRACERKP::TABLE::itemName = "TABLE";


TRACERS::TRACERS( ) : ParserKeyword("TRACERS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("TRACERS");
  {
     ParserRecord record;
     {
        ParserItem item("MAX_OIL_TRACERS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_WATER_TRACERS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_GAS_TRACERS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_ENV_TRACERS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("NUMERIC_DIFF", ParserItem::itype::STRING);
        item.setDefault( std::string("NODIFF") );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_ITER", ParserItem::itype::INT);
        item.setDefault( 12 );
        record.addItem(item);
     }
     {
        ParserItem item("MIN_ITER", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("PASSIVE_NONLINEAR", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("ONEOFF_LIN_TIGHT", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("ONEOFF_NLIN_TIGHT", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("TIGHTENING_FACTORS", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("NTIGHTFACTORS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TRACERS::keywordName = "TRACERS";
const std::string TRACERS::MAX_OIL_TRACERS::itemName = "MAX_OIL_TRACERS";
const int TRACERS::MAX_OIL_TRACERS::defaultValue = 0;
const std::string TRACERS::MAX_WATER_TRACERS::itemName = "MAX_WATER_TRACERS";
const int TRACERS::MAX_WATER_TRACERS::defaultValue = 0;
const std::string TRACERS::MAX_GAS_TRACERS::itemName = "MAX_GAS_TRACERS";
const int TRACERS::MAX_GAS_TRACERS::defaultValue = 0;
const std::string TRACERS::MAX_ENV_TRACERS::itemName = "MAX_ENV_TRACERS";
const int TRACERS::MAX_ENV_TRACERS::defaultValue = 0;
const std::string TRACERS::NUMERIC_DIFF::itemName = "NUMERIC_DIFF";
const std::string TRACERS::NUMERIC_DIFF::defaultValue = "NODIFF";
const std::string TRACERS::MAX_ITER::itemName = "MAX_ITER";
const int TRACERS::MAX_ITER::defaultValue = 12;
const std::string TRACERS::MIN_ITER::itemName = "MIN_ITER";
const int TRACERS::MIN_ITER::defaultValue = 1;
const std::string TRACERS::PASSIVE_NONLINEAR::itemName = "PASSIVE_NONLINEAR";
const std::string TRACERS::PASSIVE_NONLINEAR::defaultValue = "NO";
const std::string TRACERS::ONEOFF_LIN_TIGHT::itemName = "ONEOFF_LIN_TIGHT";
const std::string TRACERS::ONEOFF_NLIN_TIGHT::itemName = "ONEOFF_NLIN_TIGHT";
const std::string TRACERS::TIGHTENING_FACTORS::itemName = "TIGHTENING_FACTORS";
const double TRACERS::TIGHTENING_FACTORS::defaultValue = 1.000000;
const std::string TRACERS::NTIGHTFACTORS::itemName = "NTIGHTFACTORS";
const int TRACERS::NTIGHTFACTORS::defaultValue = 0;


TRACITVD::TRACITVD( ) : ParserKeyword("TRACITVD")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("TRACITVD");
  {
     ParserRecord record;
     {
        ParserItem item("FLUX_LIMITER", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("BOTH_TIMESTEP", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TRACITVD::keywordName = "TRACITVD";
const std::string TRACITVD::FLUX_LIMITER::itemName = "FLUX_LIMITER";
const int TRACITVD::FLUX_LIMITER::defaultValue = 1;
const std::string TRACITVD::BOTH_TIMESTEP::itemName = "BOTH_TIMESTEP";
const std::string TRACITVD::BOTH_TIMESTEP::defaultValue = "YES";


TRACTVD::TRACTVD( ) : ParserKeyword("TRACTVD")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("TRACTVD");
}
const std::string TRACTVD::keywordName = "TRACTVD";


TRADS::TRADS( ) : ParserKeyword("TRADS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("TRADS");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TRADS::keywordName = "TRADS";
const std::string TRADS::DATA::itemName = "DATA";


TRANGL::TRANGL( ) : ParserKeyword("TRANGL")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("TRANGL");
  {
     ParserRecord record;
     {
        ParserItem item("IL", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JL", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("KL", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("IG", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JG", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("KG", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("TRAN", ParserItem::itype::DOUBLE);
        item.push_backDimension("Transmissibility");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TRANGL::keywordName = "TRANGL";
const std::string TRANGL::IL::itemName = "IL";
const std::string TRANGL::JL::itemName = "JL";
const std::string TRANGL::KL::itemName = "KL";
const std::string TRANGL::IG::itemName = "IG";
const std::string TRANGL::JG::itemName = "JG";
const std::string TRANGL::KG::itemName = "KG";
const std::string TRANGL::TRAN::itemName = "TRAN";


TRANR::TRANR( ) : ParserKeyword("TRANR")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  clearDeckNames();
  addDeckName("TRANR");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Transmissibility");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string TRANR::keywordName = "TRANR";
const std::string TRANR::data::itemName = "data";


TRANTHT::TRANTHT( ) : ParserKeyword("TRANTHT")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  clearDeckNames();
  addDeckName("TRANTHT");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Transmissibility");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string TRANTHT::keywordName = "TRANTHT";
const std::string TRANTHT::data::itemName = "data";


TRANX::TRANX( ) : ParserKeyword("TRANX")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  clearDeckNames();
  addDeckName("TRANX");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Transmissibility");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string TRANX::keywordName = "TRANX";
const std::string TRANX::data::itemName = "data";


TRANY::TRANY( ) : ParserKeyword("TRANY")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  clearDeckNames();
  addDeckName("TRANY");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Transmissibility");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string TRANY::keywordName = "TRANY";
const std::string TRANY::data::itemName = "data";


TRANZ::TRANZ( ) : ParserKeyword("TRANZ")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("EDIT");
  clearDeckNames();
  addDeckName("TRANZ");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Transmissibility");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string TRANZ::keywordName = "TRANZ";
const std::string TRANZ::data::itemName = "data";


TRDCY::TRDCY( ) : ParserKeyword("TRDCY")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  setMatchRegex("TRDCY.+");
  {
     ParserRecord record;
     {
        ParserItem item("HALF_TIME", ParserItem::itype::DOUBLE);
        item.setDefault( double(100000000000000000000.000000) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TRDCY::keywordName = "TRDCY";
const std::string TRDCY::HALF_TIME::itemName = "HALF_TIME";
const double TRDCY::HALF_TIME::defaultValue = 100000000000000000000.000000;


TRDIF::TRDIF( ) : ParserKeyword("TRDIF")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  setMatchRegex("TRDIF.+");
  {
     ParserRecord record;
     {
        ParserItem item("HALF_TIME", ParserItem::itype::DOUBLE);
        item.setDefault( double(100000000000000000000.000000) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TRDIF::keywordName = "TRDIF";
const std::string TRDIF::HALF_TIME::itemName = "HALF_TIME";
const double TRDIF::HALF_TIME::defaultValue = 100000000000000000000.000000;


TRDIS::TRDIS( ) : ParserKeyword("TRDIS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  setMatchRegex("TRDIS.+");
  {
     ParserRecord record;
     {
        ParserItem item("D1TABLE", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("D2TABLE", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("D3TABLE", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("D4TABLE", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("D5TABLE", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("D6TABLE", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("D7TABLE", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("D8TABLE", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("D9TABLE", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TRDIS::keywordName = "TRDIS";
const std::string TRDIS::D1TABLE::itemName = "D1TABLE";
const std::string TRDIS::D2TABLE::itemName = "D2TABLE";
const std::string TRDIS::D3TABLE::itemName = "D3TABLE";
const std::string TRDIS::D4TABLE::itemName = "D4TABLE";
const std::string TRDIS::D5TABLE::itemName = "D5TABLE";
const std::string TRDIS::D6TABLE::itemName = "D6TABLE";
const std::string TRDIS::D7TABLE::itemName = "D7TABLE";
const std::string TRDIS::D8TABLE::itemName = "D8TABLE";
const std::string TRDIS::D9TABLE::itemName = "D9TABLE";


TREF::TREF( ) : ParserKeyword("TREF")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NUM_STATE_EQ",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("TREF");
  {
     ParserRecord record;
     {
        ParserItem item("TEMPERATURE", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("AbsoluteTemperature");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TREF::keywordName = "TREF";
const std::string TREF::TEMPERATURE::itemName = "TEMPERATURE";


TREFS::TREFS( ) : ParserKeyword("TREFS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NUM_STATE_EQ",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("TREFS");
  {
     ParserRecord record;
     {
        ParserItem item("TEMPERATURE", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("AbsoluteTemperature");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TREFS::keywordName = "TREFS";
const std::string TREFS::TEMPERATURE::itemName = "TEMPERATURE";


TRKPF::TRKPF( ) : ParserKeyword("TRKPF")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  setMatchRegex("TRKPF.+");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string TRKPF::keywordName = "TRKPF";
const std::string TRKPF::data::itemName = "data";


TRNHD::TRNHD( ) : ParserKeyword("TRNHD")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("PROPS");
  clearDeckNames();
  setMatchRegex("TRNHD.+");
}
const std::string TRNHD::keywordName = "TRNHD";


TRPLPORO::TRPLPORO( ) : ParserKeyword("TRPLPORO")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("TRPLPORO");
  {
     ParserRecord record;
     {
        ParserItem item("NUM_MATRIX", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TRPLPORO::keywordName = "TRPLPORO";
const std::string TRPLPORO::NUM_MATRIX::itemName = "NUM_MATRIX";


TRROCK::TRROCK( ) : ParserKeyword("TRROCK")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("TRROCK");
  {
     ParserRecord record;
     {
        ParserItem item("ADSORPTION_INDEX", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("MASS_DENSITY", ParserItem::itype::DOUBLE);
        item.push_backDimension("Mass/Length*Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("INIT_MODEL", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TRROCK::keywordName = "TRROCK";
const std::string TRROCK::ADSORPTION_INDEX::itemName = "ADSORPTION_INDEX";
const std::string TRROCK::MASS_DENSITY::itemName = "MASS_DENSITY";
const std::string TRROCK::INIT_MODEL::itemName = "INIT_MODEL";
const int TRROCK::INIT_MODEL::defaultValue = 1;


TSTEP::TSTEP( ) : ParserKeyword("TSTEP")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("TSTEP");
  {
     ParserRecord record;
     {
        ParserItem item("step_list", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Timestep");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TSTEP::keywordName = "TSTEP";
const std::string TSTEP::step_list::itemName = "step_list";


TUNING::TUNING( ) : ParserKeyword("TUNING")
{
  setFixedSize( (size_t) 3);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("TUNING");
  {
     ParserRecord record;
     {
        ParserItem item("TSINIT", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("TSMAXZ", ParserItem::itype::DOUBLE);
        item.setDefault( double(365.000000) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("TSMINZ", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.100000) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("TSMCHP", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.150000) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("TSFMAX", ParserItem::itype::DOUBLE);
        item.setDefault( double(3.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("TSFMIN", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.300000) );
        record.addItem(item);
     }
     {
        ParserItem item("TSFCNV", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.100000) );
        record.addItem(item);
     }
     {
        ParserItem item("TFDIFF", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.250000) );
        record.addItem(item);
     }
     {
        ParserItem item("THRUPT", ParserItem::itype::DOUBLE);
        item.setDefault( double(100000000000000000000.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("TMAXWC", ParserItem::itype::DOUBLE);
        item.push_backDimension("Time");
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("TRGTTE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.100000) );
        record.addItem(item);
     }
     {
        ParserItem item("TRGCNV", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.001000) );
        record.addItem(item);
     }
     {
        ParserItem item("TRGMBE", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-07) );
        record.addItem(item);
     }
     {
        ParserItem item("TRGLCV", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.000100) );
        record.addItem(item);
     }
     {
        ParserItem item("XXXTTE", ParserItem::itype::DOUBLE);
        item.setDefault( double(10.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("XXXCNV", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.010000) );
        record.addItem(item);
     }
     {
        ParserItem item("XXXMBE", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-06) );
        record.addItem(item);
     }
     {
        ParserItem item("XXXLCV", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.001000) );
        record.addItem(item);
     }
     {
        ParserItem item("XXXWFL", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.001000) );
        record.addItem(item);
     }
     {
        ParserItem item("TRGFIP", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.025000) );
        record.addItem(item);
     }
     {
        ParserItem item("TRGSFT", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("THIONX", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.010000) );
        record.addItem(item);
     }
     {
        ParserItem item("TRWGHT", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("NEWTMX", ParserItem::itype::INT);
        item.setDefault( 12 );
        record.addItem(item);
     }
     {
        ParserItem item("NEWTMN", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("LITMAX", ParserItem::itype::INT);
        item.setDefault( 25 );
        record.addItem(item);
     }
     {
        ParserItem item("LITMIN", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("MXWSIT", ParserItem::itype::INT);
        item.setDefault( 8 );
        record.addItem(item);
     }
     {
        ParserItem item("MXWPIT", ParserItem::itype::INT);
        item.setDefault( 8 );
        record.addItem(item);
     }
     {
        ParserItem item("DDPLIM", ParserItem::itype::DOUBLE);
        item.setDefault( double(1000000.000000) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("DDSLIM", ParserItem::itype::DOUBLE);
        item.setDefault( double(1000000.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("TRGDPR", ParserItem::itype::DOUBLE);
        item.setDefault( double(1000000.000000) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("XXXDPR", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TUNING::keywordName = "TUNING";
const std::string TUNING::TSINIT::itemName = "TSINIT";
const double TUNING::TSINIT::defaultValue = 1.000000;
const std::string TUNING::TSMAXZ::itemName = "TSMAXZ";
const double TUNING::TSMAXZ::defaultValue = 365.000000;
const std::string TUNING::TSMINZ::itemName = "TSMINZ";
const double TUNING::TSMINZ::defaultValue = 0.100000;
const std::string TUNING::TSMCHP::itemName = "TSMCHP";
const double TUNING::TSMCHP::defaultValue = 0.150000;
const std::string TUNING::TSFMAX::itemName = "TSFMAX";
const double TUNING::TSFMAX::defaultValue = 3.000000;
const std::string TUNING::TSFMIN::itemName = "TSFMIN";
const double TUNING::TSFMIN::defaultValue = 0.300000;
const std::string TUNING::TSFCNV::itemName = "TSFCNV";
const double TUNING::TSFCNV::defaultValue = 0.100000;
const std::string TUNING::TFDIFF::itemName = "TFDIFF";
const double TUNING::TFDIFF::defaultValue = 1.250000;
const std::string TUNING::THRUPT::itemName = "THRUPT";
const double TUNING::THRUPT::defaultValue = 100000000000000000000.000000;
const std::string TUNING::TMAXWC::itemName = "TMAXWC";
const std::string TUNING::TRGTTE::itemName = "TRGTTE";
const double TUNING::TRGTTE::defaultValue = 0.100000;
const std::string TUNING::TRGCNV::itemName = "TRGCNV";
const double TUNING::TRGCNV::defaultValue = 0.001000;
const std::string TUNING::TRGMBE::itemName = "TRGMBE";
const double TUNING::TRGMBE::defaultValue = 0.000000;
const std::string TUNING::TRGLCV::itemName = "TRGLCV";
const double TUNING::TRGLCV::defaultValue = 0.000100;
const std::string TUNING::XXXTTE::itemName = "XXXTTE";
const double TUNING::XXXTTE::defaultValue = 10.000000;
const std::string TUNING::XXXCNV::itemName = "XXXCNV";
const double TUNING::XXXCNV::defaultValue = 0.010000;
const std::string TUNING::XXXMBE::itemName = "XXXMBE";
const double TUNING::XXXMBE::defaultValue = 0.000001;
const std::string TUNING::XXXLCV::itemName = "XXXLCV";
const double TUNING::XXXLCV::defaultValue = 0.001000;
const std::string TUNING::XXXWFL::itemName = "XXXWFL";
const double TUNING::XXXWFL::defaultValue = 0.001000;
const std::string TUNING::TRGFIP::itemName = "TRGFIP";
const double TUNING::TRGFIP::defaultValue = 0.025000;
const std::string TUNING::TRGSFT::itemName = "TRGSFT";
const std::string TUNING::THIONX::itemName = "THIONX";
const double TUNING::THIONX::defaultValue = 0.010000;
const std::string TUNING::TRWGHT::itemName = "TRWGHT";
const int TUNING::TRWGHT::defaultValue = 1;
const std::string TUNING::NEWTMX::itemName = "NEWTMX";
const int TUNING::NEWTMX::defaultValue = 12;
const std::string TUNING::NEWTMN::itemName = "NEWTMN";
const int TUNING::NEWTMN::defaultValue = 1;
const std::string TUNING::LITMAX::itemName = "LITMAX";
const int TUNING::LITMAX::defaultValue = 25;
const std::string TUNING::LITMIN::itemName = "LITMIN";
const int TUNING::LITMIN::defaultValue = 1;
const std::string TUNING::MXWSIT::itemName = "MXWSIT";
const int TUNING::MXWSIT::defaultValue = 8;
const std::string TUNING::MXWPIT::itemName = "MXWPIT";
const int TUNING::MXWPIT::defaultValue = 8;
const std::string TUNING::DDPLIM::itemName = "DDPLIM";
const double TUNING::DDPLIM::defaultValue = 1000000.000000;
const std::string TUNING::DDSLIM::itemName = "DDSLIM";
const double TUNING::DDSLIM::defaultValue = 1000000.000000;
const std::string TUNING::TRGDPR::itemName = "TRGDPR";
const double TUNING::TRGDPR::defaultValue = 1000000.000000;
const std::string TUNING::XXXDPR::itemName = "XXXDPR";


TUNINGDP::TUNINGDP( ) : ParserKeyword("TUNINGDP")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("TUNINGDP");
  {
     ParserRecord record;
     {
        ParserItem item("TRGLCV", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("XXXLCV", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("TRGDDP", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("TRGDDS", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TUNINGDP::keywordName = "TUNINGDP";
const std::string TUNINGDP::TRGLCV::itemName = "TRGLCV";
const std::string TUNINGDP::XXXLCV::itemName = "XXXLCV";
const std::string TUNINGDP::TRGDDP::itemName = "TRGDDP";
const std::string TUNINGDP::TRGDDS::itemName = "TRGDDS";


TUNINGH::TUNINGH( ) : ParserKeyword("TUNINGH")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("TUNINGH");
  {
     ParserRecord record;
     {
        ParserItem item("GRGLCV", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.000100) );
        record.addItem(item);
     }
     {
        ParserItem item("GXXLCV", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.001000) );
        record.addItem(item);
     }
     {
        ParserItem item("GMSLCV", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-20) );
        record.addItem(item);
     }
     {
        ParserItem item("LGTMIN", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("LGTMAX", ParserItem::itype::INT);
        item.setDefault( 25 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TUNINGH::keywordName = "TUNINGH";
const std::string TUNINGH::GRGLCV::itemName = "GRGLCV";
const double TUNINGH::GRGLCV::defaultValue = 0.000100;
const std::string TUNINGH::GXXLCV::itemName = "GXXLCV";
const double TUNINGH::GXXLCV::defaultValue = 0.001000;
const std::string TUNINGH::GMSLCV::itemName = "GMSLCV";
const double TUNINGH::GMSLCV::defaultValue = 0.000000;
const std::string TUNINGH::LGTMIN::itemName = "LGTMIN";
const int TUNINGH::LGTMIN::defaultValue = 1;
const std::string TUNINGH::LGTMAX::itemName = "LGTMAX";
const int TUNINGH::LGTMAX::defaultValue = 25;


TUNINGL::TUNINGL( ) : ParserKeyword("TUNINGL")
{
  setFixedSize( (size_t) 3);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("TUNINGL");
  {
     ParserRecord record;
     {
        ParserItem item("TSINIT", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("TSMAXZ", ParserItem::itype::DOUBLE);
        item.setDefault( double(365.000000) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("TSMINZ", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.100000) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("TSMCHP", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.150000) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("TSFMAX", ParserItem::itype::DOUBLE);
        item.setDefault( double(3.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("TSFMIN", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.300000) );
        record.addItem(item);
     }
     {
        ParserItem item("TSFCNV", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.100000) );
        record.addItem(item);
     }
     {
        ParserItem item("TFDIFF", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.250000) );
        record.addItem(item);
     }
     {
        ParserItem item("THRUPT", ParserItem::itype::DOUBLE);
        item.setDefault( double(100000000000000000000.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("TMAXWC", ParserItem::itype::DOUBLE);
        item.push_backDimension("Time");
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("TRGTTE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.100000) );
        record.addItem(item);
     }
     {
        ParserItem item("TRGCNV", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.001000) );
        record.addItem(item);
     }
     {
        ParserItem item("TRGMBE", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-07) );
        record.addItem(item);
     }
     {
        ParserItem item("TRGLCV", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.000100) );
        record.addItem(item);
     }
     {
        ParserItem item("XXXTTE", ParserItem::itype::DOUBLE);
        item.setDefault( double(10.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("XXXCNV", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.010000) );
        record.addItem(item);
     }
     {
        ParserItem item("XXXMBE", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-06) );
        record.addItem(item);
     }
     {
        ParserItem item("XXXLCV", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.001000) );
        record.addItem(item);
     }
     {
        ParserItem item("XXXWFL", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.001000) );
        record.addItem(item);
     }
     {
        ParserItem item("TRGFIP", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.025000) );
        record.addItem(item);
     }
     {
        ParserItem item("TRGSFT", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("THIONX", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.010000) );
        record.addItem(item);
     }
     {
        ParserItem item("TRWGHT", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("NEWTMX", ParserItem::itype::INT);
        item.setDefault( 12 );
        record.addItem(item);
     }
     {
        ParserItem item("NEWTMN", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("LITMAX", ParserItem::itype::INT);
        item.setDefault( 25 );
        record.addItem(item);
     }
     {
        ParserItem item("LITMIN", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("MXWSIT", ParserItem::itype::INT);
        item.setDefault( 8 );
        record.addItem(item);
     }
     {
        ParserItem item("MXWPIT", ParserItem::itype::INT);
        item.setDefault( 8 );
        record.addItem(item);
     }
     {
        ParserItem item("DDPLIM", ParserItem::itype::DOUBLE);
        item.setDefault( double(1000000.000000) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("DDSLIM", ParserItem::itype::DOUBLE);
        item.setDefault( double(1000000.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("TRGDPR", ParserItem::itype::DOUBLE);
        item.setDefault( double(1000000.000000) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("XXXDPR", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TUNINGL::keywordName = "TUNINGL";
const std::string TUNINGL::TSINIT::itemName = "TSINIT";
const double TUNINGL::TSINIT::defaultValue = 1.000000;
const std::string TUNINGL::TSMAXZ::itemName = "TSMAXZ";
const double TUNINGL::TSMAXZ::defaultValue = 365.000000;
const std::string TUNINGL::TSMINZ::itemName = "TSMINZ";
const double TUNINGL::TSMINZ::defaultValue = 0.100000;
const std::string TUNINGL::TSMCHP::itemName = "TSMCHP";
const double TUNINGL::TSMCHP::defaultValue = 0.150000;
const std::string TUNINGL::TSFMAX::itemName = "TSFMAX";
const double TUNINGL::TSFMAX::defaultValue = 3.000000;
const std::string TUNINGL::TSFMIN::itemName = "TSFMIN";
const double TUNINGL::TSFMIN::defaultValue = 0.300000;
const std::string TUNINGL::TSFCNV::itemName = "TSFCNV";
const double TUNINGL::TSFCNV::defaultValue = 0.100000;
const std::string TUNINGL::TFDIFF::itemName = "TFDIFF";
const double TUNINGL::TFDIFF::defaultValue = 1.250000;
const std::string TUNINGL::THRUPT::itemName = "THRUPT";
const double TUNINGL::THRUPT::defaultValue = 100000000000000000000.000000;
const std::string TUNINGL::TMAXWC::itemName = "TMAXWC";
const std::string TUNINGL::TRGTTE::itemName = "TRGTTE";
const double TUNINGL::TRGTTE::defaultValue = 0.100000;
const std::string TUNINGL::TRGCNV::itemName = "TRGCNV";
const double TUNINGL::TRGCNV::defaultValue = 0.001000;
const std::string TUNINGL::TRGMBE::itemName = "TRGMBE";
const double TUNINGL::TRGMBE::defaultValue = 0.000000;
const std::string TUNINGL::TRGLCV::itemName = "TRGLCV";
const double TUNINGL::TRGLCV::defaultValue = 0.000100;
const std::string TUNINGL::XXXTTE::itemName = "XXXTTE";
const double TUNINGL::XXXTTE::defaultValue = 10.000000;
const std::string TUNINGL::XXXCNV::itemName = "XXXCNV";
const double TUNINGL::XXXCNV::defaultValue = 0.010000;
const std::string TUNINGL::XXXMBE::itemName = "XXXMBE";
const double TUNINGL::XXXMBE::defaultValue = 0.000001;
const std::string TUNINGL::XXXLCV::itemName = "XXXLCV";
const double TUNINGL::XXXLCV::defaultValue = 0.001000;
const std::string TUNINGL::XXXWFL::itemName = "XXXWFL";
const double TUNINGL::XXXWFL::defaultValue = 0.001000;
const std::string TUNINGL::TRGFIP::itemName = "TRGFIP";
const double TUNINGL::TRGFIP::defaultValue = 0.025000;
const std::string TUNINGL::TRGSFT::itemName = "TRGSFT";
const std::string TUNINGL::THIONX::itemName = "THIONX";
const double TUNINGL::THIONX::defaultValue = 0.010000;
const std::string TUNINGL::TRWGHT::itemName = "TRWGHT";
const int TUNINGL::TRWGHT::defaultValue = 1;
const std::string TUNINGL::NEWTMX::itemName = "NEWTMX";
const int TUNINGL::NEWTMX::defaultValue = 12;
const std::string TUNINGL::NEWTMN::itemName = "NEWTMN";
const int TUNINGL::NEWTMN::defaultValue = 1;
const std::string TUNINGL::LITMAX::itemName = "LITMAX";
const int TUNINGL::LITMAX::defaultValue = 25;
const std::string TUNINGL::LITMIN::itemName = "LITMIN";
const int TUNINGL::LITMIN::defaultValue = 1;
const std::string TUNINGL::MXWSIT::itemName = "MXWSIT";
const int TUNINGL::MXWSIT::defaultValue = 8;
const std::string TUNINGL::MXWPIT::itemName = "MXWPIT";
const int TUNINGL::MXWPIT::defaultValue = 8;
const std::string TUNINGL::DDPLIM::itemName = "DDPLIM";
const double TUNINGL::DDPLIM::defaultValue = 1000000.000000;
const std::string TUNINGL::DDSLIM::itemName = "DDSLIM";
const double TUNINGL::DDSLIM::defaultValue = 1000000.000000;
const std::string TUNINGL::TRGDPR::itemName = "TRGDPR";
const double TUNINGL::TRGDPR::defaultValue = 1000000.000000;
const std::string TUNINGL::XXXDPR::itemName = "XXXDPR";


TUNINGS::TUNINGS( ) : ParserKeyword("TUNINGS")
{
  setFixedSize( (size_t) 4);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("TUNINGS");
  {
     ParserRecord record;
     {
        ParserItem item("LGR", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("TSINIT", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("TSMAXZ", ParserItem::itype::DOUBLE);
        item.setDefault( double(365.000000) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("TSMINZ", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.100000) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("TSMCHP", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.150000) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("TSFMAX", ParserItem::itype::DOUBLE);
        item.setDefault( double(3.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("TSFMIN", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.300000) );
        record.addItem(item);
     }
     {
        ParserItem item("TSFCNV", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.100000) );
        record.addItem(item);
     }
     {
        ParserItem item("TFDIFF", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.250000) );
        record.addItem(item);
     }
     {
        ParserItem item("THRUPT", ParserItem::itype::DOUBLE);
        item.setDefault( double(100000000000000000000.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("TMAXWC", ParserItem::itype::DOUBLE);
        item.push_backDimension("Time");
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("TRGTTE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.100000) );
        record.addItem(item);
     }
     {
        ParserItem item("TRGCNV", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.001000) );
        record.addItem(item);
     }
     {
        ParserItem item("TRGMBE", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-07) );
        record.addItem(item);
     }
     {
        ParserItem item("TRGLCV", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.000100) );
        record.addItem(item);
     }
     {
        ParserItem item("XXXTTE", ParserItem::itype::DOUBLE);
        item.setDefault( double(10.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("XXXCNV", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.010000) );
        record.addItem(item);
     }
     {
        ParserItem item("XXXMBE", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-06) );
        record.addItem(item);
     }
     {
        ParserItem item("XXXLCV", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.001000) );
        record.addItem(item);
     }
     {
        ParserItem item("XXXWFL", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.001000) );
        record.addItem(item);
     }
     {
        ParserItem item("TRGFIP", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.025000) );
        record.addItem(item);
     }
     {
        ParserItem item("TRGSFT", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("THIONX", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.010000) );
        record.addItem(item);
     }
     {
        ParserItem item("TRWGHT", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("NEWTMX", ParserItem::itype::INT);
        item.setDefault( 12 );
        record.addItem(item);
     }
     {
        ParserItem item("NEWTMN", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("LITMAX", ParserItem::itype::INT);
        item.setDefault( 25 );
        record.addItem(item);
     }
     {
        ParserItem item("LITMIN", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("MXWSIT", ParserItem::itype::INT);
        item.setDefault( 8 );
        record.addItem(item);
     }
     {
        ParserItem item("MXWPIT", ParserItem::itype::INT);
        item.setDefault( 8 );
        record.addItem(item);
     }
     {
        ParserItem item("DDPLIM", ParserItem::itype::DOUBLE);
        item.setDefault( double(1000000.000000) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("DDSLIM", ParserItem::itype::DOUBLE);
        item.setDefault( double(1000000.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("TRGDPR", ParserItem::itype::DOUBLE);
        item.setDefault( double(1000000.000000) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("XXXDPR", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TUNINGS::keywordName = "TUNINGS";
const std::string TUNINGS::LGR::itemName = "LGR";
const std::string TUNINGS::TSINIT::itemName = "TSINIT";
const double TUNINGS::TSINIT::defaultValue = 1.000000;
const std::string TUNINGS::TSMAXZ::itemName = "TSMAXZ";
const double TUNINGS::TSMAXZ::defaultValue = 365.000000;
const std::string TUNINGS::TSMINZ::itemName = "TSMINZ";
const double TUNINGS::TSMINZ::defaultValue = 0.100000;
const std::string TUNINGS::TSMCHP::itemName = "TSMCHP";
const double TUNINGS::TSMCHP::defaultValue = 0.150000;
const std::string TUNINGS::TSFMAX::itemName = "TSFMAX";
const double TUNINGS::TSFMAX::defaultValue = 3.000000;
const std::string TUNINGS::TSFMIN::itemName = "TSFMIN";
const double TUNINGS::TSFMIN::defaultValue = 0.300000;
const std::string TUNINGS::TSFCNV::itemName = "TSFCNV";
const double TUNINGS::TSFCNV::defaultValue = 0.100000;
const std::string TUNINGS::TFDIFF::itemName = "TFDIFF";
const double TUNINGS::TFDIFF::defaultValue = 1.250000;
const std::string TUNINGS::THRUPT::itemName = "THRUPT";
const double TUNINGS::THRUPT::defaultValue = 100000000000000000000.000000;
const std::string TUNINGS::TMAXWC::itemName = "TMAXWC";
const std::string TUNINGS::TRGTTE::itemName = "TRGTTE";
const double TUNINGS::TRGTTE::defaultValue = 0.100000;
const std::string TUNINGS::TRGCNV::itemName = "TRGCNV";
const double TUNINGS::TRGCNV::defaultValue = 0.001000;
const std::string TUNINGS::TRGMBE::itemName = "TRGMBE";
const double TUNINGS::TRGMBE::defaultValue = 0.000000;
const std::string TUNINGS::TRGLCV::itemName = "TRGLCV";
const double TUNINGS::TRGLCV::defaultValue = 0.000100;
const std::string TUNINGS::XXXTTE::itemName = "XXXTTE";
const double TUNINGS::XXXTTE::defaultValue = 10.000000;
const std::string TUNINGS::XXXCNV::itemName = "XXXCNV";
const double TUNINGS::XXXCNV::defaultValue = 0.010000;
const std::string TUNINGS::XXXMBE::itemName = "XXXMBE";
const double TUNINGS::XXXMBE::defaultValue = 0.000001;
const std::string TUNINGS::XXXLCV::itemName = "XXXLCV";
const double TUNINGS::XXXLCV::defaultValue = 0.001000;
const std::string TUNINGS::XXXWFL::itemName = "XXXWFL";
const double TUNINGS::XXXWFL::defaultValue = 0.001000;
const std::string TUNINGS::TRGFIP::itemName = "TRGFIP";
const double TUNINGS::TRGFIP::defaultValue = 0.025000;
const std::string TUNINGS::TRGSFT::itemName = "TRGSFT";
const std::string TUNINGS::THIONX::itemName = "THIONX";
const double TUNINGS::THIONX::defaultValue = 0.010000;
const std::string TUNINGS::TRWGHT::itemName = "TRWGHT";
const int TUNINGS::TRWGHT::defaultValue = 1;
const std::string TUNINGS::NEWTMX::itemName = "NEWTMX";
const int TUNINGS::NEWTMX::defaultValue = 12;
const std::string TUNINGS::NEWTMN::itemName = "NEWTMN";
const int TUNINGS::NEWTMN::defaultValue = 1;
const std::string TUNINGS::LITMAX::itemName = "LITMAX";
const int TUNINGS::LITMAX::defaultValue = 25;
const std::string TUNINGS::LITMIN::itemName = "LITMIN";
const int TUNINGS::LITMIN::defaultValue = 1;
const std::string TUNINGS::MXWSIT::itemName = "MXWSIT";
const int TUNINGS::MXWSIT::defaultValue = 8;
const std::string TUNINGS::MXWPIT::itemName = "MXWPIT";
const int TUNINGS::MXWPIT::defaultValue = 8;
const std::string TUNINGS::DDPLIM::itemName = "DDPLIM";
const double TUNINGS::DDPLIM::defaultValue = 1000000.000000;
const std::string TUNINGS::DDSLIM::itemName = "DDSLIM";
const double TUNINGS::DDSLIM::defaultValue = 1000000.000000;
const std::string TUNINGS::TRGDPR::itemName = "TRGDPR";
const double TUNINGS::TRGDPR::defaultValue = 1000000.000000;
const std::string TUNINGS::XXXDPR::itemName = "XXXDPR";


TVDP::TVDP( ) : ParserKeyword("TVDP")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("EQLDIMS","NTTRVD",0);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  setMatchRegex("TVDP.+");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TVDP::keywordName = "TVDP";
const std::string TVDP::DATA::itemName = "DATA";


TZONE::TZONE( ) : ParserKeyword("TZONE")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("TZONE");
  {
     ParserRecord record;
     {
        ParserItem item("OIL_SWITCH", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("WATER_SWITCH", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("GAS_SWITCH", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string TZONE::keywordName = "TZONE";
const std::string TZONE::OIL_SWITCH::itemName = "OIL_SWITCH";
const std::string TZONE::WATER_SWITCH::itemName = "WATER_SWITCH";
const std::string TZONE::GAS_SWITCH::itemName = "GAS_SWITCH";


UDADIMS::UDADIMS( ) : ParserKeyword("UDADIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("UDADIMS");
  {
     ParserRecord record;
     {
        ParserItem item("NUM_UDQ_REPLACE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("IGNORED", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("TOTAL_UDQ_UNIQUE", ParserItem::itype::INT);
        item.setDefault( 100 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string UDADIMS::keywordName = "UDADIMS";
const std::string UDADIMS::NUM_UDQ_REPLACE::itemName = "NUM_UDQ_REPLACE";
const int UDADIMS::NUM_UDQ_REPLACE::defaultValue = 0;
const std::string UDADIMS::IGNORED::itemName = "IGNORED";
const int UDADIMS::IGNORED::defaultValue = 0;
const std::string UDADIMS::TOTAL_UDQ_UNIQUE::itemName = "TOTAL_UDQ_UNIQUE";
const int UDADIMS::TOTAL_UDQ_UNIQUE::defaultValue = 100;


UDQ::UDQ( ) : ParserKeyword("UDQ")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("UDQ");
  {
     ParserRecord record;
     {
        ParserItem item("ACTION", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("QUANTITY", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("DATA", ParserItem::itype::RAW_STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string UDQ::keywordName = "UDQ";
const std::string UDQ::ACTION::itemName = "ACTION";
const std::string UDQ::QUANTITY::itemName = "QUANTITY";
const std::string UDQ::DATA::itemName = "DATA";


UDQDIMS::UDQDIMS( ) : ParserKeyword("UDQDIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("UDQDIMS");
  {
     ParserRecord record;
     {
        ParserItem item("MAX_FUNCTIONS", ParserItem::itype::INT);
        item.setDefault( 16 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_ITEMS", ParserItem::itype::INT);
        item.setDefault( 16 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_CONNECTIONS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_FIELDS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_GROUP", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_REGION", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_SEGMENT", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_WELL", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_AQUIFER", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_BLOCK", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("RESTART_NEW_SEED", ParserItem::itype::STRING);
        item.setDefault( std::string("N") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string UDQDIMS::keywordName = "UDQDIMS";
const std::string UDQDIMS::MAX_FUNCTIONS::itemName = "MAX_FUNCTIONS";
const int UDQDIMS::MAX_FUNCTIONS::defaultValue = 16;
const std::string UDQDIMS::MAX_ITEMS::itemName = "MAX_ITEMS";
const int UDQDIMS::MAX_ITEMS::defaultValue = 16;
const std::string UDQDIMS::MAX_CONNECTIONS::itemName = "MAX_CONNECTIONS";
const int UDQDIMS::MAX_CONNECTIONS::defaultValue = 0;
const std::string UDQDIMS::MAX_FIELDS::itemName = "MAX_FIELDS";
const int UDQDIMS::MAX_FIELDS::defaultValue = 0;
const std::string UDQDIMS::MAX_GROUP::itemName = "MAX_GROUP";
const int UDQDIMS::MAX_GROUP::defaultValue = 0;
const std::string UDQDIMS::MAX_REGION::itemName = "MAX_REGION";
const int UDQDIMS::MAX_REGION::defaultValue = 0;
const std::string UDQDIMS::MAX_SEGMENT::itemName = "MAX_SEGMENT";
const int UDQDIMS::MAX_SEGMENT::defaultValue = 0;
const std::string UDQDIMS::MAX_WELL::itemName = "MAX_WELL";
const int UDQDIMS::MAX_WELL::defaultValue = 0;
const std::string UDQDIMS::MAX_AQUIFER::itemName = "MAX_AQUIFER";
const int UDQDIMS::MAX_AQUIFER::defaultValue = 0;
const std::string UDQDIMS::MAX_BLOCK::itemName = "MAX_BLOCK";
const int UDQDIMS::MAX_BLOCK::defaultValue = 0;
const std::string UDQDIMS::RESTART_NEW_SEED::itemName = "RESTART_NEW_SEED";
const std::string UDQDIMS::RESTART_NEW_SEED::defaultValue = "N";


UDQPARAM::UDQPARAM( ) : ParserKeyword("UDQPARAM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("UDQPARAM");
  {
     ParserRecord record;
     {
        ParserItem item("RANDOM_SEED", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("RANGE", ParserItem::itype::DOUBLE);
        item.setDefault( double(100000000000000000000.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("UNDEFINED_VALUE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("CMP_EPSILON", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.000100) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string UDQPARAM::keywordName = "UDQPARAM";
const std::string UDQPARAM::RANDOM_SEED::itemName = "RANDOM_SEED";
const int UDQPARAM::RANDOM_SEED::defaultValue = 1;
const std::string UDQPARAM::RANGE::itemName = "RANGE";
const double UDQPARAM::RANGE::defaultValue = 100000000000000000000.000000;
const std::string UDQPARAM::UNDEFINED_VALUE::itemName = "UNDEFINED_VALUE";
const double UDQPARAM::UNDEFINED_VALUE::defaultValue = 0.000000;
const std::string UDQPARAM::CMP_EPSILON::itemName = "CMP_EPSILON";
const double UDQPARAM::CMP_EPSILON::defaultValue = 0.000100;


UNCODHMD::UNCODHMD( ) : ParserKeyword("UNCODHMD")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("UNCODHMD");
}
const std::string UNCODHMD::keywordName = "UNCODHMD";


UNIFIN::UNIFIN( ) : ParserKeyword("UNIFIN")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("UNIFIN");
}
const std::string UNIFIN::keywordName = "UNIFIN";


UNIFOUT::UNIFOUT( ) : ParserKeyword("UNIFOUT")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("UNIFOUT");
}
const std::string UNIFOUT::keywordName = "UNIFOUT";


UNIFOUTS::UNIFOUTS( ) : ParserKeyword("UNIFOUTS")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("UNIFOUTS");
}
const std::string UNIFOUTS::keywordName = "UNIFOUTS";


UNIFSAVE::UNIFSAVE( ) : ParserKeyword("UNIFSAVE")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("UNIFSAVE");
}
const std::string UNIFSAVE::keywordName = "UNIFSAVE";


USECUPL::USECUPL( ) : ParserKeyword("USECUPL")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("USECUPL");
  {
     ParserRecord record;
     {
        ParserItem item("BASE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("FMT", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string USECUPL::keywordName = "USECUPL";
const std::string USECUPL::BASE::itemName = "BASE";
const std::string USECUPL::FMT::itemName = "FMT";


USEFLUX::USEFLUX( ) : ParserKeyword("USEFLUX")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("USEFLUX");
}
const std::string USEFLUX::keywordName = "USEFLUX";


USENOFLO::USENOFLO( ) : ParserKeyword("USENOFLO")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("USENOFLO");
}
const std::string USENOFLO::keywordName = "USENOFLO";


VAPOIL::VAPOIL( ) : ParserKeyword("VAPOIL")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("VAPOIL");
}
const std::string VAPOIL::keywordName = "VAPOIL";


VAPPARS::VAPPARS( ) : ParserKeyword("VAPPARS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("VAPPARS");
  {
     ParserRecord record;
     {
        ParserItem item("OIL_VAP_PROPENSITY", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("OIL_DENSITY_PROPENSITY", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string VAPPARS::keywordName = "VAPPARS";
const std::string VAPPARS::OIL_VAP_PROPENSITY::itemName = "OIL_VAP_PROPENSITY";
const std::string VAPPARS::OIL_DENSITY_PROPENSITY::itemName = "OIL_DENSITY_PROPENSITY";


VDFLOW::VDFLOW( ) : ParserKeyword("VDFLOW")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("VDFLOW");
  {
     ParserRecord record;
     {
        ParserItem item("BETA", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string VDFLOW::keywordName = "VDFLOW";
const std::string VDFLOW::BETA::itemName = "BETA";


VDFLOWR::VDFLOWR( ) : ParserKeyword("VDFLOWR")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("VDFLOWR");
  {
     ParserRecord record;
     {
        ParserItem item("BETA", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string VDFLOWR::keywordName = "VDFLOWR";
const std::string VDFLOWR::BETA::itemName = "BETA";


VE::VE( ) : ParserKeyword("VE")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("VE");
  {
     ParserRecord record;
     {
        ParserItem item("MODEL_TYPE", ParserItem::itype::STRING);
        item.setDefault( std::string("NOCOMP") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string VE::keywordName = "VE";
const std::string VE::MODEL_TYPE::itemName = "MODEL_TYPE";
const std::string VE::MODEL_TYPE::defaultValue = "NOCOMP";


VEDEBUG::VEDEBUG( ) : ParserKeyword("VEDEBUG")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("VEDEBUG");
  {
     ParserRecord record;
     {
        ParserItem item("I1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("I2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("DEBUG_LEVEL", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("LGR", ParserItem::itype::STRING);
        item.setDefault( std::string(" ") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string VEDEBUG::keywordName = "VEDEBUG";
const std::string VEDEBUG::I1::itemName = "I1";
const std::string VEDEBUG::I2::itemName = "I2";
const std::string VEDEBUG::J1::itemName = "J1";
const std::string VEDEBUG::J2::itemName = "J2";
const std::string VEDEBUG::K1::itemName = "K1";
const std::string VEDEBUG::K2::itemName = "K2";
const std::string VEDEBUG::DEBUG_LEVEL::itemName = "DEBUG_LEVEL";
const int VEDEBUG::DEBUG_LEVEL::defaultValue = 0;
const std::string VEDEBUG::LGR::itemName = "LGR";
const std::string VEDEBUG::LGR::defaultValue = " ";


VEFIN::VEFIN( ) : ParserKeyword("VEFIN")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("VEFIN");
  {
     ParserRecord record;
     {
        ParserItem item("VE", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("NVEPT", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string VEFIN::keywordName = "VEFIN";
const std::string VEFIN::VE::itemName = "VE";
const std::string VEFIN::VE::defaultValue = "NO";
const std::string VEFIN::NVEPT::itemName = "NVEPT";
const int VEFIN::NVEPT::defaultValue = 0;


VEFRAC::VEFRAC( ) : ParserKeyword("VEFRAC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("VEFRAC");
  {
     ParserRecord record;
     {
        ParserItem item("FRAC", ParserItem::itype::DOUBLE);
        item.setDefault( double(10.000000) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string VEFRAC::keywordName = "VEFRAC";
const std::string VEFRAC::FRAC::itemName = "FRAC";
const double VEFRAC::FRAC::defaultValue = 10.000000;


VEFRACP::VEFRACP( ) : ParserKeyword("VEFRACP")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("VEFRACP");
  {
     ParserRecord record;
     {
        ParserItem item("FRAC", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string VEFRACP::keywordName = "VEFRACP";
const std::string VEFRACP::FRAC::itemName = "FRAC";
const double VEFRACP::FRAC::defaultValue = 1.000000;


VEFRACPV::VEFRACPV( ) : ParserKeyword("VEFRACPV")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("VEFRACPV");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string VEFRACPV::keywordName = "VEFRACPV";
const std::string VEFRACPV::data::itemName = "data";


VEFRACV::VEFRACV( ) : ParserKeyword("VEFRACV")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("VEFRACV");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string VEFRACV::keywordName = "VEFRACV";
const std::string VEFRACV::data::itemName = "data";


VFPCHK::VFPCHK( ) : ParserKeyword("VFPCHK")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("VFPCHK");
  {
     ParserRecord record;
     {
        ParserItem item("BHP_LIMIT", ParserItem::itype::DOUBLE);
        item.setDefault( double(10000000000.000000) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string VFPCHK::keywordName = "VFPCHK";
const std::string VFPCHK::BHP_LIMIT::itemName = "BHP_LIMIT";
const double VFPCHK::BHP_LIMIT::defaultValue = 10000000000.000000;


VFPIDIMS::VFPIDIMS( ) : ParserKeyword("VFPIDIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("VFPIDIMS");
  {
     ParserRecord record;
     {
        ParserItem item("MAX_FLOW_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_THP_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_INJ_VFP_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string VFPIDIMS::keywordName = "VFPIDIMS";
const std::string VFPIDIMS::MAX_FLOW_TABLE::itemName = "MAX_FLOW_TABLE";
const int VFPIDIMS::MAX_FLOW_TABLE::defaultValue = 0;
const std::string VFPIDIMS::MAX_THP_TABLE::itemName = "MAX_THP_TABLE";
const int VFPIDIMS::MAX_THP_TABLE::defaultValue = 0;
const std::string VFPIDIMS::MAX_INJ_VFP_TABLE::itemName = "MAX_INJ_VFP_TABLE";
const int VFPIDIMS::MAX_INJ_VFP_TABLE::defaultValue = 0;


VFPINJ::VFPINJ( ) : ParserKeyword("VFPINJ")
{
  setSizeType(UNKNOWN);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("VFPINJ");
  {
     ParserRecord record;
     {
        ParserItem item("TABLE", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("DATUM_DEPTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("RATE_TYPE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("PRESSURE_DEF", ParserItem::itype::STRING);
        item.setDefault( std::string("THP") );
        record.addItem(item);
     }
     {
        ParserItem item("UNITS", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("BODY_DEF", ParserItem::itype::STRING);
        item.setDefault( std::string("BHP") );
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("FLOW_VALUES", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("THP_VALUES", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("THP_INDEX", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("VALUES", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string VFPINJ::keywordName = "VFPINJ";
const std::string VFPINJ::TABLE::itemName = "TABLE";
const std::string VFPINJ::DATUM_DEPTH::itemName = "DATUM_DEPTH";
const std::string VFPINJ::RATE_TYPE::itemName = "RATE_TYPE";
const std::string VFPINJ::PRESSURE_DEF::itemName = "PRESSURE_DEF";
const std::string VFPINJ::PRESSURE_DEF::defaultValue = "THP";
const std::string VFPINJ::UNITS::itemName = "UNITS";
const std::string VFPINJ::BODY_DEF::itemName = "BODY_DEF";
const std::string VFPINJ::BODY_DEF::defaultValue = "BHP";
const std::string VFPINJ::FLOW_VALUES::itemName = "FLOW_VALUES";
const std::string VFPINJ::THP_VALUES::itemName = "THP_VALUES";
const std::string VFPINJ::THP_INDEX::itemName = "THP_INDEX";
const std::string VFPINJ::VALUES::itemName = "VALUES";


VFPPDIMS::VFPPDIMS( ) : ParserKeyword("VFPPDIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("VFPPDIMS");
  {
     ParserRecord record;
     {
        ParserItem item("MAX_FLOW_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_THP_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_WCT_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_GCT_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_ALQ_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_PROD_VFP_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string VFPPDIMS::keywordName = "VFPPDIMS";
const std::string VFPPDIMS::MAX_FLOW_TABLE::itemName = "MAX_FLOW_TABLE";
const int VFPPDIMS::MAX_FLOW_TABLE::defaultValue = 0;
const std::string VFPPDIMS::MAX_THP_TABLE::itemName = "MAX_THP_TABLE";
const int VFPPDIMS::MAX_THP_TABLE::defaultValue = 0;
const std::string VFPPDIMS::MAX_WCT_TABLE::itemName = "MAX_WCT_TABLE";
const int VFPPDIMS::MAX_WCT_TABLE::defaultValue = 0;
const std::string VFPPDIMS::MAX_GCT_TABLE::itemName = "MAX_GCT_TABLE";
const int VFPPDIMS::MAX_GCT_TABLE::defaultValue = 0;
const std::string VFPPDIMS::MAX_ALQ_TABLE::itemName = "MAX_ALQ_TABLE";
const int VFPPDIMS::MAX_ALQ_TABLE::defaultValue = 0;
const std::string VFPPDIMS::MAX_PROD_VFP_TABLE::itemName = "MAX_PROD_VFP_TABLE";
const int VFPPDIMS::MAX_PROD_VFP_TABLE::defaultValue = 0;


VFPPROD::VFPPROD( ) : ParserKeyword("VFPPROD")
{
  setSizeType(UNKNOWN);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("VFPPROD");
  {
     ParserRecord record;
     {
        ParserItem item("TABLE", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("DATUM_DEPTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("RATE_TYPE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("WFR", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("GFR", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("PRESSURE_DEF", ParserItem::itype::STRING);
        item.setDefault( std::string("THP") );
        record.addItem(item);
     }
     {
        ParserItem item("ALQ_DEF", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("UNITS", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("BODY_DEF", ParserItem::itype::STRING);
        item.setDefault( std::string("BHP") );
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("FLOW_VALUES", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("THP_VALUES", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("WFR_VALUES", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("GFR_VALUES", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("ALQ_VALUES", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("THP_INDEX", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("WFR_INDEX", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("GFR_INDEX", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("ALQ_INDEX", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("VALUES", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string VFPPROD::keywordName = "VFPPROD";
const std::string VFPPROD::TABLE::itemName = "TABLE";
const std::string VFPPROD::DATUM_DEPTH::itemName = "DATUM_DEPTH";
const std::string VFPPROD::RATE_TYPE::itemName = "RATE_TYPE";
const std::string VFPPROD::WFR::itemName = "WFR";
const std::string VFPPROD::GFR::itemName = "GFR";
const std::string VFPPROD::PRESSURE_DEF::itemName = "PRESSURE_DEF";
const std::string VFPPROD::PRESSURE_DEF::defaultValue = "THP";
const std::string VFPPROD::ALQ_DEF::itemName = "ALQ_DEF";
const std::string VFPPROD::UNITS::itemName = "UNITS";
const std::string VFPPROD::BODY_DEF::itemName = "BODY_DEF";
const std::string VFPPROD::BODY_DEF::defaultValue = "BHP";
const std::string VFPPROD::FLOW_VALUES::itemName = "FLOW_VALUES";
const std::string VFPPROD::THP_VALUES::itemName = "THP_VALUES";
const std::string VFPPROD::WFR_VALUES::itemName = "WFR_VALUES";
const std::string VFPPROD::GFR_VALUES::itemName = "GFR_VALUES";
const std::string VFPPROD::ALQ_VALUES::itemName = "ALQ_VALUES";
const std::string VFPPROD::THP_INDEX::itemName = "THP_INDEX";
const std::string VFPPROD::WFR_INDEX::itemName = "WFR_INDEX";
const std::string VFPPROD::GFR_INDEX::itemName = "GFR_INDEX";
const std::string VFPPROD::ALQ_INDEX::itemName = "ALQ_INDEX";
const std::string VFPPROD::VALUES::itemName = "VALUES";


VFPTABL::VFPTABL( ) : ParserKeyword("VFPTABL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("VFPTABL");
  {
     ParserRecord record;
     {
        ParserItem item("METHOD", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string VFPTABL::keywordName = "VFPTABL";
const std::string VFPTABL::METHOD::itemName = "METHOD";


VISAGE::VISAGE( ) : ParserKeyword("VISAGE")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("VISAGE");
}
const std::string VISAGE::keywordName = "VISAGE";


VISCD::VISCD( ) : ParserKeyword("VISCD")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("VISCD");
}
const std::string VISCD::keywordName = "VISCD";


VISCREF::VISCREF( ) : ParserKeyword("VISCREF")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("VISCREF");
  {
     ParserRecord record;
     {
        ParserItem item("REFERENCE_PRESSURE", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("REFERENCE_RS", ParserItem::itype::DOUBLE);
        item.push_backDimension("GasDissolutionFactor");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string VISCREF::keywordName = "VISCREF";
const std::string VISCREF::REFERENCE_PRESSURE::itemName = "REFERENCE_PRESSURE";
const std::string VISCREF::REFERENCE_RS::itemName = "REFERENCE_RS";


VISDATES::VISDATES( ) : ParserKeyword("VISDATES")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("VISDATES");
  {
     ParserRecord record;
     {
        ParserItem item("DAY", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("MONTH", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("YEAR", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("TIMESTAMP", ParserItem::itype::STRING);
        item.setDefault( std::string("00:00:00") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string VISDATES::keywordName = "VISDATES";
const std::string VISDATES::DAY::itemName = "DAY";
const std::string VISDATES::MONTH::itemName = "MONTH";
const std::string VISDATES::YEAR::itemName = "YEAR";
const std::string VISDATES::TIMESTAMP::itemName = "TIMESTAMP";
const std::string VISDATES::TIMESTAMP::defaultValue = "00:00:00";


VISOPTS::VISOPTS( ) : ParserKeyword("VISOPTS")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SOLUTION");
  clearDeckNames();
  addDeckName("VISOPTS");
  {
     ParserRecord record;
     {
        ParserItem item("INIT_RUN", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("EXIT", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("ACTIVE", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("REL_TOL", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.050000) );
        record.addItem(item);
     }
     {
        ParserItem item("UNUSED", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("RETAIN_RESTART_FREQUENCY", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("RETAIN_RESTART_CONTENT", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("ERROR", ParserItem::itype::STRING);
        item.setDefault( std::string("ERROR") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string VISOPTS::keywordName = "VISOPTS";
const std::string VISOPTS::INIT_RUN::itemName = "INIT_RUN";
const std::string VISOPTS::INIT_RUN::defaultValue = "NO";
const std::string VISOPTS::EXIT::itemName = "EXIT";
const std::string VISOPTS::EXIT::defaultValue = "NO";
const std::string VISOPTS::ACTIVE::itemName = "ACTIVE";
const std::string VISOPTS::ACTIVE::defaultValue = "NO";
const std::string VISOPTS::REL_TOL::itemName = "REL_TOL";
const double VISOPTS::REL_TOL::defaultValue = 0.050000;
const std::string VISOPTS::UNUSED::itemName = "UNUSED";
const std::string VISOPTS::RETAIN_RESTART_FREQUENCY::itemName = "RETAIN_RESTART_FREQUENCY";
const std::string VISOPTS::RETAIN_RESTART_FREQUENCY::defaultValue = "NO";
const std::string VISOPTS::RETAIN_RESTART_CONTENT::itemName = "RETAIN_RESTART_CONTENT";
const std::string VISOPTS::RETAIN_RESTART_CONTENT::defaultValue = "NO";
const std::string VISOPTS::ERROR::itemName = "ERROR";
const std::string VISOPTS::ERROR::defaultValue = "ERROR";


WAGHYSTR::WAGHYSTR( ) : ParserKeyword("WAGHYSTR")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTSFUN",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("WAGHYSTR");
  {
     ParserRecord record;
     {
        ParserItem item("LANDS_PARAMETER", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("SECONDARY_DRAINAGE_REDUCTION", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("GAS_MODEL", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     {
        ParserItem item("RES_OIL", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     {
        ParserItem item("WATER_MODEL", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     {
        ParserItem item("IMB_LINEAR_FRACTION", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.100000) );
        record.addItem(item);
     }
     {
        ParserItem item("THREEPHASE_SAT_LIMIT", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.001000) );
        record.addItem(item);
     }
     {
        ParserItem item("RES_OIL_MOD_FRACTION", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WAGHYSTR::keywordName = "WAGHYSTR";
const std::string WAGHYSTR::LANDS_PARAMETER::itemName = "LANDS_PARAMETER";
const std::string WAGHYSTR::SECONDARY_DRAINAGE_REDUCTION::itemName = "SECONDARY_DRAINAGE_REDUCTION";
const double WAGHYSTR::SECONDARY_DRAINAGE_REDUCTION::defaultValue = 0.000000;
const std::string WAGHYSTR::GAS_MODEL::itemName = "GAS_MODEL";
const std::string WAGHYSTR::GAS_MODEL::defaultValue = "YES";
const std::string WAGHYSTR::RES_OIL::itemName = "RES_OIL";
const std::string WAGHYSTR::RES_OIL::defaultValue = "YES";
const std::string WAGHYSTR::WATER_MODEL::itemName = "WATER_MODEL";
const std::string WAGHYSTR::WATER_MODEL::defaultValue = "YES";
const std::string WAGHYSTR::IMB_LINEAR_FRACTION::itemName = "IMB_LINEAR_FRACTION";
const double WAGHYSTR::IMB_LINEAR_FRACTION::defaultValue = 0.100000;
const std::string WAGHYSTR::THREEPHASE_SAT_LIMIT::itemName = "THREEPHASE_SAT_LIMIT";
const double WAGHYSTR::THREEPHASE_SAT_LIMIT::defaultValue = 0.001000;
const std::string WAGHYSTR::RES_OIL_MOD_FRACTION::itemName = "RES_OIL_MOD_FRACTION";
const double WAGHYSTR::RES_OIL_MOD_FRACTION::defaultValue = 1.000000;


WAITBAL::WAITBAL( ) : ParserKeyword("WAITBAL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WAITBAL");
  {
     ParserRecord record;
     {
        ParserItem item("WAIT_NETWORK_BALANCE", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WAITBAL::keywordName = "WAITBAL";
const std::string WAITBAL::WAIT_NETWORK_BALANCE::itemName = "WAIT_NETWORK_BALANCE";
const std::string WAITBAL::WAIT_NETWORK_BALANCE::defaultValue = "NO";


WALKALIN::WALKALIN( ) : ParserKeyword("WALKALIN")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WALKALIN");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("ALKALINE_CONCENTRAION", ParserItem::itype::UDA);
        item.push_backDimension("Mass/LiquidSurfaceVolume");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WALKALIN::keywordName = "WALKALIN";
const std::string WALKALIN::WELL::itemName = "WELL";
const std::string WALKALIN::ALKALINE_CONCENTRAION::itemName = "ALKALINE_CONCENTRAION";


WALQCALC::WALQCALC( ) : ParserKeyword("WALQCALC")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WALQCALC");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("ALQ_DEF", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WALQCALC::keywordName = "WALQCALC";
const std::string WALQCALC::WELL::itemName = "WELL";
const std::string WALQCALC::ALQ_DEF::itemName = "ALQ_DEF";
const std::string WALQCALC::ALQ_DEF::defaultValue = "NONE";


WAPI::WAPI( ) : ParserKeyword("WAPI")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WAPI");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("API", ParserItem::itype::UDA);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WAPI::keywordName = "WAPI";
const std::string WAPI::WELL::itemName = "WELL";
const std::string WAPI::API::itemName = "API";


WARN::WARN( ) : ParserKeyword("WARN")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("EDIT");
  addValidSectionName("GRID");
  addValidSectionName("PROPS");
  addValidSectionName("REGIONS");
  addValidSectionName("RUNSPEC");
  addValidSectionName("SCHEDULE");
  addValidSectionName("SOLUTION");
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("WARN");
}
const std::string WARN::keywordName = "WARN";


WATDENT::WATDENT( ) : ParserKeyword("WATDENT")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("WATDENT");
  {
     ParserRecord record;
     {
        ParserItem item("REFERENCE_TEMPERATURE", ParserItem::itype::DOUBLE);
        item.setDefault( double(293.150000) );
        item.push_backDimension("AbsoluteTemperature");
        record.addItem(item);
     }
     {
        ParserItem item("EXPANSION_COEFF_LINEAR", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.000300) );
        item.push_backDimension("1/AbsoluteTemperature");
        record.addItem(item);
     }
     {
        ParserItem item("EXPANSION_COEFF_QUADRATIC", ParserItem::itype::DOUBLE);
        item.setDefault( double(3e-06) );
        item.push_backDimension("1/AbsoluteTemperature*AbsoluteTemperature");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WATDENT::keywordName = "WATDENT";
const std::string WATDENT::REFERENCE_TEMPERATURE::itemName = "REFERENCE_TEMPERATURE";
const double WATDENT::REFERENCE_TEMPERATURE::defaultValue = 293.150000;
const std::string WATDENT::EXPANSION_COEFF_LINEAR::itemName = "EXPANSION_COEFF_LINEAR";
const double WATDENT::EXPANSION_COEFF_LINEAR::defaultValue = 0.000300;
const std::string WATDENT::EXPANSION_COEFF_QUADRATIC::itemName = "EXPANSION_COEFF_QUADRATIC";
const double WATDENT::EXPANSION_COEFF_QUADRATIC::defaultValue = 0.000003;


WATER::WATER( ) : ParserKeyword("WATER")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("WATER");
}
const std::string WATER::keywordName = "WATER";


WATVISCT::WATVISCT( ) : ParserKeyword("WATVISCT")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NTPVT",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("WATVISCT");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Temperature");
        item.push_backDimension("Viscosity");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WATVISCT::keywordName = "WATVISCT";
const std::string WATVISCT::DATA::itemName = "DATA";


WBHGLR::WBHGLR( ) : ParserKeyword("WBHGLR")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WBHGLR");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("MAX_GLR_CUTBACK", ParserItem::itype::DOUBLE);
        item.setDefault( double(100000000000000000000.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("MIN_GLR_CUTBACK_REVERSE", ParserItem::itype::DOUBLE);
        item.setDefault( double(100000000000000000000.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("RATE_CUTBACK_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("PHASE", ParserItem::itype::STRING);
        item.setDefault( std::string("RESV") );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_GLR_ELIMIT", ParserItem::itype::DOUBLE);
        item.setDefault( double(100000000000000000000.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("WORKOVER_ACTION", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     {
        ParserItem item("WORKOVER_REMOVE_CUTBACKS", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WBHGLR::keywordName = "WBHGLR";
const std::string WBHGLR::WELL::itemName = "WELL";
const std::string WBHGLR::MAX_GLR_CUTBACK::itemName = "MAX_GLR_CUTBACK";
const double WBHGLR::MAX_GLR_CUTBACK::defaultValue = 100000000000000000000.000000;
const std::string WBHGLR::MIN_GLR_CUTBACK_REVERSE::itemName = "MIN_GLR_CUTBACK_REVERSE";
const double WBHGLR::MIN_GLR_CUTBACK_REVERSE::defaultValue = 100000000000000000000.000000;
const std::string WBHGLR::RATE_CUTBACK_FACTOR::itemName = "RATE_CUTBACK_FACTOR";
const double WBHGLR::RATE_CUTBACK_FACTOR::defaultValue = 1.000000;
const std::string WBHGLR::PHASE::itemName = "PHASE";
const std::string WBHGLR::PHASE::defaultValue = "RESV";
const std::string WBHGLR::MAX_GLR_ELIMIT::itemName = "MAX_GLR_ELIMIT";
const double WBHGLR::MAX_GLR_ELIMIT::defaultValue = 100000000000000000000.000000;
const std::string WBHGLR::WORKOVER_ACTION::itemName = "WORKOVER_ACTION";
const std::string WBHGLR::WORKOVER_ACTION::defaultValue = "NONE";
const std::string WBHGLR::WORKOVER_REMOVE_CUTBACKS::itemName = "WORKOVER_REMOVE_CUTBACKS";
const std::string WBHGLR::WORKOVER_REMOVE_CUTBACKS::defaultValue = "NO";


WBOREVOL::WBOREVOL( ) : ParserKeyword("WBOREVOL")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WBOREVOL");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("WELLBORE_VOL", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-05) );
        item.push_backDimension("Length*Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("START_BHP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WBOREVOL::keywordName = "WBOREVOL";
const std::string WBOREVOL::WELL::itemName = "WELL";
const std::string WBOREVOL::WELLBORE_VOL::itemName = "WELLBORE_VOL";
const double WBOREVOL::WELLBORE_VOL::defaultValue = 0.000010;
const std::string WBOREVOL::START_BHP::itemName = "START_BHP";


WCALCVAL::WCALCVAL( ) : ParserKeyword("WCALCVAL")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WCALCVAL");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("CALORIFIC_GAS_VALUE", ParserItem::itype::DOUBLE);
        item.push_backDimension("Energy/GasSurfaceVolume");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WCALCVAL::keywordName = "WCALCVAL";
const std::string WCALCVAL::WELL::itemName = "WELL";
const std::string WCALCVAL::CALORIFIC_GAS_VALUE::itemName = "CALORIFIC_GAS_VALUE";


WCONHIST::WCONHIST( ) : ParserKeyword("WCONHIST")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WCONHIST");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("STATUS", ParserItem::itype::STRING);
        item.setDefault( std::string("OPEN") );
        record.addItem(item);
     }
     {
        ParserItem item("CMODE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("ORAT", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        item.push_backDimension("LiquidSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("WRAT", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        item.push_backDimension("LiquidSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("GRAT", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        item.push_backDimension("GasSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("VFPTable", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("Lift", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("THP", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("BHP", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("NGLRAT", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("LiquidSurfaceVolume/Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WCONHIST::keywordName = "WCONHIST";
const std::string WCONHIST::WELL::itemName = "WELL";
const std::string WCONHIST::STATUS::itemName = "STATUS";
const std::string WCONHIST::STATUS::defaultValue = "OPEN";
const std::string WCONHIST::CMODE::itemName = "CMODE";
const std::string WCONHIST::ORAT::itemName = "ORAT";
const UDAValue WCONHIST::ORAT::defaultValue = UDAValue(0.000000);
const std::string WCONHIST::WRAT::itemName = "WRAT";
const UDAValue WCONHIST::WRAT::defaultValue = UDAValue(0.000000);
const std::string WCONHIST::GRAT::itemName = "GRAT";
const UDAValue WCONHIST::GRAT::defaultValue = UDAValue(0.000000);
const std::string WCONHIST::VFPTable::itemName = "VFPTable";
const int WCONHIST::VFPTable::defaultValue = 0;
const std::string WCONHIST::Lift::itemName = "Lift";
const double WCONHIST::Lift::defaultValue = 0.000000;
const std::string WCONHIST::THP::itemName = "THP";
const UDAValue WCONHIST::THP::defaultValue = UDAValue(0.000000);
const std::string WCONHIST::BHP::itemName = "BHP";
const UDAValue WCONHIST::BHP::defaultValue = UDAValue(0.000000);
const std::string WCONHIST::NGLRAT::itemName = "NGLRAT";
const double WCONHIST::NGLRAT::defaultValue = 0.000000;


WCONINJ::WCONINJ( ) : ParserKeyword("WCONINJ")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WCONINJ");
}
const std::string WCONINJ::keywordName = "WCONINJ";


WCONINJE::WCONINJE( ) : ParserKeyword("WCONINJE")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WCONINJE");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TYPE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("STATUS", ParserItem::itype::STRING);
        item.setDefault( std::string("OPEN") );
        record.addItem(item);
     }
     {
        ParserItem item("CMODE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("RATE", ParserItem::itype::UDA);
        record.addItem(item);
     }
     {
        ParserItem item("RESV", ParserItem::itype::UDA);
        item.push_backDimension("ReservoirVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("BHP", ParserItem::itype::UDA);
        item.setDefault( UDAValue(6895.000000) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("THP", ParserItem::itype::UDA);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("VFP_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("VAPOIL_C", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("GAS_STEAM_RATIO", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("SURFACE_OIL_FRACTION", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("SURFACE_WATER_FRACTION", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("SURFACE_GAS_FRACTION", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("OIL_STEAM_RATIO", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WCONINJE::keywordName = "WCONINJE";
const std::string WCONINJE::WELL::itemName = "WELL";
const std::string WCONINJE::TYPE::itemName = "TYPE";
const std::string WCONINJE::STATUS::itemName = "STATUS";
const std::string WCONINJE::STATUS::defaultValue = "OPEN";
const std::string WCONINJE::CMODE::itemName = "CMODE";
const std::string WCONINJE::RATE::itemName = "RATE";
const std::string WCONINJE::RESV::itemName = "RESV";
const std::string WCONINJE::BHP::itemName = "BHP";
const UDAValue WCONINJE::BHP::defaultValue = UDAValue(6895.000000);
const std::string WCONINJE::THP::itemName = "THP";
const std::string WCONINJE::VFP_TABLE::itemName = "VFP_TABLE";
const int WCONINJE::VFP_TABLE::defaultValue = 0;
const std::string WCONINJE::VAPOIL_C::itemName = "VAPOIL_C";
const double WCONINJE::VAPOIL_C::defaultValue = 0.000000;
const std::string WCONINJE::GAS_STEAM_RATIO::itemName = "GAS_STEAM_RATIO";
const double WCONINJE::GAS_STEAM_RATIO::defaultValue = 0.000000;
const std::string WCONINJE::SURFACE_OIL_FRACTION::itemName = "SURFACE_OIL_FRACTION";
const double WCONINJE::SURFACE_OIL_FRACTION::defaultValue = 0.000000;
const std::string WCONINJE::SURFACE_WATER_FRACTION::itemName = "SURFACE_WATER_FRACTION";
const double WCONINJE::SURFACE_WATER_FRACTION::defaultValue = 0.000000;
const std::string WCONINJE::SURFACE_GAS_FRACTION::itemName = "SURFACE_GAS_FRACTION";
const double WCONINJE::SURFACE_GAS_FRACTION::defaultValue = 0.000000;
const std::string WCONINJE::OIL_STEAM_RATIO::itemName = "OIL_STEAM_RATIO";
const double WCONINJE::OIL_STEAM_RATIO::defaultValue = 0.000000;


WCONINJH::WCONINJH( ) : ParserKeyword("WCONINJH")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WCONINJH");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TYPE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("STATUS", ParserItem::itype::STRING);
        item.setDefault( std::string("OPEN") );
        record.addItem(item);
     }
     {
        ParserItem item("RATE", ParserItem::itype::DOUBLE);
        item.push_backDimension("ContextDependent");
        record.addItem(item);
     }
     {
        ParserItem item("BHP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("THP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("VFP_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("VAPOIL_C", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("SURFACE_OIL_FRACTION", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("SURFACE_WATER_FRACTION", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("SURFACE_GAS_FRACTION", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("CMODE", ParserItem::itype::STRING);
        item.setDefault( std::string("RATE") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WCONINJH::keywordName = "WCONINJH";
const std::string WCONINJH::WELL::itemName = "WELL";
const std::string WCONINJH::TYPE::itemName = "TYPE";
const std::string WCONINJH::STATUS::itemName = "STATUS";
const std::string WCONINJH::STATUS::defaultValue = "OPEN";
const std::string WCONINJH::RATE::itemName = "RATE";
const std::string WCONINJH::BHP::itemName = "BHP";
const std::string WCONINJH::THP::itemName = "THP";
const std::string WCONINJH::VFP_TABLE::itemName = "VFP_TABLE";
const int WCONINJH::VFP_TABLE::defaultValue = 0;
const std::string WCONINJH::VAPOIL_C::itemName = "VAPOIL_C";
const double WCONINJH::VAPOIL_C::defaultValue = 0.000000;
const std::string WCONINJH::SURFACE_OIL_FRACTION::itemName = "SURFACE_OIL_FRACTION";
const double WCONINJH::SURFACE_OIL_FRACTION::defaultValue = 0.000000;
const std::string WCONINJH::SURFACE_WATER_FRACTION::itemName = "SURFACE_WATER_FRACTION";
const double WCONINJH::SURFACE_WATER_FRACTION::defaultValue = 0.000000;
const std::string WCONINJH::SURFACE_GAS_FRACTION::itemName = "SURFACE_GAS_FRACTION";
const double WCONINJH::SURFACE_GAS_FRACTION::defaultValue = 0.000000;
const std::string WCONINJH::CMODE::itemName = "CMODE";
const std::string WCONINJH::CMODE::defaultValue = "RATE";


WCONINJP::WCONINJP( ) : ParserKeyword("WCONINJP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WCONINJP");
  {
     ParserRecord record;
     {
        ParserItem item("PATTERN_WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("INJECTOR_TYPE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("STATUS", ParserItem::itype::STRING);
        item.setDefault( std::string("OPEN") );
        record.addItem(item);
     }
     {
        ParserItem item("BHP_MAX", ParserItem::itype::DOUBLE);
        item.setDefault( double(6895.000000) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("THP_MAX", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("VFP_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("VOIDAGE_TARGET_MULTIPLIER", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("OIL_FRACTION", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("WATER_FRACTION", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("GAS_FRACTION", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("PROD_FRACTION", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("FIPNUM_VALUE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WCONINJP::keywordName = "WCONINJP";
const std::string WCONINJP::PATTERN_WELL::itemName = "PATTERN_WELL";
const std::string WCONINJP::INJECTOR_TYPE::itemName = "INJECTOR_TYPE";
const std::string WCONINJP::STATUS::itemName = "STATUS";
const std::string WCONINJP::STATUS::defaultValue = "OPEN";
const std::string WCONINJP::BHP_MAX::itemName = "BHP_MAX";
const double WCONINJP::BHP_MAX::defaultValue = 6895.000000;
const std::string WCONINJP::THP_MAX::itemName = "THP_MAX";
const std::string WCONINJP::VFP_TABLE::itemName = "VFP_TABLE";
const int WCONINJP::VFP_TABLE::defaultValue = 0;
const std::string WCONINJP::VOIDAGE_TARGET_MULTIPLIER::itemName = "VOIDAGE_TARGET_MULTIPLIER";
const double WCONINJP::VOIDAGE_TARGET_MULTIPLIER::defaultValue = 1.000000;
const std::string WCONINJP::OIL_FRACTION::itemName = "OIL_FRACTION";
const double WCONINJP::OIL_FRACTION::defaultValue = 0.000000;
const std::string WCONINJP::WATER_FRACTION::itemName = "WATER_FRACTION";
const double WCONINJP::WATER_FRACTION::defaultValue = 0.000000;
const std::string WCONINJP::GAS_FRACTION::itemName = "GAS_FRACTION";
const double WCONINJP::GAS_FRACTION::defaultValue = 0.000000;
const std::string WCONINJP::WELL::itemName = "WELL";
const std::string WCONINJP::PROD_FRACTION::itemName = "PROD_FRACTION";
const std::string WCONINJP::FIPNUM_VALUE::itemName = "FIPNUM_VALUE";
const int WCONINJP::FIPNUM_VALUE::defaultValue = 0;


WCONPROD::WCONPROD( ) : ParserKeyword("WCONPROD")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WCONPROD");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("STATUS", ParserItem::itype::STRING);
        item.setDefault( std::string("OPEN") );
        record.addItem(item);
     }
     {
        ParserItem item("CMODE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("ORAT", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        item.push_backDimension("LiquidSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("WRAT", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        item.push_backDimension("LiquidSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("GRAT", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        item.push_backDimension("GasSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("LRAT", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        item.push_backDimension("LiquidSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("RESV", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        item.push_backDimension("LiquidSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("BHP", ParserItem::itype::UDA);
        item.setDefault( UDAValue(1.013250) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("THP", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("VFP_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("ALQ", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("E300_ITEM13", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("E300_ITEM14", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("E300_ITEM15", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("E300_ITEM16", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("E300_ITEM17", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("E300_ITEM18", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("E300_ITEM19", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("E300_ITEM20", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WCONPROD::keywordName = "WCONPROD";
const std::string WCONPROD::WELL::itemName = "WELL";
const std::string WCONPROD::STATUS::itemName = "STATUS";
const std::string WCONPROD::STATUS::defaultValue = "OPEN";
const std::string WCONPROD::CMODE::itemName = "CMODE";
const std::string WCONPROD::ORAT::itemName = "ORAT";
const UDAValue WCONPROD::ORAT::defaultValue = UDAValue(0.000000);
const std::string WCONPROD::WRAT::itemName = "WRAT";
const UDAValue WCONPROD::WRAT::defaultValue = UDAValue(0.000000);
const std::string WCONPROD::GRAT::itemName = "GRAT";
const UDAValue WCONPROD::GRAT::defaultValue = UDAValue(0.000000);
const std::string WCONPROD::LRAT::itemName = "LRAT";
const UDAValue WCONPROD::LRAT::defaultValue = UDAValue(0.000000);
const std::string WCONPROD::RESV::itemName = "RESV";
const UDAValue WCONPROD::RESV::defaultValue = UDAValue(0.000000);
const std::string WCONPROD::BHP::itemName = "BHP";
const UDAValue WCONPROD::BHP::defaultValue = UDAValue(1.013250);
const std::string WCONPROD::THP::itemName = "THP";
const UDAValue WCONPROD::THP::defaultValue = UDAValue(0.000000);
const std::string WCONPROD::VFP_TABLE::itemName = "VFP_TABLE";
const int WCONPROD::VFP_TABLE::defaultValue = 0;
const std::string WCONPROD::ALQ::itemName = "ALQ";
const double WCONPROD::ALQ::defaultValue = 0.000000;
const std::string WCONPROD::E300_ITEM13::itemName = "E300_ITEM13";
const std::string WCONPROD::E300_ITEM14::itemName = "E300_ITEM14";
const std::string WCONPROD::E300_ITEM15::itemName = "E300_ITEM15";
const std::string WCONPROD::E300_ITEM16::itemName = "E300_ITEM16";
const std::string WCONPROD::E300_ITEM17::itemName = "E300_ITEM17";
const std::string WCONPROD::E300_ITEM18::itemName = "E300_ITEM18";
const std::string WCONPROD::E300_ITEM19::itemName = "E300_ITEM19";
const std::string WCONPROD::E300_ITEM20::itemName = "E300_ITEM20";


WCUTBACK::WCUTBACK( ) : ParserKeyword("WCUTBACK")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WCUTBACK");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("WCT_LIMIT", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("GOR_LIMIT", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("WGR_LIMIT", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("RATE_CUTBACK", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("PHASE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("PRESSURE_LIMIT", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("PRESSURE_LIMIT_REVERSE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("WCT_LIMIT_REVERSE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("GOR_LIMIT_REVERSE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("GLR_LIMIT_REVERSE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("WGR_LIMIT_REVERSE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("WORKOVER_REMOVE", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WCUTBACK::keywordName = "WCUTBACK";
const std::string WCUTBACK::WELL::itemName = "WELL";
const std::string WCUTBACK::WCT_LIMIT::itemName = "WCT_LIMIT";
const std::string WCUTBACK::GOR_LIMIT::itemName = "GOR_LIMIT";
const std::string WCUTBACK::WGR_LIMIT::itemName = "WGR_LIMIT";
const std::string WCUTBACK::RATE_CUTBACK::itemName = "RATE_CUTBACK";
const double WCUTBACK::RATE_CUTBACK::defaultValue = 1.000000;
const std::string WCUTBACK::PHASE::itemName = "PHASE";
const std::string WCUTBACK::PRESSURE_LIMIT::itemName = "PRESSURE_LIMIT";
const double WCUTBACK::PRESSURE_LIMIT::defaultValue = 0.000000;
const std::string WCUTBACK::PRESSURE_LIMIT_REVERSE::itemName = "PRESSURE_LIMIT_REVERSE";
const double WCUTBACK::PRESSURE_LIMIT_REVERSE::defaultValue = 0.000000;
const std::string WCUTBACK::WCT_LIMIT_REVERSE::itemName = "WCT_LIMIT_REVERSE";
const double WCUTBACK::WCT_LIMIT_REVERSE::defaultValue = 0.000000;
const std::string WCUTBACK::GOR_LIMIT_REVERSE::itemName = "GOR_LIMIT_REVERSE";
const double WCUTBACK::GOR_LIMIT_REVERSE::defaultValue = 0.000000;
const std::string WCUTBACK::GLR_LIMIT_REVERSE::itemName = "GLR_LIMIT_REVERSE";
const double WCUTBACK::GLR_LIMIT_REVERSE::defaultValue = 0.000000;
const std::string WCUTBACK::WGR_LIMIT_REVERSE::itemName = "WGR_LIMIT_REVERSE";
const double WCUTBACK::WGR_LIMIT_REVERSE::defaultValue = 0.000000;
const std::string WCUTBACK::WORKOVER_REMOVE::itemName = "WORKOVER_REMOVE";
const std::string WCUTBACK::WORKOVER_REMOVE::defaultValue = "NO";


WCUTBACT::WCUTBACT( ) : ParserKeyword("WCUTBACT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WCUTBACT");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("RATE_CUTBACK", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("PHASE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("WORKOVER_REMOVE", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WCUTBACT::keywordName = "WCUTBACT";
const std::string WCUTBACT::WELL::itemName = "WELL";
const std::string WCUTBACT::RATE_CUTBACK::itemName = "RATE_CUTBACK";
const double WCUTBACT::RATE_CUTBACK::defaultValue = 1.000000;
const std::string WCUTBACT::PHASE::itemName = "PHASE";
const std::string WCUTBACT::WORKOVER_REMOVE::itemName = "WORKOVER_REMOVE";
const std::string WCUTBACT::WORKOVER_REMOVE::defaultValue = "NO";


WCYCLE::WCYCLE( ) : ParserKeyword("WCYCLE")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WCYCLE");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("ON_TIME", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("OFF_TIME", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("START_TIME", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("MAX_TIMESTEP", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("CONTROLLED_TIMESTEP", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WCYCLE::keywordName = "WCYCLE";
const std::string WCYCLE::WELL::itemName = "WELL";
const std::string WCYCLE::ON_TIME::itemName = "ON_TIME";
const double WCYCLE::ON_TIME::defaultValue = 0.000000;
const std::string WCYCLE::OFF_TIME::itemName = "OFF_TIME";
const double WCYCLE::OFF_TIME::defaultValue = 0.000000;
const std::string WCYCLE::START_TIME::itemName = "START_TIME";
const double WCYCLE::START_TIME::defaultValue = 0.000000;
const std::string WCYCLE::MAX_TIMESTEP::itemName = "MAX_TIMESTEP";
const double WCYCLE::MAX_TIMESTEP::defaultValue = 0.000000;
const std::string WCYCLE::CONTROLLED_TIMESTEP::itemName = "CONTROLLED_TIMESTEP";
const std::string WCYCLE::CONTROLLED_TIMESTEP::defaultValue = "NO";


WDFAC::WDFAC( ) : ParserKeyword("WDFAC")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WDFAC");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("DFACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Time/GasSurfaceVolume");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WDFAC::keywordName = "WDFAC";
const std::string WDFAC::WELL::itemName = "WELL";
const std::string WDFAC::DFACTOR::itemName = "DFACTOR";
const double WDFAC::DFACTOR::defaultValue = 0.000000;


WDFACCOR::WDFACCOR( ) : ParserKeyword("WDFACCOR")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WDFACCOR");
  {
     ParserRecord record;
     {
        ParserItem item("WELLNAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("A", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("B", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("C", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WDFACCOR::keywordName = "WDFACCOR";
const std::string WDFACCOR::WELLNAME::itemName = "WELLNAME";
const std::string WDFACCOR::A::itemName = "A";
const double WDFACCOR::A::defaultValue = 0.000000;
const std::string WDFACCOR::B::itemName = "B";
const double WDFACCOR::B::defaultValue = 0.000000;
const std::string WDFACCOR::C::itemName = "C";
const double WDFACCOR::C::defaultValue = 0.000000;


WDRILPRI::WDRILPRI( ) : ParserKeyword("WDRILPRI")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WDRILPRI");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("PRIORITY", ParserItem::itype::DOUBLE);
        item.setDefault( double(-1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("DRILLING_UNIT", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WDRILPRI::keywordName = "WDRILPRI";
const std::string WDRILPRI::WELL::itemName = "WELL";
const std::string WDRILPRI::PRIORITY::itemName = "PRIORITY";
const double WDRILPRI::PRIORITY::defaultValue = -1.000000;
const std::string WDRILPRI::DRILLING_UNIT::itemName = "DRILLING_UNIT";
const int WDRILPRI::DRILLING_UNIT::defaultValue = 0;


WDRILRES::WDRILRES( ) : ParserKeyword("WDRILRES")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WDRILRES");
}
const std::string WDRILRES::keywordName = "WDRILRES";


WDRILTIM::WDRILTIM( ) : ParserKeyword("WDRILTIM")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WDRILTIM");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("DRILL_TIME", ParserItem::itype::DOUBLE);
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("WORKOVER_CLOSE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("COMPARTMENT", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WDRILTIM::keywordName = "WDRILTIM";
const std::string WDRILTIM::WELL::itemName = "WELL";
const std::string WDRILTIM::DRILL_TIME::itemName = "DRILL_TIME";
const std::string WDRILTIM::WORKOVER_CLOSE::itemName = "WORKOVER_CLOSE";
const std::string WDRILTIM::COMPARTMENT::itemName = "COMPARTMENT";


WECON::WECON( ) : ParserKeyword("WECON")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WECON");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("MIN_OIL_PRODUCTION", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        item.push_backDimension("LiquidSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("MIN_GAS_PRODUCTION", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        item.push_backDimension("GasSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("MAX_WATER_CUT", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_GAS_OIL_RATIO", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_WATER_GAS_RATIO", ParserItem::itype::UDA);
        item.setDefault( UDAValue(0) );
        record.addItem(item);
     }
     {
        ParserItem item("WORKOVER_RATIO_LIMIT", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     {
        ParserItem item("END_RUN_FLAG", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("FOLLOW_ON_WELL", ParserItem::itype::STRING);
        item.setDefault( std::string("'") );
        record.addItem(item);
     }
     {
        ParserItem item("LIMITED_QUANTITY", ParserItem::itype::STRING);
        item.setDefault( std::string("RATE") );
        record.addItem(item);
     }
     {
        ParserItem item("SECOND_MAX_WATER_CUT", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("WORKOVER_SECOND_WATER_CUT_LIMIT", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("MAX_GAS_LIQUID_RATIO", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("MIN_LIQUID_PRODCUTION_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("LiquidSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("MAX_TEMP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Temperature");
        record.addItem(item);
     }
     {
        ParserItem item("MIN_RES_FLUID_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("ReservoirVolume/Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WECON::keywordName = "WECON";
const std::string WECON::WELL::itemName = "WELL";
const std::string WECON::MIN_OIL_PRODUCTION::itemName = "MIN_OIL_PRODUCTION";
const UDAValue WECON::MIN_OIL_PRODUCTION::defaultValue = UDAValue(0.000000);
const std::string WECON::MIN_GAS_PRODUCTION::itemName = "MIN_GAS_PRODUCTION";
const UDAValue WECON::MIN_GAS_PRODUCTION::defaultValue = UDAValue(0.000000);
const std::string WECON::MAX_WATER_CUT::itemName = "MAX_WATER_CUT";
const UDAValue WECON::MAX_WATER_CUT::defaultValue = UDAValue(0.000000);
const std::string WECON::MAX_GAS_OIL_RATIO::itemName = "MAX_GAS_OIL_RATIO";
const UDAValue WECON::MAX_GAS_OIL_RATIO::defaultValue = UDAValue(0.000000);
const std::string WECON::MAX_WATER_GAS_RATIO::itemName = "MAX_WATER_GAS_RATIO";
const UDAValue WECON::MAX_WATER_GAS_RATIO::defaultValue = UDAValue(0.000000);
const std::string WECON::WORKOVER_RATIO_LIMIT::itemName = "WORKOVER_RATIO_LIMIT";
const std::string WECON::WORKOVER_RATIO_LIMIT::defaultValue = "NONE";
const std::string WECON::END_RUN_FLAG::itemName = "END_RUN_FLAG";
const std::string WECON::END_RUN_FLAG::defaultValue = "NO";
const std::string WECON::FOLLOW_ON_WELL::itemName = "FOLLOW_ON_WELL";
const std::string WECON::FOLLOW_ON_WELL::defaultValue = "'";
const std::string WECON::LIMITED_QUANTITY::itemName = "LIMITED_QUANTITY";
const std::string WECON::LIMITED_QUANTITY::defaultValue = "RATE";
const std::string WECON::SECOND_MAX_WATER_CUT::itemName = "SECOND_MAX_WATER_CUT";
const double WECON::SECOND_MAX_WATER_CUT::defaultValue = 0.000000;
const std::string WECON::WORKOVER_SECOND_WATER_CUT_LIMIT::itemName = "WORKOVER_SECOND_WATER_CUT_LIMIT";
const std::string WECON::MAX_GAS_LIQUID_RATIO::itemName = "MAX_GAS_LIQUID_RATIO";
const double WECON::MAX_GAS_LIQUID_RATIO::defaultValue = 0.000000;
const std::string WECON::MIN_LIQUID_PRODCUTION_RATE::itemName = "MIN_LIQUID_PRODCUTION_RATE";
const double WECON::MIN_LIQUID_PRODCUTION_RATE::defaultValue = 0.000000;
const std::string WECON::MAX_TEMP::itemName = "MAX_TEMP";
const std::string WECON::MIN_RES_FLUID_RATE::itemName = "MIN_RES_FLUID_RATE";
const double WECON::MIN_RES_FLUID_RATE::defaultValue = 0.000000;


WECONINJ::WECONINJ( ) : ParserKeyword("WECONINJ")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WECONINJ");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("MIN_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("QUANTITY", ParserItem::itype::STRING);
        item.setDefault( std::string("RATE") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WECONINJ::keywordName = "WECONINJ";
const std::string WECONINJ::WELL::itemName = "WELL";
const std::string WECONINJ::MIN_RATE::itemName = "MIN_RATE";
const double WECONINJ::MIN_RATE::defaultValue = 0.000000;
const std::string WECONINJ::QUANTITY::itemName = "QUANTITY";
const std::string WECONINJ::QUANTITY::defaultValue = "RATE";


WECONT::WECONT( ) : ParserKeyword("WECONT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WECONT");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("WORKOVER", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     {
        ParserItem item("END_RUN_FLAG", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("FOLLOW_ON_WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WECONT::keywordName = "WECONT";
const std::string WECONT::WELL::itemName = "WELL";
const std::string WECONT::WORKOVER::itemName = "WORKOVER";
const std::string WECONT::WORKOVER::defaultValue = "NONE";
const std::string WECONT::END_RUN_FLAG::itemName = "END_RUN_FLAG";
const std::string WECONT::END_RUN_FLAG::defaultValue = "NO";
const std::string WECONT::FOLLOW_ON_WELL::itemName = "FOLLOW_ON_WELL";


WEFAC::WEFAC( ) : ParserKeyword("WEFAC")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WEFAC");
  {
     ParserRecord record;
     {
        ParserItem item("WELLNAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("EFFICIENCY_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("EXTENDED_NETWORK_OPT", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WEFAC::keywordName = "WEFAC";
const std::string WEFAC::WELLNAME::itemName = "WELLNAME";
const std::string WEFAC::EFFICIENCY_FACTOR::itemName = "EFFICIENCY_FACTOR";
const double WEFAC::EFFICIENCY_FACTOR::defaultValue = 1.000000;
const std::string WEFAC::EXTENDED_NETWORK_OPT::itemName = "EXTENDED_NETWORK_OPT";
const std::string WEFAC::EXTENDED_NETWORK_OPT::defaultValue = "YES";


WELCNTL::WELCNTL( ) : ParserKeyword("WELCNTL")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WELCNTL");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("CMODE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("NEW_VALUE", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WELCNTL::keywordName = "WELCNTL";
const std::string WELCNTL::WELL::itemName = "WELL";
const std::string WELCNTL::CMODE::itemName = "CMODE";
const std::string WELCNTL::NEW_VALUE::itemName = "NEW_VALUE";


WELDEBUG::WELDEBUG( ) : ParserKeyword("WELDEBUG")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WELDEBUG");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("DEBUG_FLAG", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WELDEBUG::keywordName = "WELDEBUG";
const std::string WELDEBUG::WELL::itemName = "WELL";
const std::string WELDEBUG::DEBUG_FLAG::itemName = "DEBUG_FLAG";


WELDRAW::WELDRAW( ) : ParserKeyword("WELDRAW")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WELDRAW");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("MAX_DRAW", ParserItem::itype::UDA);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("PHASE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("USE_LIMIT", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("GRID_BLOCKS", ParserItem::itype::STRING);
        item.setDefault( std::string("AVG") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WELDRAW::keywordName = "WELDRAW";
const std::string WELDRAW::WELL::itemName = "WELL";
const std::string WELDRAW::MAX_DRAW::itemName = "MAX_DRAW";
const std::string WELDRAW::PHASE::itemName = "PHASE";
const std::string WELDRAW::USE_LIMIT::itemName = "USE_LIMIT";
const std::string WELDRAW::USE_LIMIT::defaultValue = "NO";
const std::string WELDRAW::GRID_BLOCKS::itemName = "GRID_BLOCKS";
const std::string WELDRAW::GRID_BLOCKS::defaultValue = "AVG";


WELEVNT::WELEVNT( ) : ParserKeyword("WELEVNT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WELEVNT");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("WPWEM_VALUE", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WELEVNT::keywordName = "WELEVNT";
const std::string WELEVNT::WELL::itemName = "WELL";
const std::string WELEVNT::WPWEM_VALUE::itemName = "WPWEM_VALUE";


WELLDIMS::WELLDIMS( ) : ParserKeyword("WELLDIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("WELLDIMS");
  {
     ParserRecord record;
     {
        ParserItem item("MAXWELLS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAXCONN", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAXGROUPS", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_GROUPSIZE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_STAGES", ParserItem::itype::INT);
        item.setDefault( 5 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_STREAMS", ParserItem::itype::INT);
        item.setDefault( 10 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_MIXTURES", ParserItem::itype::INT);
        item.setDefault( 5 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_SEPARATORS", ParserItem::itype::INT);
        item.setDefault( 4 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_MIXTURE_ITEMS", ParserItem::itype::INT);
        item.setDefault( 3 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_COMPLETION_X", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_WELLIST_PR_WELL", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_DYNAMIC_WELLIST", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_SECONDARY_WELLS", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WELLDIMS::keywordName = "WELLDIMS";
const std::string WELLDIMS::MAXWELLS::itemName = "MAXWELLS";
const int WELLDIMS::MAXWELLS::defaultValue = 0;
const std::string WELLDIMS::MAXCONN::itemName = "MAXCONN";
const int WELLDIMS::MAXCONN::defaultValue = 0;
const std::string WELLDIMS::MAXGROUPS::itemName = "MAXGROUPS";
const int WELLDIMS::MAXGROUPS::defaultValue = 0;
const std::string WELLDIMS::MAX_GROUPSIZE::itemName = "MAX_GROUPSIZE";
const int WELLDIMS::MAX_GROUPSIZE::defaultValue = 0;
const std::string WELLDIMS::MAX_STAGES::itemName = "MAX_STAGES";
const int WELLDIMS::MAX_STAGES::defaultValue = 5;
const std::string WELLDIMS::MAX_STREAMS::itemName = "MAX_STREAMS";
const int WELLDIMS::MAX_STREAMS::defaultValue = 10;
const std::string WELLDIMS::MAX_MIXTURES::itemName = "MAX_MIXTURES";
const int WELLDIMS::MAX_MIXTURES::defaultValue = 5;
const std::string WELLDIMS::MAX_SEPARATORS::itemName = "MAX_SEPARATORS";
const int WELLDIMS::MAX_SEPARATORS::defaultValue = 4;
const std::string WELLDIMS::MAX_MIXTURE_ITEMS::itemName = "MAX_MIXTURE_ITEMS";
const int WELLDIMS::MAX_MIXTURE_ITEMS::defaultValue = 3;
const std::string WELLDIMS::MAX_COMPLETION_X::itemName = "MAX_COMPLETION_X";
const int WELLDIMS::MAX_COMPLETION_X::defaultValue = 0;
const std::string WELLDIMS::MAX_WELLIST_PR_WELL::itemName = "MAX_WELLIST_PR_WELL";
const int WELLDIMS::MAX_WELLIST_PR_WELL::defaultValue = 1;
const std::string WELLDIMS::MAX_DYNAMIC_WELLIST::itemName = "MAX_DYNAMIC_WELLIST";
const int WELLDIMS::MAX_DYNAMIC_WELLIST::defaultValue = 1;
const std::string WELLDIMS::MAX_SECONDARY_WELLS::itemName = "MAX_SECONDARY_WELLS";
const int WELLDIMS::MAX_SECONDARY_WELLS::defaultValue = 1;


WELL_COMPLETION_PROBE::WELL_COMPLETION_PROBE( ) : ParserKeyword("WELL_COMPLETION_PROBE")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("WGFRL");
  addDeckName("WGLRL");
  addDeckName("WGORL");
  addDeckName("WGPRL");
  addDeckName("WGPTL");
  addDeckName("WLFRL");
  addDeckName("WLPTL");
  addDeckName("WOFRL");
  addDeckName("WOGRL");
  addDeckName("WOITL");
  addDeckName("WOPRL");
  addDeckName("WOPTL");
  addDeckName("WVFRL");
  addDeckName("WVIRL");
  addDeckName("WVITL");
  addDeckName("WVPTL");
  addDeckName("WWCTL");
  addDeckName("WWFRL");
  addDeckName("WWGRL");
  addDeckName("WWIRL");
  addDeckName("WWITL");
  addDeckName("WWPRL");
  addDeckName("WWPTL");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("COMPLETION", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WELL_COMPLETION_PROBE::keywordName = "WELL_COMPLETION_PROBE";
const std::string WELL_COMPLETION_PROBE::WELL::itemName = "WELL";
const std::string WELL_COMPLETION_PROBE::COMPLETION::itemName = "COMPLETION";


WELL_PROBE::WELL_PROBE( ) : ParserKeyword("WELL_PROBE")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SUMMARY");
  clearDeckNames();
  addDeckName("NGOPAS");
  addDeckName("WALQ");
  addDeckName("WAPI");
  addDeckName("WBGLR");
  addDeckName("WBHP");
  addDeckName("WBHPFP");
  addDeckName("WBHPH");
  addDeckName("WBP");
  addDeckName("WBP4");
  addDeckName("WBP5");
  addDeckName("WBP9");
  addDeckName("WCIC");
  addDeckName("WCIR");
  addDeckName("WCIT");
  addDeckName("WCPC");
  addDeckName("WCPR");
  addDeckName("WCPT");
  addDeckName("WDRPR");
  addDeckName("WEDC");
  addDeckName("WEFF");
  addDeckName("WEFFG");
  addDeckName("WEPR");
  addDeckName("WEPT");
  addDeckName("WGCV");
  addDeckName("WGDC");
  addDeckName("WGIGR");
  addDeckName("WGIP");
  addDeckName("WGIP2");
  addDeckName("WGIR");
  addDeckName("WGIRH");
  addDeckName("WGIRT");
  addDeckName("WGIT");
  addDeckName("WGITH");
  addDeckName("WGLIR");
  addDeckName("WGLR");
  addDeckName("WGLRH");
  addDeckName("WGOR");
  addDeckName("WGORH");
  addDeckName("WGORL");
  addDeckName("WGPGR");
  addDeckName("WGPI");
  addDeckName("WGPI2");
  addDeckName("WGPP");
  addDeckName("WGPP2");
  addDeckName("WGPPF");
  addDeckName("WGPPF2");
  addDeckName("WGPPS");
  addDeckName("WGPPS2");
  addDeckName("WGPR");
  addDeckName("WGPRF");
  addDeckName("WGPRFP");
  addDeckName("WGPRH");
  addDeckName("WGPRS");
  addDeckName("WGPRT");
  addDeckName("WGPT");
  addDeckName("WGPTF");
  addDeckName("WGPTH");
  addDeckName("WGPTS");
  addDeckName("WGQ");
  addDeckName("WGVIR");
  addDeckName("WGVPR");
  addDeckName("WHD");
  addDeckName("WHDF");
  addDeckName("WJPR");
  addDeckName("WJPRH");
  addDeckName("WJPRT");
  addDeckName("WJPT");
  addDeckName("WJPTH");
  addDeckName("WLPR");
  addDeckName("WLPRH");
  addDeckName("WLPRT");
  addDeckName("WLPT");
  addDeckName("WLPTH");
  addDeckName("WMCON");
  addDeckName("WMCTL");
  addDeckName("WMIR");
  addDeckName("WMIT");
  addDeckName("WMMW");
  addDeckName("WMPR");
  addDeckName("WMPT");
  addDeckName("WMVFP");
  addDeckName("WNIR");
  addDeckName("WNIT");
  addDeckName("WNPR");
  addDeckName("WNPT");
  addDeckName("WOGLR");
  addDeckName("WOGR");
  addDeckName("WOGRH");
  addDeckName("WOIGR");
  addDeckName("WOIR");
  addDeckName("WOIRH");
  addDeckName("WOIRT");
  addDeckName("WOIT");
  addDeckName("WOITH");
  addDeckName("WOPGR");
  addDeckName("WOPI");
  addDeckName("WOPI2");
  addDeckName("WOPP");
  addDeckName("WOPP2");
  addDeckName("WOPR");
  addDeckName("WOPRF");
  addDeckName("WOPRH");
  addDeckName("WOPRS");
  addDeckName("WOPRT");
  addDeckName("WOPT");
  addDeckName("WOPTF");
  addDeckName("WOPTH");
  addDeckName("WOPTS");
  addDeckName("WPI");
  addDeckName("WPI1");
  addDeckName("WPI4");
  addDeckName("WPI5");
  addDeckName("WPI9");
  addDeckName("WPIG");
  addDeckName("WPIL");
  addDeckName("WPIO");
  addDeckName("WPIW");
  addDeckName("WPWE0");
  addDeckName("WPWE1");
  addDeckName("WPWE2");
  addDeckName("WPWE3");
  addDeckName("WPWE4");
  addDeckName("WPWE5");
  addDeckName("WPWE6");
  addDeckName("WPWE7");
  addDeckName("WPWEM");
  addDeckName("WSIC");
  addDeckName("WSIR");
  addDeckName("WSIT");
  addDeckName("WSPC");
  addDeckName("WSPR");
  addDeckName("WSPT");
  addDeckName("WSTAT");
  addDeckName("WTHP");
  addDeckName("WTHPFP");
  addDeckName("WTHPH");
  addDeckName("WTHT");
  addDeckName("WTIC");
  addDeckName("WTICF");
  addDeckName("WTICHEA");
  addDeckName("WTICS");
  addDeckName("WTIR");
  addDeckName("WTIRALK");
  addDeckName("WTIRANI");
  addDeckName("WTIRCAT");
  addDeckName("WTIRF");
  addDeckName("WTIRFOA");
  addDeckName("WTIRHEA");
  addDeckName("WTIRS");
  addDeckName("WTIRSUR");
  addDeckName("WTIT");
  addDeckName("WTITALK");
  addDeckName("WTITANI");
  addDeckName("WTITCAT");
  addDeckName("WTITF");
  addDeckName("WTITFOA");
  addDeckName("WTITHEA");
  addDeckName("WTITS");
  addDeckName("WTITSUR");
  addDeckName("WTPC");
  addDeckName("WTPCF");
  addDeckName("WTPCHEA");
  addDeckName("WTPCS");
  addDeckName("WTPR");
  addDeckName("WTPRALK");
  addDeckName("WTPRANI");
  addDeckName("WTPRCAT");
  addDeckName("WTPRF");
  addDeckName("WTPRFOA");
  addDeckName("WTPRHEA");
  addDeckName("WTPRS");
  addDeckName("WTPRSUR");
  addDeckName("WTPT");
  addDeckName("WTPTALK");
  addDeckName("WTPTANI");
  addDeckName("WTPTCAT");
  addDeckName("WTPTF");
  addDeckName("WTPTFOA");
  addDeckName("WTPTHEA");
  addDeckName("WTPTS");
  addDeckName("WTPTSUR");
  addDeckName("WVIR");
  addDeckName("WVIRT");
  addDeckName("WVIT");
  addDeckName("WVPGR");
  addDeckName("WVPR");
  addDeckName("WVPRT");
  addDeckName("WVPT");
  addDeckName("WWCT");
  addDeckName("WWCTH");
  addDeckName("WWGR");
  addDeckName("WWGRH");
  addDeckName("WWIGR");
  addDeckName("WWIP");
  addDeckName("WWIP2");
  addDeckName("WWIR");
  addDeckName("WWIRH");
  addDeckName("WWIRT");
  addDeckName("WWIT");
  addDeckName("WWITH");
  addDeckName("WWPGR");
  addDeckName("WWPI");
  addDeckName("WWPI2");
  addDeckName("WWPIR");
  addDeckName("WWPP");
  addDeckName("WWPP2");
  addDeckName("WWPR");
  addDeckName("WWPRH");
  addDeckName("WWPRT");
  addDeckName("WWPT");
  addDeckName("WWPTH");
  addDeckName("WWVIR");
  setMatchRegex("WU.+|(WBHWC|WGFWC|WOFWC|WWFWC)[1-9][0-9]?|WTPR.+|WTPT.+|WTPC.+|WTIR.+|WTIT.+|WTIC.+");
  {
     ParserRecord record;
     {
        ParserItem item("WELLS", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WELL_PROBE::keywordName = "WELL_PROBE";
const std::string WELL_PROBE::WELLS::itemName = "WELLS";


WELOPEN::WELOPEN( ) : ParserKeyword("WELOPEN")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WELOPEN");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("STATUS", ParserItem::itype::STRING);
        item.setDefault( std::string("OPEN") );
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("C1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("C2", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WELOPEN::keywordName = "WELOPEN";
const std::string WELOPEN::WELL::itemName = "WELL";
const std::string WELOPEN::STATUS::itemName = "STATUS";
const std::string WELOPEN::STATUS::defaultValue = "OPEN";
const std::string WELOPEN::I::itemName = "I";
const std::string WELOPEN::J::itemName = "J";
const std::string WELOPEN::K::itemName = "K";
const std::string WELOPEN::C1::itemName = "C1";
const std::string WELOPEN::C2::itemName = "C2";


WELOPENL::WELOPENL( ) : ParserKeyword("WELOPENL")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WELOPENL");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("GRID", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("STATUS", ParserItem::itype::STRING);
        item.setDefault( std::string("OPEN") );
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("C1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("C2", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WELOPENL::keywordName = "WELOPENL";
const std::string WELOPENL::WELL::itemName = "WELL";
const std::string WELOPENL::GRID::itemName = "GRID";
const std::string WELOPENL::STATUS::itemName = "STATUS";
const std::string WELOPENL::STATUS::defaultValue = "OPEN";
const std::string WELOPENL::I::itemName = "I";
const std::string WELOPENL::J::itemName = "J";
const std::string WELOPENL::K::itemName = "K";
const std::string WELOPENL::C1::itemName = "C1";
const std::string WELOPENL::C2::itemName = "C2";


WELPI::WELPI( ) : ParserKeyword("WELPI")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WELPI");
  {
     ParserRecord record;
     {
        ParserItem item("WELL_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("STEADY_STATE_PRODUCTIVITY_OR_INJECTIVITY_INDEX_VALUE", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WELPI::keywordName = "WELPI";
const std::string WELPI::WELL_NAME::itemName = "WELL_NAME";
const std::string WELPI::STEADY_STATE_PRODUCTIVITY_OR_INJECTIVITY_INDEX_VALUE::itemName = "STEADY_STATE_PRODUCTIVITY_OR_INJECTIVITY_INDEX_VALUE";


WELPRI::WELPRI( ) : ParserKeyword("WELPRI")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WELPRI");
  {
     ParserRecord record;
     {
        ParserItem item("WELL_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("PRI1", ParserItem::itype::INT);
        item.setDefault( -1 );
        record.addItem(item);
     }
     {
        ParserItem item("SCALING1", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("PRI2", ParserItem::itype::INT);
        item.setDefault( -1 );
        record.addItem(item);
     }
     {
        ParserItem item("SCALING2", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WELPRI::keywordName = "WELPRI";
const std::string WELPRI::WELL_NAME::itemName = "WELL_NAME";
const std::string WELPRI::PRI1::itemName = "PRI1";
const int WELPRI::PRI1::defaultValue = -1;
const std::string WELPRI::SCALING1::itemName = "SCALING1";
const double WELPRI::SCALING1::defaultValue = 1.000000;
const std::string WELPRI::PRI2::itemName = "PRI2";
const int WELPRI::PRI2::defaultValue = -1;
const std::string WELPRI::SCALING2::itemName = "SCALING2";
const double WELPRI::SCALING2::defaultValue = 1.000000;


WELSEGS::WELSEGS( ) : ParserKeyword("WELSEGS")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WELSEGS");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("DEPTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("LENGTH", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("WELLBORE_VOLUME", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-05) );
        item.push_backDimension("Length*Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("INFO_TYPE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("PRESSURE_COMPONENTS", ParserItem::itype::STRING);
        item.setDefault( std::string("HFA") );
        record.addItem(item);
     }
     {
        ParserItem item("FLOW_MODEL", ParserItem::itype::STRING);
        item.setDefault( std::string("HO") );
        record.addItem(item);
     }
     {
        ParserItem item("TOP_X", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("TOP_Y", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     addRecord( record );
  }
  {
     ParserRecord record;
     {
        ParserItem item("SEGMENT1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("BRANCH", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("JOIN_SEGMENT", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT_LENGTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("DEPTH_CHANGE", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("DIAMETER", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("ROUGHNESS", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("AREA", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("VOLUME", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("LENGTH_X", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("LENGTH_Y", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WELSEGS::keywordName = "WELSEGS";
const std::string WELSEGS::WELL::itemName = "WELL";
const std::string WELSEGS::DEPTH::itemName = "DEPTH";
const std::string WELSEGS::LENGTH::itemName = "LENGTH";
const double WELSEGS::LENGTH::defaultValue = 0.000000;
const std::string WELSEGS::WELLBORE_VOLUME::itemName = "WELLBORE_VOLUME";
const double WELSEGS::WELLBORE_VOLUME::defaultValue = 0.000010;
const std::string WELSEGS::INFO_TYPE::itemName = "INFO_TYPE";
const std::string WELSEGS::PRESSURE_COMPONENTS::itemName = "PRESSURE_COMPONENTS";
const std::string WELSEGS::PRESSURE_COMPONENTS::defaultValue = "HFA";
const std::string WELSEGS::FLOW_MODEL::itemName = "FLOW_MODEL";
const std::string WELSEGS::FLOW_MODEL::defaultValue = "HO";
const std::string WELSEGS::TOP_X::itemName = "TOP_X";
const double WELSEGS::TOP_X::defaultValue = 0.000000;
const std::string WELSEGS::TOP_Y::itemName = "TOP_Y";
const double WELSEGS::TOP_Y::defaultValue = 0.000000;
const std::string WELSEGS::SEGMENT1::itemName = "SEGMENT1";
const std::string WELSEGS::SEGMENT2::itemName = "SEGMENT2";
const std::string WELSEGS::BRANCH::itemName = "BRANCH";
const std::string WELSEGS::JOIN_SEGMENT::itemName = "JOIN_SEGMENT";
const std::string WELSEGS::SEGMENT_LENGTH::itemName = "SEGMENT_LENGTH";
const std::string WELSEGS::DEPTH_CHANGE::itemName = "DEPTH_CHANGE";
const std::string WELSEGS::DIAMETER::itemName = "DIAMETER";
const std::string WELSEGS::ROUGHNESS::itemName = "ROUGHNESS";
const std::string WELSEGS::AREA::itemName = "AREA";
const std::string WELSEGS::VOLUME::itemName = "VOLUME";
const std::string WELSEGS::LENGTH_X::itemName = "LENGTH_X";
const double WELSEGS::LENGTH_X::defaultValue = 0.000000;
const std::string WELSEGS::LENGTH_Y::itemName = "LENGTH_Y";
const double WELSEGS::LENGTH_Y::defaultValue = 0.000000;


WELSOMIN::WELSOMIN( ) : ParserKeyword("WELSOMIN")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WELSOMIN");
  {
     ParserRecord record;
     {
        ParserItem item("SOMIN", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WELSOMIN::keywordName = "WELSOMIN";
const std::string WELSOMIN::SOMIN::itemName = "SOMIN";


WELSPECL::WELSPECL( ) : ParserKeyword("WELSPECL")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WELSPECL");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("LGR", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("HEAD_I", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("HEAD_J", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("REF_DEPTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("PHASE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("D_RADIUS", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("INFLOW_EQ", ParserItem::itype::STRING);
        item.setDefault( std::string("STD") );
        record.addItem(item);
     }
     {
        ParserItem item("AUTO_SHUTIN", ParserItem::itype::STRING);
        item.setDefault( std::string("SHUT") );
        record.addItem(item);
     }
     {
        ParserItem item("CROSSFLOW", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     {
        ParserItem item("P_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("DENSITY_CALC", ParserItem::itype::STRING);
        item.setDefault( std::string("SEG") );
        record.addItem(item);
     }
     {
        ParserItem item("FIP_REGION", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("FRONTSIM1", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("FRONTSIM2", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("well_model", ParserItem::itype::STRING);
        item.setDefault( std::string("STD") );
        record.addItem(item);
     }
     {
        ParserItem item("POLYMER_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WELSPECL::keywordName = "WELSPECL";
const std::string WELSPECL::WELL::itemName = "WELL";
const std::string WELSPECL::GROUP::itemName = "GROUP";
const std::string WELSPECL::LGR::itemName = "LGR";
const std::string WELSPECL::HEAD_I::itemName = "HEAD_I";
const std::string WELSPECL::HEAD_J::itemName = "HEAD_J";
const std::string WELSPECL::REF_DEPTH::itemName = "REF_DEPTH";
const std::string WELSPECL::PHASE::itemName = "PHASE";
const std::string WELSPECL::D_RADIUS::itemName = "D_RADIUS";
const double WELSPECL::D_RADIUS::defaultValue = 0.000000;
const std::string WELSPECL::INFLOW_EQ::itemName = "INFLOW_EQ";
const std::string WELSPECL::INFLOW_EQ::defaultValue = "STD";
const std::string WELSPECL::AUTO_SHUTIN::itemName = "AUTO_SHUTIN";
const std::string WELSPECL::AUTO_SHUTIN::defaultValue = "SHUT";
const std::string WELSPECL::CROSSFLOW::itemName = "CROSSFLOW";
const std::string WELSPECL::CROSSFLOW::defaultValue = "YES";
const std::string WELSPECL::P_TABLE::itemName = "P_TABLE";
const int WELSPECL::P_TABLE::defaultValue = 0;
const std::string WELSPECL::DENSITY_CALC::itemName = "DENSITY_CALC";
const std::string WELSPECL::DENSITY_CALC::defaultValue = "SEG";
const std::string WELSPECL::FIP_REGION::itemName = "FIP_REGION";
const int WELSPECL::FIP_REGION::defaultValue = 0;
const std::string WELSPECL::FRONTSIM1::itemName = "FRONTSIM1";
const std::string WELSPECL::FRONTSIM2::itemName = "FRONTSIM2";
const std::string WELSPECL::well_model::itemName = "well_model";
const std::string WELSPECL::well_model::defaultValue = "STD";
const std::string WELSPECL::POLYMER_TABLE::itemName = "POLYMER_TABLE";
const int WELSPECL::POLYMER_TABLE::defaultValue = 0;


WELSPECS::WELSPECS( ) : ParserKeyword("WELSPECS")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WELSPECS");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("HEAD_I", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("HEAD_J", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("REF_DEPTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("PHASE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("D_RADIUS", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("INFLOW_EQ", ParserItem::itype::STRING);
        item.setDefault( std::string("STD") );
        record.addItem(item);
     }
     {
        ParserItem item("AUTO_SHUTIN", ParserItem::itype::STRING);
        item.setDefault( std::string("SHUT") );
        record.addItem(item);
     }
     {
        ParserItem item("CROSSFLOW", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     {
        ParserItem item("P_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("DENSITY_CALC", ParserItem::itype::STRING);
        item.setDefault( std::string("SEG") );
        record.addItem(item);
     }
     {
        ParserItem item("FIP_REGION", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("FRONTSIM1", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("FRONTSIM2", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("well_model", ParserItem::itype::STRING);
        item.setDefault( std::string("STD") );
        record.addItem(item);
     }
     {
        ParserItem item("POLYMER_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WELSPECS::keywordName = "WELSPECS";
const std::string WELSPECS::WELL::itemName = "WELL";
const std::string WELSPECS::GROUP::itemName = "GROUP";
const std::string WELSPECS::HEAD_I::itemName = "HEAD_I";
const std::string WELSPECS::HEAD_J::itemName = "HEAD_J";
const std::string WELSPECS::REF_DEPTH::itemName = "REF_DEPTH";
const std::string WELSPECS::PHASE::itemName = "PHASE";
const std::string WELSPECS::D_RADIUS::itemName = "D_RADIUS";
const double WELSPECS::D_RADIUS::defaultValue = 0.000000;
const std::string WELSPECS::INFLOW_EQ::itemName = "INFLOW_EQ";
const std::string WELSPECS::INFLOW_EQ::defaultValue = "STD";
const std::string WELSPECS::AUTO_SHUTIN::itemName = "AUTO_SHUTIN";
const std::string WELSPECS::AUTO_SHUTIN::defaultValue = "SHUT";
const std::string WELSPECS::CROSSFLOW::itemName = "CROSSFLOW";
const std::string WELSPECS::CROSSFLOW::defaultValue = "YES";
const std::string WELSPECS::P_TABLE::itemName = "P_TABLE";
const int WELSPECS::P_TABLE::defaultValue = 0;
const std::string WELSPECS::DENSITY_CALC::itemName = "DENSITY_CALC";
const std::string WELSPECS::DENSITY_CALC::defaultValue = "SEG";
const std::string WELSPECS::FIP_REGION::itemName = "FIP_REGION";
const int WELSPECS::FIP_REGION::defaultValue = 0;
const std::string WELSPECS::FRONTSIM1::itemName = "FRONTSIM1";
const std::string WELSPECS::FRONTSIM2::itemName = "FRONTSIM2";
const std::string WELSPECS::well_model::itemName = "well_model";
const std::string WELSPECS::well_model::defaultValue = "STD";
const std::string WELSPECS::POLYMER_TABLE::itemName = "POLYMER_TABLE";
const int WELSPECS::POLYMER_TABLE::defaultValue = 0;


WELTARG::WELTARG( ) : ParserKeyword("WELTARG")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WELTARG");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("CMODE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("NEW_VALUE", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WELTARG::keywordName = "WELTARG";
const std::string WELTARG::WELL::itemName = "WELL";
const std::string WELTARG::CMODE::itemName = "CMODE";
const std::string WELTARG::NEW_VALUE::itemName = "NEW_VALUE";


WFOAM::WFOAM( ) : ParserKeyword("WFOAM")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WFOAM");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("FOAM_CONCENTRATION", ParserItem::itype::UDA);
        item.push_backDimension("FoamDensity");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WFOAM::keywordName = "WFOAM";
const std::string WFOAM::WELL::itemName = "WELL";
const std::string WFOAM::FOAM_CONCENTRATION::itemName = "FOAM_CONCENTRATION";


WFRICSEG::WFRICSEG( ) : ParserKeyword("WFRICSEG")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WFRICSEG");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TUBINGD", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("ROUGHNESS", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("FLOW_SCALING", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WFRICSEG::keywordName = "WFRICSEG";
const std::string WFRICSEG::WELL::itemName = "WELL";
const std::string WFRICSEG::TUBINGD::itemName = "TUBINGD";
const std::string WFRICSEG::ROUGHNESS::itemName = "ROUGHNESS";
const std::string WFRICSEG::FLOW_SCALING::itemName = "FLOW_SCALING";
const double WFRICSEG::FLOW_SCALING::defaultValue = 1.000000;


WFRICSGL::WFRICSGL( ) : ParserKeyword("WFRICSGL")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WFRICSGL");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TUBINGD", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("ROUGHNESS", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("FLOW_SCALING", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WFRICSGL::keywordName = "WFRICSGL";
const std::string WFRICSGL::WELL::itemName = "WELL";
const std::string WFRICSGL::TUBINGD::itemName = "TUBINGD";
const std::string WFRICSGL::ROUGHNESS::itemName = "ROUGHNESS";
const std::string WFRICSGL::FLOW_SCALING::itemName = "FLOW_SCALING";
const double WFRICSGL::FLOW_SCALING::defaultValue = 1.000000;


WFRICTN::WFRICTN( ) : ParserKeyword("WFRICTN")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WFRICTN");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TUBINGD", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("ROUGHNESS", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("FLOW_SCALING", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WFRICTN::keywordName = "WFRICTN";
const std::string WFRICTN::WELL::itemName = "WELL";
const std::string WFRICTN::TUBINGD::itemName = "TUBINGD";
const std::string WFRICTN::ROUGHNESS::itemName = "ROUGHNESS";
const std::string WFRICTN::FLOW_SCALING::itemName = "FLOW_SCALING";
const double WFRICTN::FLOW_SCALING::defaultValue = 1.000000;


WFRICTNL::WFRICTNL( ) : ParserKeyword("WFRICTNL")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WFRICTNL");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TUBINGD", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("ROUGHNESS", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("FLOW_SCALING", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WFRICTNL::keywordName = "WFRICTNL";
const std::string WFRICTNL::WELL::itemName = "WELL";
const std::string WFRICTNL::TUBINGD::itemName = "TUBINGD";
const std::string WFRICTNL::ROUGHNESS::itemName = "ROUGHNESS";
const std::string WFRICTNL::FLOW_SCALING::itemName = "FLOW_SCALING";
const double WFRICTNL::FLOW_SCALING::defaultValue = 1.000000;


WGASPROD::WGASPROD( ) : ParserKeyword("WGASPROD")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WGASPROD");
  {
     ParserRecord record;
     {
        ParserItem item("WELL_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("INCREMENTAL_GAS_PRODUCTION_RATE", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("MAX_INCREMENTS", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WGASPROD::keywordName = "WGASPROD";
const std::string WGASPROD::WELL_NAME::itemName = "WELL_NAME";
const std::string WGASPROD::INCREMENTAL_GAS_PRODUCTION_RATE::itemName = "INCREMENTAL_GAS_PRODUCTION_RATE";
const std::string WGASPROD::MAX_INCREMENTS::itemName = "MAX_INCREMENTS";


WGORPEN::WGORPEN( ) : ParserKeyword("WGORPEN")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WGORPEN");
  {
     ParserRecord record;
     {
        ParserItem item("WELL_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("BASE_GOR", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("MAX_OIL_RATE", ParserItem::itype::DOUBLE);
        item.push_backDimension("LiquidSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("AVG_GOR0", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WGORPEN::keywordName = "WGORPEN";
const std::string WGORPEN::WELL_NAME::itemName = "WELL_NAME";
const std::string WGORPEN::BASE_GOR::itemName = "BASE_GOR";
const std::string WGORPEN::MAX_OIL_RATE::itemName = "MAX_OIL_RATE";
const std::string WGORPEN::AVG_GOR0::itemName = "AVG_GOR0";


WGRUPCON::WGRUPCON( ) : ParserKeyword("WGRUPCON")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WGRUPCON");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("GROUP_CONTROLLED", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     {
        ParserItem item("GUIDE_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(-1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("PHASE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SCALING_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WGRUPCON::keywordName = "WGRUPCON";
const std::string WGRUPCON::WELL::itemName = "WELL";
const std::string WGRUPCON::GROUP_CONTROLLED::itemName = "GROUP_CONTROLLED";
const std::string WGRUPCON::GROUP_CONTROLLED::defaultValue = "YES";
const std::string WGRUPCON::GUIDE_RATE::itemName = "GUIDE_RATE";
const double WGRUPCON::GUIDE_RATE::defaultValue = -1.000000;
const std::string WGRUPCON::PHASE::itemName = "PHASE";
const std::string WGRUPCON::SCALING_FACTOR::itemName = "SCALING_FACTOR";
const double WGRUPCON::SCALING_FACTOR::defaultValue = 1.000000;


WH2NUM::WH2NUM( ) : ParserKeyword("WH2NUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("WH2NUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string WH2NUM::keywordName = "WH2NUM";
const std::string WH2NUM::data::itemName = "data";


WH3NUM::WH3NUM( ) : ParserKeyword("WH3NUM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("REGIONS");
  clearDeckNames();
  addDeckName("WH3NUM");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::INT);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string WH3NUM::keywordName = "WH3NUM";
const std::string WH3NUM::data::itemName = "data";


WHEDREFD::WHEDREFD( ) : ParserKeyword("WHEDREFD")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WHEDREFD");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("DEPTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WHEDREFD::keywordName = "WHEDREFD";
const std::string WHEDREFD::WELL::itemName = "WELL";
const std::string WHEDREFD::DEPTH::itemName = "DEPTH";


WHISTCTL::WHISTCTL( ) : ParserKeyword("WHISTCTL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WHISTCTL");
  {
     ParserRecord record;
     {
        ParserItem item("CMODE", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     {
        ParserItem item("BPH_TERMINATE", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WHISTCTL::keywordName = "WHISTCTL";
const std::string WHISTCTL::CMODE::itemName = "CMODE";
const std::string WHISTCTL::CMODE::defaultValue = "NONE";
const std::string WHISTCTL::BPH_TERMINATE::itemName = "BPH_TERMINATE";
const std::string WHISTCTL::BPH_TERMINATE::defaultValue = "NO";


WHTEMP::WHTEMP( ) : ParserKeyword("WHTEMP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WHTEMP");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("VFP_TABLE", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("THP_TEMP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Temperature");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WHTEMP::keywordName = "WHTEMP";
const std::string WHTEMP::WELL::itemName = "WELL";
const std::string WHTEMP::VFP_TABLE::itemName = "VFP_TABLE";
const std::string WHTEMP::THP_TEMP::itemName = "THP_TEMP";


WINJMULT::WINJMULT( ) : ParserKeyword("WINJMULT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WINJMULT");
  {
     ParserRecord record;
     {
        ParserItem item("WELL_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("FRACTURING_PRESSURE", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("MULTIPLIER_GRADIENT", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("MODE", ParserItem::itype::STRING);
        item.setDefault( std::string("WREV") );
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        item.setDefault( -1 );
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        item.setDefault( -1 );
        record.addItem(item);
     }
     {
        ParserItem item("K", ParserItem::itype::INT);
        item.setDefault( -1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WINJMULT::keywordName = "WINJMULT";
const std::string WINJMULT::WELL_NAME::itemName = "WELL_NAME";
const std::string WINJMULT::FRACTURING_PRESSURE::itemName = "FRACTURING_PRESSURE";
const std::string WINJMULT::MULTIPLIER_GRADIENT::itemName = "MULTIPLIER_GRADIENT";
const double WINJMULT::MULTIPLIER_GRADIENT::defaultValue = 0.000000;
const std::string WINJMULT::MODE::itemName = "MODE";
const std::string WINJMULT::MODE::defaultValue = "WREV";
const std::string WINJMULT::I::itemName = "I";
const int WINJMULT::I::defaultValue = -1;
const std::string WINJMULT::J::itemName = "J";
const int WINJMULT::J::defaultValue = -1;
const std::string WINJMULT::K::itemName = "K";
const int WINJMULT::K::defaultValue = -1;


WINJTEMP::WINJTEMP( ) : ParserKeyword("WINJTEMP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WINJTEMP");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("STEAM_QUALITY", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("TEMPERATURE", ParserItem::itype::DOUBLE);
        item.setDefault( double(15.560000) );
        item.push_backDimension("Temperature");
        record.addItem(item);
     }
     {
        ParserItem item("PRESSURE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("ENTHALPY", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Energy/Mass");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WINJTEMP::keywordName = "WINJTEMP";
const std::string WINJTEMP::WELL::itemName = "WELL";
const std::string WINJTEMP::STEAM_QUALITY::itemName = "STEAM_QUALITY";
const double WINJTEMP::STEAM_QUALITY::defaultValue = 1.000000;
const std::string WINJTEMP::TEMPERATURE::itemName = "TEMPERATURE";
const double WINJTEMP::TEMPERATURE::defaultValue = 15.560000;
const std::string WINJTEMP::PRESSURE::itemName = "PRESSURE";
const double WINJTEMP::PRESSURE::defaultValue = 0.000000;
const std::string WINJTEMP::ENTHALPY::itemName = "ENTHALPY";
const double WINJTEMP::ENTHALPY::defaultValue = 0.000000;


WLIFT::WLIFT( ) : ParserKeyword("WLIFT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WLIFT");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TRIGGER_LIMIT", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("TRIGGRE_PHASE", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("NEW_VFP_TABLE", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NEW_ALQ_VALUE", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("NEW_WEFAC", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("WWCT_LIMIT", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("NEW_THP_LIMIT", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("WGOR_LIMIT", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("ALQ_SHIFT", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("THP_SHIFT", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WLIFT::keywordName = "WLIFT";
const std::string WLIFT::WELL::itemName = "WELL";
const std::string WLIFT::TRIGGER_LIMIT::itemName = "TRIGGER_LIMIT";
const std::string WLIFT::TRIGGRE_PHASE::itemName = "TRIGGRE_PHASE";
const std::string WLIFT::NEW_VFP_TABLE::itemName = "NEW_VFP_TABLE";
const std::string WLIFT::NEW_ALQ_VALUE::itemName = "NEW_ALQ_VALUE";
const std::string WLIFT::NEW_WEFAC::itemName = "NEW_WEFAC";
const std::string WLIFT::WWCT_LIMIT::itemName = "WWCT_LIMIT";
const std::string WLIFT::NEW_THP_LIMIT::itemName = "NEW_THP_LIMIT";
const std::string WLIFT::WGOR_LIMIT::itemName = "WGOR_LIMIT";
const std::string WLIFT::ALQ_SHIFT::itemName = "ALQ_SHIFT";
const std::string WLIFT::THP_SHIFT::itemName = "THP_SHIFT";


WLIFTOPT::WLIFTOPT( ) : ParserKeyword("WLIFTOPT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WLIFTOPT");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("USE_OPTIMIZER", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("MAX_LIFT_GAS_RATE", ParserItem::itype::DOUBLE);
        item.push_backDimension("GasSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("WEIGHT_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("MIN_LIFT_GAS_RATE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("GasSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("DELTA_GAS_RATE_WEIGHT_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("ALLOCATE_EXTRA_LIFT_GAS", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WLIFTOPT::keywordName = "WLIFTOPT";
const std::string WLIFTOPT::WELL::itemName = "WELL";
const std::string WLIFTOPT::USE_OPTIMIZER::itemName = "USE_OPTIMIZER";
const std::string WLIFTOPT::MAX_LIFT_GAS_RATE::itemName = "MAX_LIFT_GAS_RATE";
const std::string WLIFTOPT::WEIGHT_FACTOR::itemName = "WEIGHT_FACTOR";
const double WLIFTOPT::WEIGHT_FACTOR::defaultValue = 1.000000;
const std::string WLIFTOPT::MIN_LIFT_GAS_RATE::itemName = "MIN_LIFT_GAS_RATE";
const double WLIFTOPT::MIN_LIFT_GAS_RATE::defaultValue = 0.000000;
const std::string WLIFTOPT::DELTA_GAS_RATE_WEIGHT_FACTOR::itemName = "DELTA_GAS_RATE_WEIGHT_FACTOR";
const double WLIFTOPT::DELTA_GAS_RATE_WEIGHT_FACTOR::defaultValue = 0.000000;
const std::string WLIFTOPT::ALLOCATE_EXTRA_LIFT_GAS::itemName = "ALLOCATE_EXTRA_LIFT_GAS";
const std::string WLIFTOPT::ALLOCATE_EXTRA_LIFT_GAS::defaultValue = "NO";


WLIMTOL::WLIMTOL( ) : ParserKeyword("WLIMTOL")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WLIMTOL");
  {
     ParserRecord record;
     {
        ParserItem item("TOLERANCE_FRACTION", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WLIMTOL::keywordName = "WLIMTOL";
const std::string WLIMTOL::TOLERANCE_FRACTION::itemName = "TOLERANCE_FRACTION";


WLIST::WLIST( ) : ParserKeyword("WLIST")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WLIST");
  {
     ParserRecord record;
     {
        ParserItem item("NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("ACTION", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("WELLS", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WLIST::keywordName = "WLIST";
const std::string WLIST::NAME::itemName = "NAME";
const std::string WLIST::ACTION::itemName = "ACTION";
const std::string WLIST::WELLS::itemName = "WELLS";


WLISTARG::WLISTARG( ) : ParserKeyword("WLISTARG")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WLISTARG");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("CONTROL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("VALUES", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WLISTARG::keywordName = "WLISTARG";
const std::string WLISTARG::WELL::itemName = "WELL";
const std::string WLISTARG::CONTROL::itemName = "CONTROL";
const std::string WLISTARG::VALUES::itemName = "VALUES";


WLISTNAM::WLISTNAM( ) : ParserKeyword("WLISTNAM")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WLISTNAM");
  {
     ParserRecord record;
     {
        ParserItem item("LIST_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("WELLS", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WLISTNAM::keywordName = "WLISTNAM";
const std::string WLISTNAM::LIST_NAME::itemName = "LIST_NAME";
const std::string WLISTNAM::WELLS::itemName = "WELLS";


WNETCTRL::WNETCTRL( ) : ParserKeyword("WNETCTRL")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WNETCTRL");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("CONTROL", ParserItem::itype::STRING);
        item.setDefault( std::string("THP") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WNETCTRL::keywordName = "WNETCTRL";
const std::string WNETCTRL::WELL::itemName = "WELL";
const std::string WNETCTRL::CONTROL::itemName = "CONTROL";
const std::string WNETCTRL::CONTROL::defaultValue = "THP";


WNETDP::WNETDP( ) : ParserKeyword("WNETDP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WNETDP");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("DP", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WNETDP::keywordName = "WNETDP";
const std::string WNETDP::WELL::itemName = "WELL";
const std::string WNETDP::DP::itemName = "DP";
const double WNETDP::DP::defaultValue = 0.000000;


WORKLIM::WORKLIM( ) : ParserKeyword("WORKLIM")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WORKLIM");
  {
     ParserRecord record;
     {
        ParserItem item("LIMIT", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WORKLIM::keywordName = "WORKLIM";
const std::string WORKLIM::LIMIT::itemName = "LIMIT";


WORKTHP::WORKTHP( ) : ParserKeyword("WORKTHP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WORKTHP");
  {
     ParserRecord record;
     {
        ParserItem item("WELL_NAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("WORK_OVER_PROCEDURE", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WORKTHP::keywordName = "WORKTHP";
const std::string WORKTHP::WELL_NAME::itemName = "WELL_NAME";
const std::string WORKTHP::WORK_OVER_PROCEDURE::itemName = "WORK_OVER_PROCEDURE";
const std::string WORKTHP::WORK_OVER_PROCEDURE::defaultValue = "NONE";


WPAVE::WPAVE( ) : ParserKeyword("WPAVE")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WPAVE");
  {
     ParserRecord record;
     {
        ParserItem item("WEIGTH_FACTOR1", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.500000) );
        record.addItem(item);
     }
     {
        ParserItem item("WEIGTH_FACTOR2", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("DEPTH_CORRECTION", ParserItem::itype::STRING);
        item.setDefault( std::string("WELL") );
        record.addItem(item);
     }
     {
        ParserItem item("CONNECTION", ParserItem::itype::STRING);
        item.setDefault( std::string("OPEN") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WPAVE::keywordName = "WPAVE";
const std::string WPAVE::WEIGTH_FACTOR1::itemName = "WEIGTH_FACTOR1";
const double WPAVE::WEIGTH_FACTOR1::defaultValue = 0.500000;
const std::string WPAVE::WEIGTH_FACTOR2::itemName = "WEIGTH_FACTOR2";
const double WPAVE::WEIGTH_FACTOR2::defaultValue = 1.000000;
const std::string WPAVE::DEPTH_CORRECTION::itemName = "DEPTH_CORRECTION";
const std::string WPAVE::DEPTH_CORRECTION::defaultValue = "WELL";
const std::string WPAVE::CONNECTION::itemName = "CONNECTION";
const std::string WPAVE::CONNECTION::defaultValue = "OPEN";


WPAVEDEP::WPAVEDEP( ) : ParserKeyword("WPAVEDEP")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WPAVEDEP");
  {
     ParserRecord record;
     {
        ParserItem item("WELLNAME", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("REFDEPTH", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WPAVEDEP::keywordName = "WPAVEDEP";
const std::string WPAVEDEP::WELLNAME::itemName = "WELLNAME";
const std::string WPAVEDEP::REFDEPTH::itemName = "REFDEPTH";
const double WPAVEDEP::REFDEPTH::defaultValue = 0.000000;


WPIMULT::WPIMULT( ) : ParserKeyword("WPIMULT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WPIMULT");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("WELLPI", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("FIRST", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("LAST", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WPIMULT::keywordName = "WPIMULT";
const std::string WPIMULT::WELL::itemName = "WELL";
const std::string WPIMULT::WELLPI::itemName = "WELLPI";
const double WPIMULT::WELLPI::defaultValue = 1.000000;
const std::string WPIMULT::I::itemName = "I";
const std::string WPIMULT::J::itemName = "J";
const std::string WPIMULT::K::itemName = "K";
const std::string WPIMULT::FIRST::itemName = "FIRST";
const std::string WPIMULT::LAST::itemName = "LAST";


WPIMULTL::WPIMULTL( ) : ParserKeyword("WPIMULTL")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WPIMULTL");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("WELLPI", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("GRID", ParserItem::itype::STRING);
        item.setDefault( std::string("") );
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("K", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("FIRST", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("LAST", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WPIMULTL::keywordName = "WPIMULTL";
const std::string WPIMULTL::WELL::itemName = "WELL";
const std::string WPIMULTL::WELLPI::itemName = "WELLPI";
const double WPIMULTL::WELLPI::defaultValue = 1.000000;
const std::string WPIMULTL::GRID::itemName = "GRID";
const std::string WPIMULTL::GRID::defaultValue = "";
const std::string WPIMULTL::I::itemName = "I";
const std::string WPIMULTL::J::itemName = "J";
const std::string WPIMULTL::K::itemName = "K";
const std::string WPIMULTL::FIRST::itemName = "FIRST";
const std::string WPIMULTL::LAST::itemName = "LAST";


WPITAB::WPITAB( ) : ParserKeyword("WPITAB")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WPITAB");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("PI", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WPITAB::keywordName = "WPITAB";
const std::string WPITAB::WELL::itemName = "WELL";
const std::string WPITAB::PI::itemName = "PI";
const double WPITAB::PI::defaultValue = 0.000000;


WPLUG::WPLUG( ) : ParserKeyword("WPLUG")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WPLUG");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("LENGTH_TOP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("LENGTH_BOTTOM", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("SOURCE", ParserItem::itype::STRING);
        item.setDefault( std::string("WELL") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WPLUG::keywordName = "WPLUG";
const std::string WPLUG::WELL::itemName = "WELL";
const std::string WPLUG::LENGTH_TOP::itemName = "LENGTH_TOP";
const std::string WPLUG::LENGTH_BOTTOM::itemName = "LENGTH_BOTTOM";
const std::string WPLUG::SOURCE::itemName = "SOURCE";
const std::string WPLUG::SOURCE::defaultValue = "WELL";


WPMITAB::WPMITAB( ) : ParserKeyword("WPMITAB")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WPMITAB");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TABLE_NUMBER", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WPMITAB::keywordName = "WPMITAB";
const std::string WPMITAB::WELL::itemName = "WELL";
const std::string WPMITAB::TABLE_NUMBER::itemName = "TABLE_NUMBER";


WPOLYMER::WPOLYMER( ) : ParserKeyword("WPOLYMER")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  addValidSectionName("SPECIAL");
  clearDeckNames();
  addDeckName("WPOLYMER");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("POLYMER_CONCENTRATION", ParserItem::itype::UDA);
        item.push_backDimension("PolymerDensity");
        record.addItem(item);
     }
     {
        ParserItem item("SALT_CONCENTRATION", ParserItem::itype::UDA);
        item.push_backDimension("PolymerDensity");
        record.addItem(item);
     }
     {
        ParserItem item("GROUP_POLYMER_CONCENTRATION", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("GROUP_SALT_CONCENTRATION", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WPOLYMER::keywordName = "WPOLYMER";
const std::string WPOLYMER::WELL::itemName = "WELL";
const std::string WPOLYMER::POLYMER_CONCENTRATION::itemName = "POLYMER_CONCENTRATION";
const std::string WPOLYMER::SALT_CONCENTRATION::itemName = "SALT_CONCENTRATION";
const std::string WPOLYMER::GROUP_POLYMER_CONCENTRATION::itemName = "GROUP_POLYMER_CONCENTRATION";
const std::string WPOLYMER::GROUP_SALT_CONCENTRATION::itemName = "GROUP_SALT_CONCENTRATION";


WPOLYRED::WPOLYRED( ) : ParserKeyword("WPOLYRED")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WPOLYRED");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("POLYMER_VISCOSITY_RED", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WPOLYRED::keywordName = "WPOLYRED";
const std::string WPOLYRED::WELL::itemName = "WELL";
const std::string WPOLYRED::POLYMER_VISCOSITY_RED::itemName = "POLYMER_VISCOSITY_RED";
const double WPOLYRED::POLYMER_VISCOSITY_RED::defaultValue = 1.000000;


WPOTCALC::WPOTCALC( ) : ParserKeyword("WPOTCALC")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("WPOTCALC");
  {
     ParserRecord record;
     {
        ParserItem item("FORCE_CALC", ParserItem::itype::STRING);
        item.setDefault( std::string("YES") );
        record.addItem(item);
     }
     {
        ParserItem item("USE_SEGMENT_VOLUMES", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WPOTCALC::keywordName = "WPOTCALC";
const std::string WPOTCALC::FORCE_CALC::itemName = "FORCE_CALC";
const std::string WPOTCALC::FORCE_CALC::defaultValue = "YES";
const std::string WPOTCALC::USE_SEGMENT_VOLUMES::itemName = "USE_SEGMENT_VOLUMES";
const std::string WPOTCALC::USE_SEGMENT_VOLUMES::defaultValue = "NO";


WREGROUP::WREGROUP( ) : ParserKeyword("WREGROUP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WREGROUP");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("QUANTITY", ParserItem::itype::STRING);
        item.setDefault( std::string(" ") );
        record.addItem(item);
     }
     {
        ParserItem item("GROUP_UPPER", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("UPPER_LIMIT", ParserItem::itype::DOUBLE);
        item.setDefault( double(100000000000000000000.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("GROUP_LOWER", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("LOWER_LIMIT", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WREGROUP::keywordName = "WREGROUP";
const std::string WREGROUP::WELL::itemName = "WELL";
const std::string WREGROUP::QUANTITY::itemName = "QUANTITY";
const std::string WREGROUP::QUANTITY::defaultValue = " ";
const std::string WREGROUP::GROUP_UPPER::itemName = "GROUP_UPPER";
const std::string WREGROUP::UPPER_LIMIT::itemName = "UPPER_LIMIT";
const double WREGROUP::UPPER_LIMIT::defaultValue = 100000000000000000000.000000;
const std::string WREGROUP::GROUP_LOWER::itemName = "GROUP_LOWER";
const std::string WREGROUP::LOWER_LIMIT::itemName = "LOWER_LIMIT";
const double WREGROUP::LOWER_LIMIT::defaultValue = 0.000000;


WRFT::WRFT( ) : ParserKeyword("WRFT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WRFT");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WRFT::keywordName = "WRFT";
const std::string WRFT::WELL::itemName = "WELL";


WRFTPLT::WRFTPLT( ) : ParserKeyword("WRFTPLT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WRFTPLT");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("OUTPUT_RFT", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("OUTPUT_PLT", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("OUTPUT_SEGMENT", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WRFTPLT::keywordName = "WRFTPLT";
const std::string WRFTPLT::WELL::itemName = "WELL";
const std::string WRFTPLT::OUTPUT_RFT::itemName = "OUTPUT_RFT";
const std::string WRFTPLT::OUTPUT_RFT::defaultValue = "NO";
const std::string WRFTPLT::OUTPUT_PLT::itemName = "OUTPUT_PLT";
const std::string WRFTPLT::OUTPUT_PLT::defaultValue = "NO";
const std::string WRFTPLT::OUTPUT_SEGMENT::itemName = "OUTPUT_SEGMENT";
const std::string WRFTPLT::OUTPUT_SEGMENT::defaultValue = "NO";


WSALT::WSALT( ) : ParserKeyword("WSALT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSALT");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("CONCENTRATION", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSALT::keywordName = "WSALT";
const std::string WSALT::WELL::itemName = "WELL";
const std::string WSALT::CONCENTRATION::itemName = "CONCENTRATION";


WSCCLEAN::WSCCLEAN( ) : ParserKeyword("WSCCLEAN")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSCCLEAN");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SCALE_MULTIPLIER", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        item.setDefault( -1 );
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        item.setDefault( -1 );
        record.addItem(item);
     }
     {
        ParserItem item("K", ParserItem::itype::INT);
        item.setDefault( -1 );
        record.addItem(item);
     }
     {
        ParserItem item("C1", ParserItem::itype::INT);
        item.setDefault( -1 );
        record.addItem(item);
     }
     {
        ParserItem item("C2", ParserItem::itype::INT);
        item.setDefault( -1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSCCLEAN::keywordName = "WSCCLEAN";
const std::string WSCCLEAN::WELL::itemName = "WELL";
const std::string WSCCLEAN::SCALE_MULTIPLIER::itemName = "SCALE_MULTIPLIER";
const double WSCCLEAN::SCALE_MULTIPLIER::defaultValue = 1.000000;
const std::string WSCCLEAN::I::itemName = "I";
const int WSCCLEAN::I::defaultValue = -1;
const std::string WSCCLEAN::J::itemName = "J";
const int WSCCLEAN::J::defaultValue = -1;
const std::string WSCCLEAN::K::itemName = "K";
const int WSCCLEAN::K::defaultValue = -1;
const std::string WSCCLEAN::C1::itemName = "C1";
const int WSCCLEAN::C1::defaultValue = -1;
const std::string WSCCLEAN::C2::itemName = "C2";
const int WSCCLEAN::C2::defaultValue = -1;


WSCCLENL::WSCCLENL( ) : ParserKeyword("WSCCLENL")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSCCLENL");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SCALE_MULTIPLIER", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("LGR", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("I", ParserItem::itype::INT);
        item.setDefault( -1 );
        record.addItem(item);
     }
     {
        ParserItem item("J", ParserItem::itype::INT);
        item.setDefault( -1 );
        record.addItem(item);
     }
     {
        ParserItem item("K", ParserItem::itype::INT);
        item.setDefault( -1 );
        record.addItem(item);
     }
     {
        ParserItem item("C1", ParserItem::itype::INT);
        item.setDefault( -1 );
        record.addItem(item);
     }
     {
        ParserItem item("C2", ParserItem::itype::INT);
        item.setDefault( -1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSCCLENL::keywordName = "WSCCLENL";
const std::string WSCCLENL::WELL::itemName = "WELL";
const std::string WSCCLENL::SCALE_MULTIPLIER::itemName = "SCALE_MULTIPLIER";
const double WSCCLENL::SCALE_MULTIPLIER::defaultValue = 1.000000;
const std::string WSCCLENL::LGR::itemName = "LGR";
const std::string WSCCLENL::I::itemName = "I";
const int WSCCLENL::I::defaultValue = -1;
const std::string WSCCLENL::J::itemName = "J";
const int WSCCLENL::J::defaultValue = -1;
const std::string WSCCLENL::K::itemName = "K";
const int WSCCLENL::K::defaultValue = -1;
const std::string WSCCLENL::C1::itemName = "C1";
const int WSCCLENL::C1::defaultValue = -1;
const std::string WSCCLENL::C2::itemName = "C2";
const int WSCCLENL::C2::defaultValue = -1;


WSCTAB::WSCTAB( ) : ParserKeyword("WSCTAB")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSCTAB");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SCALE_DEPOSITION_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("SCALE_DAMAGE_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("UNUSED", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SCALE_DISSOLUTION_TABLE", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSCTAB::keywordName = "WSCTAB";
const std::string WSCTAB::WELL::itemName = "WELL";
const std::string WSCTAB::SCALE_DEPOSITION_TABLE::itemName = "SCALE_DEPOSITION_TABLE";
const int WSCTAB::SCALE_DEPOSITION_TABLE::defaultValue = 0;
const std::string WSCTAB::SCALE_DAMAGE_TABLE::itemName = "SCALE_DAMAGE_TABLE";
const int WSCTAB::SCALE_DAMAGE_TABLE::defaultValue = 0;
const std::string WSCTAB::UNUSED::itemName = "UNUSED";
const std::string WSCTAB::SCALE_DISSOLUTION_TABLE::itemName = "SCALE_DISSOLUTION_TABLE";
const int WSCTAB::SCALE_DISSOLUTION_TABLE::defaultValue = 0;


WSEGAICD::WSEGAICD( ) : ParserKeyword("WSEGAICD")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSEGAICD");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT1", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT2", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("AICD_STRENGTH", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("ICD_LENGTH", ParserItem::itype::DOUBLE);
        item.setDefault( double(12.000000) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("RHO", ParserItem::itype::DOUBLE);
        item.setDefault( double(1000.250000) );
        item.push_backDimension("Mass/Length*Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("VISCOSITY", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.450000) );
        item.push_backDimension("Viscosity");
        record.addItem(item);
     }
     {
        ParserItem item("WATER_LIMIT", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.500000) );
        record.addItem(item);
     }
     {
        ParserItem item("TRANSITION_WIDTH", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.050000) );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_SOMETHING", ParserItem::itype::DOUBLE);
        item.setDefault( double(5.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("SCALING_METHOD", ParserItem::itype::INT);
        item.setDefault( -1 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_QICD", ParserItem::itype::DOUBLE);
        item.push_backDimension("ReservoirVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("FLOW_RATE_EXPONENT", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("VISC_EXPONENT", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("ICD_FLAG", ParserItem::itype::STRING);
        item.setDefault( std::string("OPEN") );
        record.addItem(item);
     }
     {
        ParserItem item("OIL_FLOW_FRACTION", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("WATER_FLOW_FRACTION", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("GAS_FLOW_FRACTION", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("OIL_VSIC_FRACTION", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("WATER_VISC_FRACTION", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("GAS_VISC_FRACTION", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSEGAICD::keywordName = "WSEGAICD";
const std::string WSEGAICD::WELL::itemName = "WELL";
const std::string WSEGAICD::SEGMENT1::itemName = "SEGMENT1";
const int WSEGAICD::SEGMENT1::defaultValue = 0;
const std::string WSEGAICD::SEGMENT2::itemName = "SEGMENT2";
const int WSEGAICD::SEGMENT2::defaultValue = 0;
const std::string WSEGAICD::AICD_STRENGTH::itemName = "AICD_STRENGTH";
const double WSEGAICD::AICD_STRENGTH::defaultValue = 0.000000;
const std::string WSEGAICD::ICD_LENGTH::itemName = "ICD_LENGTH";
const double WSEGAICD::ICD_LENGTH::defaultValue = 12.000000;
const std::string WSEGAICD::RHO::itemName = "RHO";
const double WSEGAICD::RHO::defaultValue = 1000.250000;
const std::string WSEGAICD::VISCOSITY::itemName = "VISCOSITY";
const double WSEGAICD::VISCOSITY::defaultValue = 1.450000;
const std::string WSEGAICD::WATER_LIMIT::itemName = "WATER_LIMIT";
const double WSEGAICD::WATER_LIMIT::defaultValue = 0.500000;
const std::string WSEGAICD::TRANSITION_WIDTH::itemName = "TRANSITION_WIDTH";
const double WSEGAICD::TRANSITION_WIDTH::defaultValue = 0.050000;
const std::string WSEGAICD::MAX_SOMETHING::itemName = "MAX_SOMETHING";
const double WSEGAICD::MAX_SOMETHING::defaultValue = 5.000000;
const std::string WSEGAICD::SCALING_METHOD::itemName = "SCALING_METHOD";
const int WSEGAICD::SCALING_METHOD::defaultValue = -1;
const std::string WSEGAICD::MAX_QICD::itemName = "MAX_QICD";
const std::string WSEGAICD::FLOW_RATE_EXPONENT::itemName = "FLOW_RATE_EXPONENT";
const std::string WSEGAICD::VISC_EXPONENT::itemName = "VISC_EXPONENT";
const std::string WSEGAICD::ICD_FLAG::itemName = "ICD_FLAG";
const std::string WSEGAICD::ICD_FLAG::defaultValue = "OPEN";
const std::string WSEGAICD::OIL_FLOW_FRACTION::itemName = "OIL_FLOW_FRACTION";
const double WSEGAICD::OIL_FLOW_FRACTION::defaultValue = 1.000000;
const std::string WSEGAICD::WATER_FLOW_FRACTION::itemName = "WATER_FLOW_FRACTION";
const double WSEGAICD::WATER_FLOW_FRACTION::defaultValue = 1.000000;
const std::string WSEGAICD::GAS_FLOW_FRACTION::itemName = "GAS_FLOW_FRACTION";
const double WSEGAICD::GAS_FLOW_FRACTION::defaultValue = 1.000000;
const std::string WSEGAICD::OIL_VSIC_FRACTION::itemName = "OIL_VSIC_FRACTION";
const double WSEGAICD::OIL_VSIC_FRACTION::defaultValue = 1.000000;
const std::string WSEGAICD::WATER_VISC_FRACTION::itemName = "WATER_VISC_FRACTION";
const double WSEGAICD::WATER_VISC_FRACTION::defaultValue = 1.000000;
const std::string WSEGAICD::GAS_VISC_FRACTION::itemName = "GAS_VISC_FRACTION";
const double WSEGAICD::GAS_VISC_FRACTION::defaultValue = 1.000000;


WSEGDFIN::WSEGDFIN( ) : ParserKeyword("WSEGDFIN")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSEGDFIN");
  {
     ParserRecord record;
     {
        ParserItem item("DATA", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSEGDFIN::keywordName = "WSEGDFIN";
const std::string WSEGDFIN::DATA::itemName = "DATA";


WSEGDFMD::WSEGDFMD( ) : ParserKeyword("WSEGDFMD")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSEGDFMD");
  {
     ParserRecord record;
     {
        ParserItem item("DRIFT_MODEL", ParserItem::itype::STRING);
        item.setDefault( std::string("ORIGINAL") );
        record.addItem(item);
     }
     {
        ParserItem item("INCLINATION_FACTOR", ParserItem::itype::STRING);
        item.setDefault( std::string("H-K") );
        record.addItem(item);
     }
     {
        ParserItem item("GAS_EFFECT", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSEGDFMD::keywordName = "WSEGDFMD";
const std::string WSEGDFMD::DRIFT_MODEL::itemName = "DRIFT_MODEL";
const std::string WSEGDFMD::DRIFT_MODEL::defaultValue = "ORIGINAL";
const std::string WSEGDFMD::INCLINATION_FACTOR::itemName = "INCLINATION_FACTOR";
const std::string WSEGDFMD::INCLINATION_FACTOR::defaultValue = "H-K";
const std::string WSEGDFMD::GAS_EFFECT::itemName = "GAS_EFFECT";
const std::string WSEGDFMD::GAS_EFFECT::defaultValue = "NO";


WSEGDFPA::WSEGDFPA( ) : ParserKeyword("WSEGDFPA")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSEGDFPA");
  {
     ParserRecord record;
     {
        ParserItem item("GAS_LIQUID_VD_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("A1", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("A2", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("C0_A", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.200000) );
        record.addItem(item);
     }
     {
        ParserItem item("C0_B", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("FV", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("OIL_WATER_VD_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(-1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("A", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("B1", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("B2", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("N", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSEGDFPA::keywordName = "WSEGDFPA";
const std::string WSEGDFPA::GAS_LIQUID_VD_FACTOR::itemName = "GAS_LIQUID_VD_FACTOR";
const double WSEGDFPA::GAS_LIQUID_VD_FACTOR::defaultValue = 1.000000;
const std::string WSEGDFPA::A1::itemName = "A1";
const std::string WSEGDFPA::A2::itemName = "A2";
const std::string WSEGDFPA::C0_A::itemName = "C0_A";
const double WSEGDFPA::C0_A::defaultValue = 1.200000;
const std::string WSEGDFPA::C0_B::itemName = "C0_B";
const std::string WSEGDFPA::FV::itemName = "FV";
const double WSEGDFPA::FV::defaultValue = 1.000000;
const std::string WSEGDFPA::OIL_WATER_VD_FACTOR::itemName = "OIL_WATER_VD_FACTOR";
const double WSEGDFPA::OIL_WATER_VD_FACTOR::defaultValue = -1.000000;
const std::string WSEGDFPA::A::itemName = "A";
const std::string WSEGDFPA::B1::itemName = "B1";
const std::string WSEGDFPA::B2::itemName = "B2";
const std::string WSEGDFPA::N::itemName = "N";


WSEGDIMS::WSEGDIMS( ) : ParserKeyword("WSEGDIMS")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("RUNSPEC");
  clearDeckNames();
  addDeckName("WSEGDIMS");
  {
     ParserRecord record;
     {
        ParserItem item("NSWLMX", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("NSEGMX", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NLBRMX", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     {
        ParserItem item("NCRDMX", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSEGDIMS::keywordName = "WSEGDIMS";
const std::string WSEGDIMS::NSWLMX::itemName = "NSWLMX";
const int WSEGDIMS::NSWLMX::defaultValue = 0;
const std::string WSEGDIMS::NSEGMX::itemName = "NSEGMX";
const int WSEGDIMS::NSEGMX::defaultValue = 1;
const std::string WSEGDIMS::NLBRMX::itemName = "NLBRMX";
const int WSEGDIMS::NLBRMX::defaultValue = 1;
const std::string WSEGDIMS::NCRDMX::itemName = "NCRDMX";
const int WSEGDIMS::NCRDMX::defaultValue = 0;


WSEGEXSS::WSEGEXSS( ) : ParserKeyword("WSEGEXSS")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSEGEXSS");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("TYPE", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     {
        ParserItem item("GAS_IMPORT_RATE", ParserItem::itype::DOUBLE);
        item.push_backDimension("GasSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("R", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("LiquidSurfaceVolume/Time*Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("PEXT", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSEGEXSS::keywordName = "WSEGEXSS";
const std::string WSEGEXSS::WELL::itemName = "WELL";
const std::string WSEGEXSS::SEGMENT::itemName = "SEGMENT";
const std::string WSEGEXSS::TYPE::itemName = "TYPE";
const std::string WSEGEXSS::TYPE::defaultValue = "NONE";
const std::string WSEGEXSS::GAS_IMPORT_RATE::itemName = "GAS_IMPORT_RATE";
const std::string WSEGEXSS::R::itemName = "R";
const double WSEGEXSS::R::defaultValue = 0.000000;
const std::string WSEGEXSS::PEXT::itemName = "PEXT";
const double WSEGEXSS::PEXT::defaultValue = 0.000000;


WSEGFLIM::WSEGFLIM( ) : ParserKeyword("WSEGFLIM")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSEGFLIM");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("LIMITED_PHASE1", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     {
        ParserItem item("FLOW_LIMIT1", ParserItem::itype::DOUBLE);
        item.push_backDimension("LiquidSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("A1", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("LIMITED_PHASE2", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     {
        ParserItem item("FLOW_LIMIT2", ParserItem::itype::DOUBLE);
        item.push_backDimension("LiquidSurfaceVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("A2", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("STATUS", ParserItem::itype::STRING);
        item.setDefault( std::string("OPEN") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSEGFLIM::keywordName = "WSEGFLIM";
const std::string WSEGFLIM::WELL::itemName = "WELL";
const std::string WSEGFLIM::SEGMENT1::itemName = "SEGMENT1";
const std::string WSEGFLIM::SEGMENT2::itemName = "SEGMENT2";
const std::string WSEGFLIM::LIMITED_PHASE1::itemName = "LIMITED_PHASE1";
const std::string WSEGFLIM::LIMITED_PHASE1::defaultValue = "NONE";
const std::string WSEGFLIM::FLOW_LIMIT1::itemName = "FLOW_LIMIT1";
const std::string WSEGFLIM::A1::itemName = "A1";
const std::string WSEGFLIM::LIMITED_PHASE2::itemName = "LIMITED_PHASE2";
const std::string WSEGFLIM::LIMITED_PHASE2::defaultValue = "NONE";
const std::string WSEGFLIM::FLOW_LIMIT2::itemName = "FLOW_LIMIT2";
const std::string WSEGFLIM::A2::itemName = "A2";
const std::string WSEGFLIM::STATUS::itemName = "STATUS";
const std::string WSEGFLIM::STATUS::defaultValue = "OPEN";


WSEGFMOD::WSEGFMOD( ) : ParserKeyword("WSEGFMOD")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSEGFMOD");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("FLOW_MODEL", ParserItem::itype::STRING);
        item.setDefault( std::string("HO") );
        record.addItem(item);
     }
     {
        ParserItem item("GAS_LIQUID_VD_FACTOR", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("A", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("B", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("FV", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("B1", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("B2", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSEGFMOD::keywordName = "WSEGFMOD";
const std::string WSEGFMOD::WELL::itemName = "WELL";
const std::string WSEGFMOD::SEGMENT1::itemName = "SEGMENT1";
const std::string WSEGFMOD::SEGMENT2::itemName = "SEGMENT2";
const std::string WSEGFMOD::FLOW_MODEL::itemName = "FLOW_MODEL";
const std::string WSEGFMOD::FLOW_MODEL::defaultValue = "HO";
const std::string WSEGFMOD::GAS_LIQUID_VD_FACTOR::itemName = "GAS_LIQUID_VD_FACTOR";
const std::string WSEGFMOD::A::itemName = "A";
const std::string WSEGFMOD::B::itemName = "B";
const std::string WSEGFMOD::FV::itemName = "FV";
const std::string WSEGFMOD::B1::itemName = "B1";
const std::string WSEGFMOD::B2::itemName = "B2";


WSEGINIT::WSEGINIT( ) : ParserKeyword("WSEGINIT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSEGINIT");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("P0", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("W0", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("G0", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("RS", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("RV", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("API", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("POLYMER", ParserItem::itype::DOUBLE);
        item.push_backDimension("Mass/ReservoirVolume");
        record.addItem(item);
     }
     {
        ParserItem item("BRINE", ParserItem::itype::DOUBLE);
        item.push_backDimension("Mass/ReservoirVolume");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSEGINIT::keywordName = "WSEGINIT";
const std::string WSEGINIT::WELL::itemName = "WELL";
const std::string WSEGINIT::SEGMENT1::itemName = "SEGMENT1";
const std::string WSEGINIT::SEGMENT2::itemName = "SEGMENT2";
const std::string WSEGINIT::P0::itemName = "P0";
const std::string WSEGINIT::W0::itemName = "W0";
const std::string WSEGINIT::G0::itemName = "G0";
const std::string WSEGINIT::RS::itemName = "RS";
const std::string WSEGINIT::RV::itemName = "RV";
const std::string WSEGINIT::API::itemName = "API";
const std::string WSEGINIT::POLYMER::itemName = "POLYMER";
const std::string WSEGINIT::BRINE::itemName = "BRINE";


WSEGITER::WSEGITER( ) : ParserKeyword("WSEGITER")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSEGITER");
  {
     ParserRecord record;
     {
        ParserItem item("MAX_WELL_ITERATIONS", ParserItem::itype::INT);
        item.setDefault( 20 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_TIMES_REDUCED", ParserItem::itype::INT);
        item.setDefault( 5 );
        record.addItem(item);
     }
     {
        ParserItem item("REDUCTION_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.300000) );
        record.addItem(item);
     }
     {
        ParserItem item("INCREASING_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(2.000000) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSEGITER::keywordName = "WSEGITER";
const std::string WSEGITER::MAX_WELL_ITERATIONS::itemName = "MAX_WELL_ITERATIONS";
const int WSEGITER::MAX_WELL_ITERATIONS::defaultValue = 20;
const std::string WSEGITER::MAX_TIMES_REDUCED::itemName = "MAX_TIMES_REDUCED";
const int WSEGITER::MAX_TIMES_REDUCED::defaultValue = 5;
const std::string WSEGITER::REDUCTION_FACTOR::itemName = "REDUCTION_FACTOR";
const double WSEGITER::REDUCTION_FACTOR::defaultValue = 0.300000;
const std::string WSEGITER::INCREASING_FACTOR::itemName = "INCREASING_FACTOR";
const double WSEGITER::INCREASING_FACTOR::defaultValue = 2.000000;


WSEGLABY::WSEGLABY( ) : ParserKeyword("WSEGLABY")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSEGLABY");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("NCONFIG", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("CHANNELS", ParserItem::itype::INT);
        item.setDefault( 2 );
        record.addItem(item);
     }
     {
        ParserItem item("A", ParserItem::itype::DOUBLE);
        item.setDefault( double(6e-05) );
        item.push_backDimension("Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("L1", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.186300) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("L2", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.283200) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("D", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.006316) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("R", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-05) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("GAMMA_INLET", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.350000) );
        record.addItem(item);
     }
     {
        ParserItem item("GAMMA_OUTLET", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.500000) );
        record.addItem(item);
     }
     {
        ParserItem item("GAMMA_LAB", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.500000) );
        record.addItem(item);
     }
     {
        ParserItem item("STATUS", ParserItem::itype::STRING);
        item.setDefault( std::string("OPEN") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSEGLABY::keywordName = "WSEGLABY";
const std::string WSEGLABY::WELL::itemName = "WELL";
const std::string WSEGLABY::SEGMENT1::itemName = "SEGMENT1";
const std::string WSEGLABY::SEGMENT2::itemName = "SEGMENT2";
const std::string WSEGLABY::NCONFIG::itemName = "NCONFIG";
const std::string WSEGLABY::CHANNELS::itemName = "CHANNELS";
const int WSEGLABY::CHANNELS::defaultValue = 2;
const std::string WSEGLABY::A::itemName = "A";
const double WSEGLABY::A::defaultValue = 0.000060;
const std::string WSEGLABY::L1::itemName = "L1";
const double WSEGLABY::L1::defaultValue = 0.186300;
const std::string WSEGLABY::L2::itemName = "L2";
const double WSEGLABY::L2::defaultValue = 0.283200;
const std::string WSEGLABY::D::itemName = "D";
const double WSEGLABY::D::defaultValue = 0.006316;
const std::string WSEGLABY::R::itemName = "R";
const double WSEGLABY::R::defaultValue = 0.000010;
const std::string WSEGLABY::GAMMA_INLET::itemName = "GAMMA_INLET";
const double WSEGLABY::GAMMA_INLET::defaultValue = 0.350000;
const std::string WSEGLABY::GAMMA_OUTLET::itemName = "GAMMA_OUTLET";
const double WSEGLABY::GAMMA_OUTLET::defaultValue = 0.500000;
const std::string WSEGLABY::GAMMA_LAB::itemName = "GAMMA_LAB";
const double WSEGLABY::GAMMA_LAB::defaultValue = 0.500000;
const std::string WSEGLABY::STATUS::itemName = "STATUS";
const std::string WSEGLABY::STATUS::defaultValue = "OPEN";


WSEGLINK::WSEGLINK( ) : ParserKeyword("WSEGLINK")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSEGLINK");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT2", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSEGLINK::keywordName = "WSEGLINK";
const std::string WSEGLINK::WELL::itemName = "WELL";
const std::string WSEGLINK::SEGMENT1::itemName = "SEGMENT1";
const std::string WSEGLINK::SEGMENT2::itemName = "SEGMENT2";


WSEGMULT::WSEGMULT( ) : ParserKeyword("WSEGMULT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSEGMULT");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("A", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("B", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("C", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("D", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("E", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("GOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSEGMULT::keywordName = "WSEGMULT";
const std::string WSEGMULT::WELL::itemName = "WELL";
const std::string WSEGMULT::SEGMENT1::itemName = "SEGMENT1";
const std::string WSEGMULT::SEGMENT2::itemName = "SEGMENT2";
const std::string WSEGMULT::A::itemName = "A";
const double WSEGMULT::A::defaultValue = 1.000000;
const std::string WSEGMULT::B::itemName = "B";
const double WSEGMULT::B::defaultValue = 0.000000;
const std::string WSEGMULT::C::itemName = "C";
const double WSEGMULT::C::defaultValue = 0.000000;
const std::string WSEGMULT::D::itemName = "D";
const double WSEGMULT::D::defaultValue = 0.000000;
const std::string WSEGMULT::E::itemName = "E";
const double WSEGMULT::E::defaultValue = 0.000000;
const std::string WSEGMULT::GOR::itemName = "GOR";
const double WSEGMULT::GOR::defaultValue = 0.000000;


WSEGPROP::WSEGPROP( ) : ParserKeyword("WSEGPROP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSEGPROP");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("D", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("R", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("A", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("V", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("PIPEA", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("CV", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("K", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSEGPROP::keywordName = "WSEGPROP";
const std::string WSEGPROP::WELL::itemName = "WELL";
const std::string WSEGPROP::SEGMENT1::itemName = "SEGMENT1";
const std::string WSEGPROP::SEGMENT2::itemName = "SEGMENT2";
const std::string WSEGPROP::D::itemName = "D";
const std::string WSEGPROP::R::itemName = "R";
const std::string WSEGPROP::A::itemName = "A";
const std::string WSEGPROP::V::itemName = "V";
const std::string WSEGPROP::PIPEA::itemName = "PIPEA";
const std::string WSEGPROP::CV::itemName = "CV";
const std::string WSEGPROP::K::itemName = "K";


WSEGPULL::WSEGPULL( ) : ParserKeyword("WSEGPULL")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSEGPULL");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("P", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("DP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("OIL_RATE_LIMIT", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Volume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("GRADIENT_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Pressure*Time/Volume");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSEGPULL::keywordName = "WSEGPULL";
const std::string WSEGPULL::WELL::itemName = "WELL";
const std::string WSEGPULL::SEGMENT1::itemName = "SEGMENT1";
const std::string WSEGPULL::SEGMENT2::itemName = "SEGMENT2";
const std::string WSEGPULL::P::itemName = "P";
const std::string WSEGPULL::DP::itemName = "DP";
const std::string WSEGPULL::OIL_RATE_LIMIT::itemName = "OIL_RATE_LIMIT";
const double WSEGPULL::OIL_RATE_LIMIT::defaultValue = 0.000000;
const std::string WSEGPULL::GRADIENT_FACTOR::itemName = "GRADIENT_FACTOR";
const double WSEGPULL::GRADIENT_FACTOR::defaultValue = 0.000000;


WSEGSEP::WSEGSEP( ) : ParserKeyword("WSEGSEP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSEGSEP");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("PHASE", ParserItem::itype::STRING);
        item.setDefault( std::string("NONE") );
        record.addItem(item);
     }
     {
        ParserItem item("EMAX", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     {
        ParserItem item("HOLDUP_FRACTION", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.010000) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSEGSEP::keywordName = "WSEGSEP";
const std::string WSEGSEP::WELL::itemName = "WELL";
const std::string WSEGSEP::SEGMENT1::itemName = "SEGMENT1";
const std::string WSEGSEP::SEGMENT2::itemName = "SEGMENT2";
const std::string WSEGSEP::PHASE::itemName = "PHASE";
const std::string WSEGSEP::PHASE::defaultValue = "NONE";
const std::string WSEGSEP::EMAX::itemName = "EMAX";
const double WSEGSEP::EMAX::defaultValue = 1.000000;
const std::string WSEGSEP::HOLDUP_FRACTION::itemName = "HOLDUP_FRACTION";
const double WSEGSEP::HOLDUP_FRACTION::defaultValue = 0.010000;


WSEGSICD::WSEGSICD( ) : ParserKeyword("WSEGSICD")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSEGSICD");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SEG1", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("SEG2", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("STRENGTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure*Time*Time/GeometricVolume*GeometricVolume");
        record.addItem(item);
     }
     {
        ParserItem item("LENGTH", ParserItem::itype::DOUBLE);
        item.setDefault( double(12.000000) );
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("DENSITY_CALI", ParserItem::itype::DOUBLE);
        item.setDefault( double(1000.250000) );
        item.push_backDimension("Density");
        record.addItem(item);
     }
     {
        ParserItem item("VISCOSITY_CALI", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.450000) );
        item.push_backDimension("Viscosity");
        record.addItem(item);
     }
     {
        ParserItem item("CRITICAL_VALUE", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.500000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("WIDTH_TRANS", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.050000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("MAX_VISC_RATIO", ParserItem::itype::DOUBLE);
        item.setDefault( double(5.000000) );
        item.push_backDimension("1");
        record.addItem(item);
     }
     {
        ParserItem item("METHOD_SCALING_FACTOR", ParserItem::itype::INT);
        item.setDefault( -1 );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_ABS_RATE", ParserItem::itype::DOUBLE);
        item.push_backDimension("GeometricVolume/Time");
        record.addItem(item);
     }
     {
        ParserItem item("STATUS", ParserItem::itype::STRING);
        item.setDefault( std::string("OPEN") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSEGSICD::keywordName = "WSEGSICD";
const std::string WSEGSICD::WELL::itemName = "WELL";
const std::string WSEGSICD::SEG1::itemName = "SEG1";
const std::string WSEGSICD::SEG2::itemName = "SEG2";
const std::string WSEGSICD::STRENGTH::itemName = "STRENGTH";
const std::string WSEGSICD::LENGTH::itemName = "LENGTH";
const double WSEGSICD::LENGTH::defaultValue = 12.000000;
const std::string WSEGSICD::DENSITY_CALI::itemName = "DENSITY_CALI";
const double WSEGSICD::DENSITY_CALI::defaultValue = 1000.250000;
const std::string WSEGSICD::VISCOSITY_CALI::itemName = "VISCOSITY_CALI";
const double WSEGSICD::VISCOSITY_CALI::defaultValue = 1.450000;
const std::string WSEGSICD::CRITICAL_VALUE::itemName = "CRITICAL_VALUE";
const double WSEGSICD::CRITICAL_VALUE::defaultValue = 0.500000;
const std::string WSEGSICD::WIDTH_TRANS::itemName = "WIDTH_TRANS";
const double WSEGSICD::WIDTH_TRANS::defaultValue = 0.050000;
const std::string WSEGSICD::MAX_VISC_RATIO::itemName = "MAX_VISC_RATIO";
const double WSEGSICD::MAX_VISC_RATIO::defaultValue = 5.000000;
const std::string WSEGSICD::METHOD_SCALING_FACTOR::itemName = "METHOD_SCALING_FACTOR";
const int WSEGSICD::METHOD_SCALING_FACTOR::defaultValue = -1;
const std::string WSEGSICD::MAX_ABS_RATE::itemName = "MAX_ABS_RATE";
const std::string WSEGSICD::STATUS::itemName = "STATUS";
const std::string WSEGSICD::STATUS::defaultValue = "OPEN";


WSEGSOLV::WSEGSOLV( ) : ParserKeyword("WSEGSOLV")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSEGSOLV");
  {
     ParserRecord record;
     {
        ParserItem item("USE_ITERATIVE_SOLVER", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_LINEAR_ITER", ParserItem::itype::INT);
        item.setDefault( 30 );
        record.addItem(item);
     }
     {
        ParserItem item("CONVERGENCE_TARGET", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-10) );
        record.addItem(item);
     }
     {
        ParserItem item("PC_FILL", ParserItem::itype::INT);
        item.setDefault( 2 );
        record.addItem(item);
     }
     {
        ParserItem item("DROP_TOL", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        record.addItem(item);
     }
     {
        ParserItem item("P_LIMIT", ParserItem::itype::DOUBLE);
        item.setDefault( double(1e-08) );
        record.addItem(item);
     }
     {
        ParserItem item("LOOP_THRESHOLD", ParserItem::itype::DOUBLE);
        item.setDefault( double(-1.000000) );
        item.push_backDimension("Length*Length*Length/Time");
        record.addItem(item);
     }
     {
        ParserItem item("LOOP_MULTIPLIER", ParserItem::itype::DOUBLE);
        item.setDefault( double(-1.000000) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSEGSOLV::keywordName = "WSEGSOLV";
const std::string WSEGSOLV::USE_ITERATIVE_SOLVER::itemName = "USE_ITERATIVE_SOLVER";
const std::string WSEGSOLV::USE_ITERATIVE_SOLVER::defaultValue = "NO";
const std::string WSEGSOLV::MAX_LINEAR_ITER::itemName = "MAX_LINEAR_ITER";
const int WSEGSOLV::MAX_LINEAR_ITER::defaultValue = 30;
const std::string WSEGSOLV::CONVERGENCE_TARGET::itemName = "CONVERGENCE_TARGET";
const double WSEGSOLV::CONVERGENCE_TARGET::defaultValue = 0.000000;
const std::string WSEGSOLV::PC_FILL::itemName = "PC_FILL";
const int WSEGSOLV::PC_FILL::defaultValue = 2;
const std::string WSEGSOLV::DROP_TOL::itemName = "DROP_TOL";
const double WSEGSOLV::DROP_TOL::defaultValue = 0.000000;
const std::string WSEGSOLV::P_LIMIT::itemName = "P_LIMIT";
const double WSEGSOLV::P_LIMIT::defaultValue = 0.000000;
const std::string WSEGSOLV::LOOP_THRESHOLD::itemName = "LOOP_THRESHOLD";
const double WSEGSOLV::LOOP_THRESHOLD::defaultValue = -1.000000;
const std::string WSEGSOLV::LOOP_MULTIPLIER::itemName = "LOOP_MULTIPLIER";
const double WSEGSOLV::LOOP_MULTIPLIER::defaultValue = -1.000000;


WSEGTABL::WSEGTABL( ) : ParserKeyword("WSEGTABL")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSEGTABL");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SURFACT", ParserItem::itype::UDA);
        item.push_backDimension("Mass/Length*Length*Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSEGTABL::keywordName = "WSEGTABL";
const std::string WSEGTABL::WELL::itemName = "WELL";
const std::string WSEGTABL::SURFACT::itemName = "SURFACT";


WSEGVALV::WSEGVALV( ) : ParserKeyword("WSEGVALV")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSEGVALV");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SEGMENT_NUMBER", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("CV", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("AREA", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("EXTRA_LENGTH", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("PIPE_D", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("ROUGHNESS", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length");
        record.addItem(item);
     }
     {
        ParserItem item("PIPE_A", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length");
        record.addItem(item);
     }
     {
        ParserItem item("STATUS", ParserItem::itype::STRING);
        item.setDefault( std::string("OPEN") );
        record.addItem(item);
     }
     {
        ParserItem item("MAX_A", ParserItem::itype::DOUBLE);
        item.push_backDimension("Length*Length");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSEGVALV::keywordName = "WSEGVALV";
const std::string WSEGVALV::WELL::itemName = "WELL";
const std::string WSEGVALV::SEGMENT_NUMBER::itemName = "SEGMENT_NUMBER";
const std::string WSEGVALV::CV::itemName = "CV";
const std::string WSEGVALV::AREA::itemName = "AREA";
const std::string WSEGVALV::EXTRA_LENGTH::itemName = "EXTRA_LENGTH";
const std::string WSEGVALV::PIPE_D::itemName = "PIPE_D";
const std::string WSEGVALV::ROUGHNESS::itemName = "ROUGHNESS";
const std::string WSEGVALV::PIPE_A::itemName = "PIPE_A";
const std::string WSEGVALV::STATUS::itemName = "STATUS";
const std::string WSEGVALV::STATUS::defaultValue = "OPEN";
const std::string WSEGVALV::MAX_A::itemName = "MAX_A";


WSKPTAB::WSKPTAB( ) : ParserKeyword("WSKPTAB")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSKPTAB");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TABLE_NUMBER_WATER", ParserItem::itype::INT);
        record.addItem(item);
     }
     {
        ParserItem item("TABLE_NUMBER_POLYMER", ParserItem::itype::INT);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSKPTAB::keywordName = "WSKPTAB";
const std::string WSKPTAB::WELL::itemName = "WELL";
const std::string WSKPTAB::TABLE_NUMBER_WATER::itemName = "TABLE_NUMBER_WATER";
const std::string WSKPTAB::TABLE_NUMBER_POLYMER::itemName = "TABLE_NUMBER_POLYMER";


WSOLVENT::WSOLVENT( ) : ParserKeyword("WSOLVENT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WSOLVENT");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SOLVENT_FRACTION", ParserItem::itype::UDA);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WSOLVENT::keywordName = "WSOLVENT";
const std::string WSOLVENT::WELL::itemName = "WELL";
const std::string WSOLVENT::SOLVENT_FRACTION::itemName = "SOLVENT_FRACTION";


WTADD::WTADD( ) : ParserKeyword("WTADD")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WTADD");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("CONTROL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("SHIFT", ParserItem::itype::UDA);
        record.addItem(item);
     }
     {
        ParserItem item("NUM", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WTADD::keywordName = "WTADD";
const std::string WTADD::WELL::itemName = "WELL";
const std::string WTADD::CONTROL::itemName = "CONTROL";
const std::string WTADD::SHIFT::itemName = "SHIFT";
const std::string WTADD::NUM::itemName = "NUM";
const int WTADD::NUM::defaultValue = 1;


WTEMP::WTEMP( ) : ParserKeyword("WTEMP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WTEMP");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TEMP", ParserItem::itype::DOUBLE);
        item.push_backDimension("Temperature");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WTEMP::keywordName = "WTEMP";
const std::string WTEMP::WELL::itemName = "WELL";
const std::string WTEMP::TEMP::itemName = "TEMP";


WTEMPQ::WTEMPQ( ) : ParserKeyword("WTEMPQ")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WTEMPQ");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("LGR", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WTEMPQ::keywordName = "WTEMPQ";
const std::string WTEMPQ::WELL::itemName = "WELL";
const std::string WTEMPQ::LGR::itemName = "LGR";


WTEST::WTEST( ) : ParserKeyword("WTEST")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WTEST");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("INTERVAL", ParserItem::itype::DOUBLE);
        item.push_backDimension("Time");
        record.addItem(item);
     }
     {
        ParserItem item("REASON", ParserItem::itype::STRING);
        item.setDefault( std::string("") );
        record.addItem(item);
     }
     {
        ParserItem item("TEST_NUM", ParserItem::itype::INT);
        item.setDefault( 0 );
        record.addItem(item);
     }
     {
        ParserItem item("START_TIME", ParserItem::itype::DOUBLE);
        item.setDefault( double(0) );
        item.push_backDimension("Time");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WTEST::keywordName = "WTEST";
const std::string WTEST::WELL::itemName = "WELL";
const std::string WTEST::INTERVAL::itemName = "INTERVAL";
const std::string WTEST::REASON::itemName = "REASON";
const std::string WTEST::REASON::defaultValue = "";
const std::string WTEST::TEST_NUM::itemName = "TEST_NUM";
const int WTEST::TEST_NUM::defaultValue = 0;
const std::string WTEST::START_TIME::itemName = "START_TIME";
const double WTEST::START_TIME::defaultValue = 0.000000;


WTHPMAX::WTHPMAX( ) : ParserKeyword("WTHPMAX")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WTHPMAX");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("MAX_THP_DESIGN_LIMIT", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("CONTROL", ParserItem::itype::STRING);
        item.setDefault( std::string("ORAT") );
        record.addItem(item);
     }
     {
        ParserItem item("CONTROL_LIMIT", ParserItem::itype::DOUBLE);
        record.addItem(item);
     }
     {
        ParserItem item("THP_OPEN_LIMIT", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WTHPMAX::keywordName = "WTHPMAX";
const std::string WTHPMAX::WELL::itemName = "WELL";
const std::string WTHPMAX::MAX_THP_DESIGN_LIMIT::itemName = "MAX_THP_DESIGN_LIMIT";
const std::string WTHPMAX::CONTROL::itemName = "CONTROL";
const std::string WTHPMAX::CONTROL::defaultValue = "ORAT";
const std::string WTHPMAX::CONTROL_LIMIT::itemName = "CONTROL_LIMIT";
const std::string WTHPMAX::THP_OPEN_LIMIT::itemName = "THP_OPEN_LIMIT";


WTMULT::WTMULT( ) : ParserKeyword("WTMULT")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WTMULT");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("CONTROL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("FACTOR", ParserItem::itype::UDA);
        record.addItem(item);
     }
     {
        ParserItem item("NUM", ParserItem::itype::INT);
        item.setDefault( 1 );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WTMULT::keywordName = "WTMULT";
const std::string WTMULT::WELL::itemName = "WELL";
const std::string WTMULT::CONTROL::itemName = "CONTROL";
const std::string WTMULT::FACTOR::itemName = "FACTOR";
const std::string WTMULT::NUM::itemName = "NUM";
const int WTMULT::NUM::defaultValue = 1;


WTRACER::WTRACER( ) : ParserKeyword("WTRACER")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WTRACER");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("TRACER", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("CONCENTRATION", ParserItem::itype::UDA);
        record.addItem(item);
     }
     {
        ParserItem item("CUM_TRACER_FACTOR", ParserItem::itype::UDA);
        record.addItem(item);
     }
     {
        ParserItem item("PRODUCTION_GROUP", ParserItem::itype::STRING);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WTRACER::keywordName = "WTRACER";
const std::string WTRACER::WELL::itemName = "WELL";
const std::string WTRACER::TRACER::itemName = "TRACER";
const std::string WTRACER::CONCENTRATION::itemName = "CONCENTRATION";
const std::string WTRACER::CUM_TRACER_FACTOR::itemName = "CUM_TRACER_FACTOR";
const std::string WTRACER::PRODUCTION_GROUP::itemName = "PRODUCTION_GROUP";


WVFPDP::WVFPDP( ) : ParserKeyword("WVFPDP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WVFPDP");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("DELTA_P", ParserItem::itype::DOUBLE);
        item.push_backDimension("Pressure");
        record.addItem(item);
     }
     {
        ParserItem item("LOSS_SCALING_FACTOR", ParserItem::itype::DOUBLE);
        item.setDefault( double(1.000000) );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WVFPDP::keywordName = "WVFPDP";
const std::string WVFPDP::WELL::itemName = "WELL";
const std::string WVFPDP::DELTA_P::itemName = "DELTA_P";
const std::string WVFPDP::LOSS_SCALING_FACTOR::itemName = "LOSS_SCALING_FACTOR";
const double WVFPDP::LOSS_SCALING_FACTOR::defaultValue = 1.000000;


WVFPEXP::WVFPEXP( ) : ParserKeyword("WVFPEXP")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WVFPEXP");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("EXPLICIT_IMPLICIT", ParserItem::itype::STRING);
        item.setDefault( std::string("IMP") );
        record.addItem(item);
     }
     {
        ParserItem item("CLOSE", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("PREVENT_THP", ParserItem::itype::STRING);
        item.setDefault( std::string("NO") );
        record.addItem(item);
     }
     {
        ParserItem item("EXTRAPOLATION_CONTROL", ParserItem::itype::STRING);
        item.setDefault( std::string("WG") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WVFPEXP::keywordName = "WVFPEXP";
const std::string WVFPEXP::WELL::itemName = "WELL";
const std::string WVFPEXP::EXPLICIT_IMPLICIT::itemName = "EXPLICIT_IMPLICIT";
const std::string WVFPEXP::EXPLICIT_IMPLICIT::defaultValue = "IMP";
const std::string WVFPEXP::CLOSE::itemName = "CLOSE";
const std::string WVFPEXP::CLOSE::defaultValue = "NO";
const std::string WVFPEXP::PREVENT_THP::itemName = "PREVENT_THP";
const std::string WVFPEXP::PREVENT_THP::defaultValue = "NO";
const std::string WVFPEXP::EXTRAPOLATION_CONTROL::itemName = "EXTRAPOLATION_CONTROL";
const std::string WVFPEXP::EXTRAPOLATION_CONTROL::defaultValue = "WG";


WWPAVE::WWPAVE( ) : ParserKeyword("WWPAVE")
{
  setSizeType(SLASH_TERMINATED);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("WWPAVE");
  {
     ParserRecord record;
     {
        ParserItem item("WELL", ParserItem::itype::STRING);
        record.addItem(item);
     }
     {
        ParserItem item("F1", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.500000) );
        record.addItem(item);
     }
     {
        ParserItem item("F2", ParserItem::itype::DOUBLE);
        item.setDefault( double(0.500000) );
        record.addItem(item);
     }
     {
        ParserItem item("DEPTH_CORRECTION", ParserItem::itype::STRING);
        item.setDefault( std::string("WELL") );
        record.addItem(item);
     }
     {
        ParserItem item("WELL_CONNECTION", ParserItem::itype::STRING);
        item.setDefault( std::string("OPEN") );
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string WWPAVE::keywordName = "WWPAVE";
const std::string WWPAVE::WELL::itemName = "WELL";
const std::string WWPAVE::F1::itemName = "F1";
const double WWPAVE::F1::defaultValue = 0.500000;
const std::string WWPAVE::F2::itemName = "F2";
const double WWPAVE::F2::defaultValue = 0.500000;
const std::string WWPAVE::DEPTH_CORRECTION::itemName = "DEPTH_CORRECTION";
const std::string WWPAVE::DEPTH_CORRECTION::defaultValue = "WELL";
const std::string WWPAVE::WELL_CONNECTION::itemName = "WELL_CONNECTION";
const std::string WWPAVE::WELL_CONNECTION::defaultValue = "OPEN";


ZCORN::ZCORN( ) : ParserKeyword("ZCORN")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("GRID");
  clearDeckNames();
  addDeckName("ZCORN");
  {
     ParserRecord record;
     {
        ParserItem item("data", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("Length");
        record.addDataItem(item);
     }
     addDataRecord( record );
  }
}
const std::string ZCORN::keywordName = "ZCORN";
const std::string ZCORN::data::itemName = "data";


ZFACT1::ZFACT1( ) : ParserKeyword("ZFACT1")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NUM_STATE_EQ",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ZFACT1");
  {
     ParserRecord record;
     {
        ParserItem item("Z0", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ZFACT1::keywordName = "ZFACT1";
const std::string ZFACT1::Z0::itemName = "Z0";


ZFACT1S::ZFACT1S( ) : ParserKeyword("ZFACT1S")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NUM_STATE_EQ",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ZFACT1S");
  {
     ParserRecord record;
     {
        ParserItem item("Z0", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ZFACT1S::keywordName = "ZFACT1S";
const std::string ZFACT1S::Z0::itemName = "Z0";


ZFACTOR::ZFACTOR( ) : ParserKeyword("ZFACTOR")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NUM_STATE_EQ",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ZFACTOR");
  {
     ParserRecord record;
     {
        ParserItem item("Z0", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ZFACTOR::keywordName = "ZFACTOR";
const std::string ZFACTOR::Z0::itemName = "Z0";


ZFACTORS::ZFACTORS( ) : ParserKeyword("ZFACTORS")
{
  setSizeType(OTHER_KEYWORD_IN_DECK);
  initSizeKeyword("TABDIMS","NUM_STATE_EQ",0);
  addValidSectionName("PROPS");
  clearDeckNames();
  addDeckName("ZFACTORS");
  {
     ParserRecord record;
     {
        ParserItem item("Z0", ParserItem::itype::DOUBLE);
        item.setSizeType(ParserItem::item_size::ALL);
        item.push_backDimension("1");
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ZFACTORS::keywordName = "ZFACTORS";
const std::string ZFACTORS::Z0::itemName = "Z0";


ZIPP2OFF::ZIPP2OFF( ) : ParserKeyword("ZIPP2OFF")
{
  setFixedSize( (size_t) 0);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("ZIPP2OFF");
}
const std::string ZIPP2OFF::keywordName = "ZIPP2OFF";


ZIPPY2::ZIPPY2( ) : ParserKeyword("ZIPPY2")
{
  setFixedSize( (size_t) 1);
  addValidSectionName("SCHEDULE");
  clearDeckNames();
  addDeckName("ZIPPY2");
  {
     ParserRecord record;
     {
        ParserItem item("SETTINGS", ParserItem::itype::STRING);
        item.setSizeType(ParserItem::item_size::ALL);
        record.addItem(item);
     }
     addRecord( record );
  }
}
const std::string ZIPPY2::keywordName = "ZIPPY2";
const std::string ZIPPY2::SETTINGS::itemName = "SETTINGS";


}
void Parser::addDefaultKeywords() {
  Ewoms::ParserKeywords::addDefaultKeywords(*this);
}}
